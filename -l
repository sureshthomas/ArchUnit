[33mcommit 1d74f31f6d3deb0d3ca51833a99d6a54840a9885[m[33m ([m[1;36mHEAD -> [m[1;32mnew-branch-name[m[33m, [m[1;33mtag: 1.1[m[33m, [m[1;33mtag: 1.0[m[33m, [m[1;31morigin/master[m[33m, [m[1;31morigin/HEAD[m[33m, [m[1;32mmaster[m[33m)[m
Merge: e06cab9f b8d95940
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jul 21 19:10:42 2019 +0200

    Merge pull request #197 from societe-generale/addingLogStatementsForPropertyFileLoading
    
    adding log statements around archUnit property file

[33mcommit b8d95940fd789f5acc954bd5c590fa0edad62a4b[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jul 21 18:28:46 2019 +0200

    Review: Might be useful to see the concrete URL that /archunit.properties has resolved to in the logging statement
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 5c15712cf2e952a56377bda95e87513605099bab[m
Author: Vincent FUCHS <vincent.fuchs@gmail.com>
Date:   Sun Jul 21 15:11:31 2019 +0200

    adding a warn log statements to avoid failing silently in case of IOException while reading properties file
    
    Signed-off-by: Vincent FUCHS <vincent.fuchs@gmail.com>

[33mcommit 9efa161dbe144a98f0838ae8a827e288c055dbc3[m
Author: Vincent FUCHS <vincent.fuchs@gmail.com>
Date:   Sun Jul 21 15:02:56 2019 +0200

    adding log statements to indicate whether archUnit property file is found or not
    
    Signed-off-by: Vincent FUCHS <vincent.fuchs@gmail.com>

[33mcommit e06cab9f20fb920efe9b8890c557470a77615b9c[m
Merge: 89e60049 26d2bedf
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jul 21 17:48:42 2019 +0200

    Merge pull request #203 from hankem/java12-compatibility
    
    make tests compatible with Java 12 (#198)

[33mcommit 26d2bedf93d7c9ce710838c04264690001bfda25[m
Author: Manfred Hanke <Manfred.Hanke@tngtech.com>
Date:   Thu Jul 18 22:23:25 2019 +0200

    make tests compatible with Java 12 (#198)
    
    With Java 12,
    * java.lang.Enum also implements java.lang.constant.Constable, not only Comparable & Serializable
    * java.lang.reflect.Constructor.class.getDeclaredFields() returns an empty array (JDK-8210522),
      making Constructor.class a sub-optimal test object (ArchUnit's import seems to work just fine,
      but the test fails to construct reference values to be compared with the actual results.)
    
    Signed-off-by: Manfred Hanke <Manfred.Hanke@tngtech.com>

[33mcommit 89e60049c699b1fc1cb6101f60ebe21f3196b396[m
Merge: ec5df463 75b60970
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Jul 19 14:11:44 2019 +0200

    Merge pull request #174 from spanierm/master
    
    Add "onion architecture" builder

[33mcommit 75b60970ae8d310ff24f4112673586be32d25889[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Jul 9 01:40:08 2019 +0700

    Review: Removed some obsolete code from OnionArchitecture, refactored and improved test (3 pattern assertions were actually wrong, but matched "in (ApplicationLayerClass.java:xx)" by accident).
    
    Issue: #174
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 886e0ebbad9ad92b89ab42410cc83b758cc449f1[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Jul 9 00:39:20 2019 +0700

    Review: Regenerate User Guide with added Onion Architecture (note that that part about FreezingArchRule was outdated as well). Adjusted the diagram a little, because I think it is easier if domain and adapters are grouped.
    
    Issue: #174
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 12d2b3d229af1ecf46a6c867e3c5af47c4aad414[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Jul 8 22:15:17 2019 +0700

    Review: Add more realistic shopping example application for onion architecture. Adjust integration test to match example.
    
    Issue: #174
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit b3d04110a3a6f2d9b1f366658c64eaf808531dda[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jul 7 02:44:53 2019 +0700

    Review: Restructure example project -> aspects should be separated. Grouped most of the original project into subproject "layers", even if it contains some classes like ClassViolatingCodingRules. Extracted cycles and plantuml as separate aspects and integrated onion architecture.
    
    Issue: #174
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 6893aa42ba0ec7aeade488f3c96d91800f8b9ee3[m
Author: Markus Spanier <markus.spanier@tngtech.com>
Date:   Sat Jun 22 13:32:16 2019 +0200

    Add support for onion architecture #89
    
    * add integration test
    * only show layers in description that are actually used
    
    Signed-off-by: Markus Spanier <markus.spanier@tngtech.com>

[33mcommit 51623d5e282caeeedc694be8e3925fa9e3707ca9[m
Author: Markus Spanier <markus.spanier@tngtech.com>
Date:   Thu Jun 20 20:01:09 2019 +0200

    Add support for onion architecture #89
    
    * add proper implementations of 'as' and 'because'
    * always return a new delegate so that all methods work without the need to call 'evaluate'
    
    Signed-off-by: Markus Spanier <markus.spanier@tngtech.com>

[33mcommit 1159bf475a5eecfc65238eecc8467a829bf108f7[m
Author: Markus Spanier <markus.spanier@tngtech.com>
Date:   Mon Jun 10 12:44:06 2019 +0200

    Add support for onion architecture #89
    
    Signed-off-by: Markus Spanier <markus.spanier@tngtech.com>

[33mcommit 9f34db79025f8b54718489a606f1b2ace96e75ac[m
Author: Markus Spanier <markus.spanier@tngtech.com>
Date:   Sun May 26 18:31:32 2019 +0200

    Add support for onion architecture #89
    
    Signed-off-by: Markus Spanier <markus.spanier@tngtech.com>

[33mcommit ec5df463596fd3970f07aa236e0ac532c8790a0d[m
Merge: 783e72b5 410562c9
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Jul 19 12:55:43 2019 +0200

    Merge pull request #200 from hankem/exclude-spotbugs-false-positives
    
    exclude spotbugs false positives to support build with JDK-9/10 (#199)

[33mcommit 410562c9db1f23d6ac3762755d0b6cb6a43b3631[m
Author: Manfred Hanke <Manfred.Hanke@tngtech.com>
Date:   Wed Jul 17 12:54:36 2019 +0200

    exclude spotbugs false positives to support build with JDK-9/10 (#199)
    
    Signed-off-by: Manfred Hanke <Manfred.Hanke@tngtech.com>

[33mcommit 783e72b5409ae219e3540ec15d993778a882c0f8[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Jul 10 01:46:12 2019 +0700

    Conditions should not hold state if they are referenced from static fields (like JUnit support)
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit d26ea392704a456a2d94f85eb2a2b5d89d454740[m
Merge: 2ac6b981 874458d4
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Jul 8 15:37:41 2019 +0700

    Merge pull request #195 from jqno/master
    
    Update ASM to support JDK 13

[33mcommit 874458d4e833185351b496d2b09aa18f5cb86565[m
Author: Jan Ouwens <jan.ouwens@gmail.com>
Date:   Mon Jul 8 09:28:56 2019 +0200

    Update ASM to support JDK 13

[33mcommit 2ac6b981a3ca5ae845dcaa25709988034c6426ed[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Jul 6 00:15:10 2019 +0700

    Change log level of current class to be imported from info to debug.
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit cfd24fc272a7fd92fdc5fa3241e068a237adbdf8[m
Merge: b3ab029b 8b0b6a97
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Jul 4 23:48:43 2019 +0700

    Merge pull request #181 from TNG/freeze_rules
    
    Provide a way to store all current violations of a rule and successively only report new ones

[33mcommit 8b0b6a973e380b3bf23e56e8bff09f6955b4943f[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Jul 4 21:04:52 2019 +0700

    Log of existing rule should not be level error, since this will happen during the normal flow if an existing stored violation is adjusted.
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 5feb2fa28a252e39d43f774818b82b369aea7daa[m
Author: Manfred Hanke <Manfred.Hanke@tngtech.com>
Date:   Thu Jul 4 00:25:18 2019 +0200

    allow for rule-violations stored in files whose name is not a UUID
    
    Signed-off-by: Manfred Hanke <Manfred.Hanke@tngtech.com>

[33mcommit 41b25d9433a73b11faaa13e90eaa7df3994b1824[m
Author: Manfred Hanke <Manfred.Hanke@tngtech.com>
Date:   Thu Jul 4 00:20:41 2019 +0200

    log number of violations
    
    Signed-off-by: Manfred Hanke <Manfred.Hanke@tngtech.com>

[33mcommit afc10e607f3e5e5dabf5787ed850ec8f6c03e465[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jun 30 13:57:54 2019 +0700

    Further improve docs by documenting how to configure ViolationStore and ViolationLineMatcher within archunit.properties. Also introduced custom exception for failed initialization of configured ViolationLineMatcher instead of (falsely) throwing a StoreInitializationFailedException.
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit c8c98c6077ab1a619994ce484ebe4e01c44f8362[m
Author: Manfred Hanke <Manfred.Hanke@tngtech.com>
Date:   Thu Jun 27 21:54:16 2019 +0200

    some review comments on FreezingArchRule PR#181 (documentation)
    
    Signed-off-by: Manfred Hanke <Manfred.Hanke@tngtech.com>

[33mcommit e1e2c4bcd4f668f978787d19bdac64b4d5680d4d[m
Author: Manfred Hanke <Manfred.Hanke@tngtech.com>
Date:   Fri Jun 28 00:46:39 2019 +0200

    some review comments on FreezingArchRule PR#181
    
    Signed-off-by: Manfred Hanke <Manfred.Hanke@tngtech.com>

[33mcommit 774771164681c7f2ebf6de4033f9a2f059573771[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Jun 15 15:26:22 2019 +0700

    Added documentation
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit bf8274a9b811b74f9af45130f661ed6be10126fe[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Jun 15 14:49:11 2019 +0700

    Improve performance: Using a regex within the default line matcher has a massive performance impact (tested on hibernate core where evaluation time was reduced by 50% with this algorithm)
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 46b296bf7b98c2fa9102c550c4ba8862154c0bd3[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Jun 15 14:47:37 2019 +0700

    Improve FreezingArchRule to only use LineMatcher once. Also fixed behavior where FreezingArchRule would not fail if the count of an already recorded violation with respect to the given matcher was raised.
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 04797639eecd1cf5660da37f6a4236276e9520a2[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jun 9 02:20:59 2019 +0700

    Added examples and integration test
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 103e1d3af08e9bafa1741789e01c2fcd50cbfc49[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jun 9 02:11:03 2019 +0700

    Fixed violation handling for filtered events. Also added some logging.
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit fed0a4590353d68af39ad8c7617cef78acda7296[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jun 9 00:28:04 2019 +0700

    Improved handling of known violations. So far if a condition event added multiple lines (like AndConditionEvent) and a new line appeared, all lines would be reported as violation. Now only the new line will be reported.
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 2baef232fa1b43dd451b21d13a7467b2766fc9ba[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Jun 8 23:38:38 2019 +0700

    TextFileBasedViolationStore should create configured folder if it does not exist, instead of throwing an exception.
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 7da683c8f919234a753f1ab0ad1d509396cf3886[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Jun 8 23:26:12 2019 +0700

    Made ViolationLineMatcher configurable via archunit.properties.
    Improved visibility by moving everything (default)factory specific to package private classes.
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 278e8b7351c10d518c48ea90ff45e5ff85e6a6c1[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri May 3 13:37:24 2019 +0700

    Added DefaultViolationStoreFactory which returns a simple file based ViolationStore.
    Also made ViolationStore to use configurable through archunit.properties.
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 350257ebd063e124e52d7de3b2ea07a5c38f3943[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Apr 11 15:14:23 2019 +0900

    Extended ArchConfiguration to make it possible to add further properties for example for FreezingArchRule as a first client of custom properties.
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 4cd639fe1bc377faeb353a02fbb9e1a0eebe7695[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Apr 11 01:02:36 2019 +0900

    Initial draft of an "FreezingArchRule" capable to wrap a given ArchRule to provide support for legacy applications where this rule will initially be violated many times.
    Provides two hooks for extension, first a ViolationStore to determine how the given result will be stored. This should enable to pass a simple file based store, but also implement a custom store that persists to a database or a REST endpoint.
    Second a ViolationLineMatcher to configure how "rough" stored lines of violations should be compared to actual lines of violations on consecutive evaluation of the given rule. This way it is possible to ignore line numbers or details of given messages to make the comparison more robust against refactorings.
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit a3c447d8857ec8349213c976156348c0f8fd6673[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Apr 10 17:37:49 2019 +0900

    Make CollectsLines deprecated. The API seems pretty useless, naturally pretty much every implementation will simply add the lines of the violations to the supplied CollectsLines, and every client that is interested in the raw message lines has to write a dummy wrapper around a collection to access the lines.
    Thus a simple method getDescriptionLines() seems way more reasonable here.
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit b3ab029b1dec46128167d75a1f4678e4183bf71e[m
Merge: 812f3c34 451f15bc
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Jul 4 21:40:17 2019 +0700

    Merge pull request #188 from jzheaux/add-when
    
    Add Predicate-based DescribedPredicate Factory

[33mcommit 451f15bcd52239a737b73c52560368f1c9174e93[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Jul 4 21:23:27 2019 +0700

    Review: Consistent parameter naming
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 27396fe98299bea12204a8556051e31c3166a147[m
Author: Josh Cummings <josh.cummings@gmail.com>
Date:   Wed Jun 26 18:13:46 2019 -0600

    Add Predicate-based DescribedPredicate Factory
    
    Compose a DescribedPredicate from a Predicate and a description.
    
    Signed-off-by: Josh Cummings <josh.cummings@gmail.com>

[33mcommit 812f3c34623f295d98cddf20e58a84e81fbd779b[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Jun 12 21:20:51 2019 +0700

    Made rule name fit content
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 1c92fd71e669c1466567353a31f5ef700392892e[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Jun 12 20:45:21 2019 +0700

    Fixed typo
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 024c5d2502e91de6cb586b86c7084dbd12f3ef37[m
Merge: b3058266 04d604d4
Author: Peter Gafert <superpete@gmx.de>
Date:   Tue Apr 16 15:52:23 2019 +0700

    Merge pull request #170 from sullis/mockito-2.27.0
    
    mockito 2.27.0

[33mcommit 04d604d40923ee067c3152af44f851cffedf97e3[m
Author: Sean Sullivan <github@seansullivan.com>
Date:   Sat Apr 13 02:01:46 2019 -0400

    mockito 2.27.0

[33mcommit b3058266b4b5d542b3157d916d034335c317be74[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Mar 31 14:21:55 2019 +0200

    Adjust versions in docs
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 54dfd585d6d977693ef501c4828640546a22d48e[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Mar 24 15:43:58 2019 +0100

    Added negations to CodeUnitsShould.*(..)
    
    Issue: #38
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit fecf048fda79c6e07c0ae3a783a385d3fee05781[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Mar 20 21:27:23 2019 +0100

    Made some API collection return types more specific, since it integrates nicer with JDK >= 8 streams. Also introduced ArchUnit's own ForwardingCollection/-Set, since we don't want to have Guava in the public API (sneakily leaked through Slice).
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 1cfefb15ea3bc22a829e4d18c23f31c0604a2482[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Mar 20 20:37:37 2019 +0100

    We now consider all classes of the graph when creating packages and all classes now get their "dependencies to self" attached (even stubs). This means that all dependencies of imported classes will now be sorted into the packages as well and we won't have the surprising case, that we import a package "com.foo" and end up with a case like com.foo.Foo depending on com.foo.Bar[] which in turn is not a member of "com.foo" because it was created as a stub. On the other hand, it is now possible to find elements within JavaClasses.getDefaultPackage().getAllClasses() that are themselves not contained within JavaClasses (because they are just a dependency and not directly imported).
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 0f836b13499f8b843d88e42b7e48a24fa2f41de7[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Mar 20 18:50:58 2019 +0100

    A Slice should not only know the dependencies originating from it, but also the ones targeting it.
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 92fef8a49e370939ae8709137fef8d731cc7b926[m
Merge: 751bbffc f145cbdb
Author: Peter Gafert <superpete@gmx.de>
Date:   Sun Mar 31 14:09:42 2019 +0200

    Merge pull request #164 from hankem/static-final-syntax
    
    static/final syntax

[33mcommit f145cbdb33c7c6da6f92b44384713f04cb803580[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Mar 31 13:45:05 2019 +0200

    Review: Pulled the common "beStatic", ... methods up to AbstractMembersShouldInternal (analogously to MembersThat). Also extracted the conditions to ArchConditions to be consistent with the rest (like bePublic(), etc.)
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit ca18b17df44fe0d73720c4a6bc763e29366d1a78[m
Author: Manfred Hanke <Manfred.Hanke@tngtech.com>
Date:   Sun Mar 24 23:58:52 2019 +0100

    add methods().should().{be,notBe}{Static,Final} syntax
    
    Signed-off-by: Manfred Hanke <Manfred.Hanke@tngtech.com>

[33mcommit 6b13196835cbf4de188e294291b4b8002d62f90a[m
Author: Manfred Hanke <Manfred.Hanke@tngtech.com>
Date:   Thu Mar 21 20:42:31 2019 +0100

    add methods().that().are[Not]{Static,Final} syntax
    
    Signed-off-by: Manfred Hanke <Manfred.Hanke@tngtech.com>

[33mcommit efbbc3255c9505a050488d25bf7fbb1c0ad5c679[m
Author: Manfred Hanke <Manfred.Hanke@tngtech.com>
Date:   Thu Mar 28 08:11:09 2019 +0100

    add fields().should().{be,notBe}{Static,Final} syntax
    
    Signed-off-by: Manfred Hanke <Manfred.Hanke@tngtech.com>

[33mcommit c590ec8cd94f4b84eac84553863cbbb07ad969ef[m
Author: Manfred Hanke <Manfred.Hanke@tngtech.com>
Date:   Wed Mar 20 18:02:35 2019 +0100

    add fields().that().are[Not]{Static,Final} syntax
    
    Signed-off-by: Manfred Hanke <Manfred.Hanke@tngtech.com>

[33mcommit 85c5d06060c59021903142d781d90cd8fca04cc3[m
Author: Manfred Hanke <Manfred.Hanke@tngtech.com>
Date:   Mon Mar 18 23:01:22 2019 +0100

    improve userguide
    
    * replace reference to @Deprecated methods getType() & getParameters()
    * replace reference to @Deprecated ImportOptions DONT_INCLUDE_JARS & DONT_INCLUDE_TESTS
    * domain-overview diagram:
      - indicate that JavaStaticInitializer does not have a ThrowsClause
      - add multiplicities
    * mention ArchRuleDefinition's other methods to compose member rules
    * remove a bunch of (AFAIK) superfluous commas ;-)
    
    Signed-off-by: Manfred Hanke <Manfred.Hanke@tngtech.com>

[33mcommit ce6618a8f5a30f07e18997c59a4645cbe8e51de4[m
Author: Manfred Hanke <Manfred.Hanke@tngtech.com>
Date:   Tue Mar 19 18:29:01 2019 +0100

    add archunit-example with fields()
    
    Signed-off-by: Manfred Hanke <Manfred.Hanke@tngtech.com>

[33mcommit 751bbffc2c3b6081e01f5667f56b1316b257d7c5[m
Merge: dbbd5ff9 6f479632
Author: Peter Gafert <superpete@gmx.de>
Date:   Fri Mar 29 17:02:50 2019 +0100

    Merge pull request #163 from asbachb/issue-162-negate-haveRawType
    
    #162: Added negation for `haveRawType`

[33mcommit 6f479632d5e0d493aa06d0c845df03965eb78c81[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Mar 24 14:52:27 2019 +0100

    Review:
    - in the Javadoc the field type must be String to be violated
    - combined the two tests by parameterizing the expected violations
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit d90822c4b8602e84d14dfc38c55d114fceadcf66[m
Author: Benjamin Asbach <asbachb@users.noreply.github.com>
Date:   Sat Mar 23 20:46:34 2019 +0100

    #162: Added negation for `haveRawType`
    
    Signed-off-by: Benjamin Asbach <asbachb@users.noreply.github.com>

[33mcommit dbbd5ff95c5884feaa9b55f703ce9e90d01c5166[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Mar 17 19:24:30 2019 +0100

    Set master to next SNAPSHOT version
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit aa96f5b00f34e51ab9739f0a77ee36e920156779[m[33m ([m[1;33mtag: v0.10.1[m[33m)[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Mar 17 18:27:01 2019 +0100

    Update versions for new release 0.10.1
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 6fab823264c36700642f4cc8326e0ac646033b11[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Mar 17 18:24:58 2019 +0100

    Fix API -> Parameters PackageVisitor and ClassVisitor must be public. Also adjusted outdated example in user guide.
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 820853540a68d2a642f1b2334ac4f34265907e5d[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Mar 17 17:35:05 2019 +0100

    Adjusted user guide, surefire-plugin 2.22.0 actually works without the provider, as long as the engine dependency is added to the project test compile scope. This is somewhat broken, but seems to be the "Maven Way" at the moment.
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 7f5768a809d3101da2e6b742998f57cbc770ff35[m[33m ([m[1;33mtag: v0.10.0[m[33m)[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Mar 17 16:27:01 2019 +0100

    Prepare release 0.10.0
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit f4a43204609d44018421055d7996a6918ce2ed88[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Mar 16 16:10:09 2019 +0100

    Update docs for release 0.10.0
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 957b5146cc564278c8d4610afa2f027b8eb4384b[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Mar 16 17:21:50 2019 +0100

    Upgraded JUnit Jupiter and Platform dependencies to current version, however for some reason @ArchTag evaluation does not work correctly, if we leave out junit-platform-surefire-provider? (which has meanwhile been discontinued)
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 23bf5d2bed716559c375950a5a964ed011bebe5b[m
Merge: f2121091 cf6461fa
Author: Peter Gafert <superpete@gmx.de>
Date:   Sat Mar 16 15:59:09 2019 +0100

    Merge pull request #161 from TNG/make_array_type_return_package_name_of_their_component_type
    
    Make array type return package name of their component type

[33mcommit cf6461faac2fc7a79c006514f6e01cf9ab3b05fa[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Mar 16 02:02:49 2019 +0100

    JavaClasses of Arrays (e.g. com.myapp.SomeClass[]) now have getPackageName() == 'com.myapp' instead of '' like before. This change is due to the fact that users usually want to see a dependency com.foo -> com.bar, if a Class com.foo.Foo declares and array com.bar.Bar[]. Note that array types can never be directly imported and thus will always have attached a simple JavaPackage object containing only themselves (like stubs).
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit f2121091364c9377d1f14b4f24347825e3f1427c[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Mar 16 14:25:40 2019 +0100

    Remove deprecations since 0.8.0
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit e08ab25b8704c5e9fa75244840538cf9616bb4f2[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Mar 16 14:18:36 2019 +0100

    Extend user guide domain model with ThrowsClause
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 5025a5cb70d4d28b46a54e7034c4cef88993ef72[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Mar 14 23:06:16 2019 +0100

    Added JavaCodeUnit.getCallsFromSelf() and JavaCodeUnit.getAccessesFromSelf() for convenience.
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 4a413be7d78a37cd2f7ba9bbbc10dc6f8b54c0a1[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Mar 16 01:18:18 2019 +0100

    Extended domain model in user guide for packages
    
    Issue: #82
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 5a26ce04fa3f8df3f4c3cb07d1fa675ce557da20[m
Merge: de03825f 9ad2a8ff
Author: Peter Gafert <superpete@gmx.de>
Date:   Sat Mar 16 01:14:01 2019 +0100

    Merge pull request #160 from TNG/add_member_syntax
    
    Add member syntax

[33mcommit 9ad2a8ff5afda481b49ef3ad1ae429fdbeff85a9[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Mar 16 01:00:04 2019 +0100

    Some minor Javadoc adjustments
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit d71deacf87d225f881ccb956a1018efca358bd92[m
Author: Manfred Hanke <Manfred.Hanke@tngtech.com>
Date:   Fri Mar 15 20:54:48 2019 +0100

    simplify example; demonstrate usage of ArchRuleDefinition.noMethods
    
    Signed-off-by: Manfred Hanke <Manfred.Hanke@tngtech.com>

[33mcommit acabd8a03bec035eae09378d31293340a1b9e4d2[m
Author: Manfred Hanke <Manfred.Hanke@tngtech.com>
Date:   Fri Mar 15 22:59:23 2019 +0100

    fix message of ArchConditions.declareThrowableOfType's events
    
    which was previously:
    
            (declares|does not declare) declare throwable of type
    
    Signed-off-by: Manfred Hanke <Manfred.Hanke@tngtech.com>

[33mcommit bbe2dcc814fbb96023e9ebd3140ee0bcc19ba62f[m
Author: Manfred Hanke <Manfred.Hanke@tngtech.com>
Date:   Fri Mar 15 21:51:52 2019 +0100

    introduce and use ArchConditionAssertion
    
    which allows to encapsulate
    
            assertThat(archCondition.getDescription()).isEqualTo(description);
            events = check(archCondition, item);
            assertThat(events)....
    
    in
    
            assertThat(archCondition).hasDescription(description).checking(item)....
    
    Signed-off-by: Manfred Hanke <Manfred.Hanke@tngtech.com>

[33mcommit 5a89f8c5830411c27b3b081d17db3be2c76172f4[m
Author: Manfred Hanke <Manfred.Hanke@tngtech.com>
Date:   Fri Mar 15 13:25:30 2019 +0100

    deprecate formatLocation in favor of SourceCodeLocation
    
    Signed-off-by: Manfred Hanke <Manfred.Hanke@tngtech.com>

[33mcommit 92ff58c9289a105f24f8a02cac19ea8075285d39[m
Author: Manfred Hanke <Manfred.Hanke@tngtech.com>
Date:   Fri Mar 15 09:16:18 2019 +0100

    rename Occurence to SourceCodeLocation
    
    Signed-off-by: Manfred Hanke <Manfred.Hanke@tngtech.com>

[33mcommit 3769e63ee1d5fabc771aacbf24605924379c1eaf[m
Author: Manfred Hanke <Manfred.Hanke@tngtech.com>
Date:   Thu Mar 14 20:44:50 2019 +0100

    have ClassesShouldConjunctionTest's first cases consistently use ArchConditions instead of fluent syntax
    
    Signed-off-by: Manfred Hanke <Manfred.Hanke@tngtech.com>

[33mcommit e5cc657ec135544fb8d0c67d79c11a68b2306da7[m
Author: Manfred Hanke <Manfred.Hanke@tngtech.com>
Date:   Thu Mar 14 20:43:52 2019 +0100

    test fluent versions of MembersShouldConjunctionTest; make ArchConditions.not public
    
    Signed-off-by: Manfred Hanke <Manfred.Hanke@tngtech.com>

[33mcommit 9e0bdbfbf339eb1882276578a6432440c70fc1d3[m
Author: Manfred Hanke <Manfred.Hanke@tngtech.com>
Date:   Thu Mar 14 08:04:04 2019 +0100

    require Throwable(s) for HasThrowsClause.Predicates.throwsClauseWithTypes and throwsClauseContainingType
    
    Signed-off-by: Manfred Hanke <Manfred.Hanke@tngtech.com>

[33mcommit 3ad8f628596dc732a8185e95cef549a46b38dbea[m
Author: Manfred Hanke <Manfred.Hanke@tngtech.com>
Date:   Wed Mar 13 01:10:00 2019 +0100

    introduce and use DescribedPredicateAssertion
    
    which allows to encapsulate
    
            assertThat(predicate.apply(value1)).as("predicate matches").isTrue();
            assertThat(predicate.apply(value2)).as("predicate matches").isFalse();
            assertThat(predicate.getDescription())).as("description").isEqualTo(description);
    
    in
    
            assertThat(predicate).accepts(value1).rejects(value2).hasDescription(description);
    
    Signed-off-by: Manfred Hanke <Manfred.Hanke@tngtech.com>

[33mcommit 3081644ebb2c10aace74b2b0b0de722232afb275[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Mar 10 21:21:14 2019 +0100

    Adjust user guide to explain the new members API.
    
    Issue: #38
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit bb54b9f42e2a86f3b724d1a57d913630d69cfa39[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Mar 10 00:23:33 2019 +0100

    Adjusted examples to new members fluent API.
    
    Issue: #38
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit c2dc796d62beebe150066dc764c4f9602f37b2cd[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Mar 9 23:57:10 2019 +0100

    Added negations for codeUnits().that().(..)
    
    Issue: #38
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 792a95cbdb164109de58b66126ff8b6ec0f7f212[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Mar 9 23:21:28 2019 +0100

    Added negations for fields().that().haveRawType(..)
    
    Issue: #38
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit eef3c8f3072ebebf11c5ffa85248f7c748013506[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Mar 9 23:04:55 2019 +0100

    Consistently avoid contractions
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 0d1fd2d358b6b196c3eebf2bc4c18a42ace100c7[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Mar 9 21:25:28 2019 +0100

    Added codeUnits().should().. to syntax.
    
    Issue: #38
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 92e2ddaddecbe1ee060a3d3456e779cca1666e76[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Mar 9 17:55:18 2019 +0100

    We must override ClassesShouldConjunction should(ArchCondition<? super JavaClass> condition), otherwise should(condition) allows no further joining.
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 699b01540e0de93d90cb4c3dbf00d11810d36c34[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Mar 9 17:16:34 2019 +0100

    Added fields().should().haveRawType(..) to syntax.
    
    Issue: #38
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 5800b9d85da74aaf32dff1ac35f6d8e0cfbd78b1[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Mar 9 17:02:49 2019 +0100

    Improve RandomSyntaxTests -> Adding the method name to the expected description should be concern of PartialStep, not Parameters.
    
    Issue: #38
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit f532a5f8b8e8598bce0a88f12ff1fdd2266035a0[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Mar 9 16:43:21 2019 +0100

    Improve RandomSyntaxTestBase -> pull out MethodCallChain, focus on interface types instead of resolving runtime types via TypeToken (necessary to support more extended generics for complex members syntax with inheritance; we need to pass information about actual type parameters of generic interface types on, instead of using TypeToken on runtime types which will in parts yield <? extends #99...> types instead of the correctly bounded declared type available via public API)
    
    Issue: #38
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit eb413ff2b0c56bff36f07a5ea032510b948092d3[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Mar 3 21:15:21 2019 +0100

    Added beDeclaredInClassesThat() to members().should()
    
    Issue: #38
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 199d01731da27ce5ccf2ea4c5f6fb92b2b458c9d[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Mar 3 21:11:40 2019 +0100

    Further improved the structure of GivenClassesInternal to not rely on PredicateAggregator currentPredicate anymore, which made no sense for the 'should' case.
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit df4f2bb52a75944f535c735a2a3047ed7f4bfe10[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Mar 3 21:02:32 2019 +0100

    Replaced ClassesShouldThatInternal by generic ClassesThatInternal
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit f4c88a3180942c26528b8675919eec6e985ba494[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Mar 3 20:14:04 2019 +0100

    Make GivenClassesThatInternal more generic
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit d397337d67c76a8eb05cdb1ec2e44444740f4948[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Mar 3 20:04:52 2019 +0100

    Removed obsolete interfaces. These interfaces really don't contribute anything and thus introduce unnecessary and useless intermediary types.
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 97a66178fdaa343bc62908199ef403906688bab6[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Mar 3 19:15:07 2019 +0100

    Added should() + fluentAPI to members() syntax
    
    Issue: #38
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit aece4a961558b259c938475be7ea45c4acb19155[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Mar 3 18:31:11 2019 +0100

    ArchUnit domain objects should contain their "Occurrence" (chosen in particular to not class with "Location" from the import domain), which in turn knows how to format the source location. Also JavaClass itself can implement HasDescription consistently to JavaMember, and HasName.AndFullName where full name for a JavaClass is just equal to the fully qualified name (which is modelled according to the Reflection API).
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit f977ccfd872e47f3e3a8ab4373bbf3574ea1f0a9[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Feb 24 20:37:41 2019 +0100

    Prepare introduction of generic field types
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit b3d14405af02358e5b06449ce3bd3fab51dfcaa3[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Feb 24 16:43:07 2019 +0100

    Prepare introduction of generic parameter types
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 6fc9ac2fe221700569af304ad829264267a9032b[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Feb 24 16:30:47 2019 +0100

    Added andShould(..)/orShould(..) to syntax
    
    Issue: #38
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit b797b5691c358b91a1625a3cc8fda73a215d82af[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Feb 24 15:25:21 2019 +0100

    Added CodeUnitsThat#declareThrowableOfType(..) to syntax
    
    Issue: #38
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit be5b2e7eb04417b44709ab847967b8d4a7a65608[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Feb 24 13:11:03 2019 +0100

    Prepare introduction of generic return types
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 56f7d9e55ecc5011607edcd7099f23b6823cc5e2[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Feb 24 12:59:45 2019 +0100

    Added CodeUnitsThat#haveRawReturnType(..) to syntax
    
    Issue: #38
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 7145c551323cd401ad754e42b26767ab92f4982c[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Feb 23 21:10:54 2019 +0100

    Added CodeUnitsThat#haveRawParameterTypes(..) to syntax
    
    Issue: #38
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit da8926f1f53b570d4a4ce8b1b063b3b492308b79[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Feb 22 19:05:44 2019 +0100

    Make naming of implementation consistent with interface.
    
    Issue: #38
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit aab46d53f6bc34631a8adf938c9e48d586e9a493[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Feb 17 15:00:53 2019 +0100

    Added FieldsThat syntax with haveType(..) elements
    
    Issue: #38
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 6e81bc889b60f9f143ab0a9fc841dab8c7bca7dd[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Feb 10 21:55:49 2019 +0100

    Added declaredIn fluent API for members
    
    Issue: #38
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit fcce8f993bb1ab53fcf46c73da9b9f3254034a19[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Feb 2 17:05:32 2019 +0100

    Added declaredIn syntax elements for members
    
    Issue: #38
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit e8620a4b4f55442ec3d911d0fac803d7b20aa024[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Feb 2 15:38:12 2019 +0100

    Added some syntax elements for members (parts that have already been there for classes and match properties of members as well, like visibility or names)
    
    Issue: #38
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 1ca922bc6dc2037dc6f6d1d9d089f416f28968e4[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Nov 25 14:50:08 2018 +0100

    Added negations (noMembers(), noFields(), ...) and example / integration test for members syntax.
    
    Issue: #38
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 7275eac131e32e4e0d870a7b1cb2fdf60d39df8b[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Nov 25 13:00:04 2018 +0100

    Added syntax entry (members(), fields(), ...) and simple that(predicate) / should(predicate) methods to syntax. Unfortunately anonymous instantiations of abstract classes with varargs constructors cause a Javadoc bug up to JDK 11, thus all anonymous instantiations of ArchCondition had to be replaced by inner classes :-( This should not be a common problem for users of ArchUnit though, since usually there will be no Javadoc created for test code.
    
    Issue: #38
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit de03825f98021e6d96557a5ea07e51b12fe8b1a7[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Mar 16 00:21:33 2019 +0100

    Extended examples for some synthetic examples for future reference (when we next time try to adjust handling of synthetic code)
    
    Issue: #98
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit dd43639b6a306cedb1e32138ce052729b11a5c5a[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Mar 15 23:23:25 2019 +0100

    Reverted filtering out synthetic members and classes. This actually has a lot more implications than expected. For once we get an inconsistent state if targets of our calls are suddenly not imported anymore because they are synthetic (and are thus replaced by stubs). Secondly this will mean it might be possible to import a package and have dependencies to that package within classes from that package where the target was not imported (cause it is synthetic). I have tried to filter out synthetic targets as well, but this is highly problematic, too. For example a method call of a method inherited from a super class will actually be a call to a synthetic method in some cases. If we filter all calls to synthetic methods, we will lose that call.
    Furthermore the original problem that initiated all this is not solved, we still have enum.values() (which is not synthetic) calling Array.clone() (which is again not synthetic). So we need to do further research here, what we want and what the implications are.
    
    Issue: #98
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 453f295255cae894b13a33c59e460f6cedcf609c[m
Merge: 1a5e6382 342fc45d
Author: Peter Gafert <superpete@gmx.de>
Date:   Thu Mar 14 21:09:52 2019 +0100

    Merge pull request #158 from TNG/add_packages
    
    Add packages

[33mcommit 342fc45d9ab8244960c704c61fb1bff0dbda4950[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Mar 13 20:05:46 2019 +0100

    JavaPackage can now provide dependencies from and to it.
    
    Issue: #82
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 03b7918a10d382351a109d1c5ad7928586b1ce06[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Mar 13 00:23:26 2019 +0100

    Added JavaPackage to core API. It's now possible to obtain the default package or any package by name from JavaClasses and each JavaClass holds a reference to its own package.
    
    Issue: #82
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 1a5e638256a257e0e45cbdd1c4ddd5eefdeadca7[m
Merge: 93ccc342 58466165
Author: Peter Gafert <superpete@gmx.de>
Date:   Thu Mar 14 20:41:41 2019 +0100

    Merge pull request #98 from bedla/synthetic
    
    Filter-out synthetic classes, methods and fields

[33mcommit 584661652e1d16c093ec1bbd68170c9c5f59a934[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Mar 14 20:27:06 2019 +0100

    Review: Refactored the tests somewhat to focus more on dependencies in case we skip synthetic members (we don't want to lose those). To check for bridge is AFAIK unnecessary, since a bridge method should always also be synthetic and thus be filtered out anyway.
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit fa6cee7173130a53cd4054ce97762609f6034514[m
Author: Ivo Smid <ivo.smid@gmail.com>
Date:   Wed Aug 15 20:57:33 2018 +0200

    Filter-out synthetic (methods, fields) and bridge members (ctors, methods)
    
    Signed-off-by: Ivo Smid <ivo.smid@gmail.com>

[33mcommit 93ccc342932cfdfd4823ff0400f3ac0b3e6c2b0e[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Mar 10 21:47:51 2019 +0100

    Minor improvement: Make sure directory either exists or can be created instead of ignoring return value of mkdirs()
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 88b69d89dcf0d61cb1d39d1b8fc01de874626c17[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Mar 10 21:43:19 2019 +0100

    Shut down ExecutorService after test
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit a23ad6dce5f4ddce0060bb4b3ad885ac7b5ea8a7[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Mar 10 21:40:51 2019 +0100

    Close JarFile after reading and avoid copying all entries into a list before iterating the JarFile
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit c32d5b30bf620b31e8a2ce07b4b070312713537a[m
Merge: 054a2046 a4f33433
Author: Peter Gafert <superpete@gmx.de>
Date:   Sun Mar 10 21:36:24 2019 +0100

    Merge pull request #156 from TNG/extend_slice_creation
    
    Extend slice creation

[33mcommit a4f33433595e646d19e1880b5400b7608908eb6d[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Mar 10 21:12:53 2019 +0100

    Adjust user guide to explain the extended API
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 58e5a20033774fe2df0cb928df2a2b09dc5ca440[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Mar 10 19:35:07 2019 +0100

    Makes Slices more customizable. Background: In legacy applications the package structure might not be as neat as myapp.(*) where * catches all reasonable domain slices. Instead it might be necessary to really tweak which classes from which locations form a 'slice'. The new approach allows to freely define a mapping JavaClass -> SliceIdentifier to group arbitrary classes together into one slice (defined by the common SliceIdentifier).
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 054a2046db575f7948dff54872eab7d74cb22919[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Mar 10 15:36:42 2019 +0100

    Minor improvement: Consistently use ContextClassLoader to resolve missing classes to enable callers some control about the ClassLoader used for the resolution process. This should not make much of a difference in most cases but might be necessary in some scenarios.
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit ea84d73b53e4b263b7f08d04d2c3e6c1b3355f78[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Mar 10 14:25:29 2019 +0100

    Minor improvement: Cache JavaType.From.name(..) -> We need the JavaTypes for the whole run, so the difference for the heap should be marginally (empirically tested to hold true), shaves 2-3 sec of 26 sec import on local machine.
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 65ba5ef2b107880222167544b5eb9a3eb49a5116[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Mar 10 14:07:29 2019 +0100

    Minor improvement: Better hand out static inner classes instead of anonymous ones, since the supplier will be held by the domain objects which in turn would keep a backreference to AccessRecord if the class is anonymous.
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 53f8f9cf455036fddccc926813b7ef21041affe3[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Feb 28 19:44:36 2019 +0100

    Fix link of ArchUnit Maven Plugin in news
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit d06c754398d47b0e88668f6f0a2fb51de78e7f4a[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Feb 28 19:27:32 2019 +0100

    Added news about Société Générale's Maven plugin
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit fd295a28cd9d994d00d758f10114d2155421717e[m
Merge: bfdb922b 2c532f0d
Author: Peter Gafert <superpete@gmx.de>
Date:   Thu Feb 28 18:27:09 2019 +0100

    Merge pull request #149 from sullis/travis-build-openjdk11
    
    Travis build matrix:  openjdk11

[33mcommit 2c532f0d0c32ef78b5f152419d0adac499576733[m
Author: Sean Sullivan <github@seansullivan.com>
Date:   Sun Feb 24 15:21:18 2019 -0800

    Travis build matrix:  openjdk11

[33mcommit bfdb922b8d26989c38ab385f088989dd36cb6b10[m
Merge: 252e363b e675e9c2
Author: Peter Gafert <superpete@gmx.de>
Date:   Sat Feb 23 13:13:54 2019 +0100

    Merge pull request #147 from olleolleolle/patch-1
    
    README: use SVG build status badge

[33mcommit e675e9c23e9f6c2abb89016a5d72adff2c9aaff7[m
Author: Olle Jonsson <olle.jonsson@gmail.com>
Date:   Sun Feb 17 23:04:23 2019 +0100

    READme: use SVG build status badge

[33mcommit 252e363b4429a9ab63a7123e8faa89991e9368c6[m
Merge: a2f9caa5 c5144ca5
Author: Peter Gafert <superpete@gmx.de>
Date:   Sun Feb 17 13:07:43 2019 +0100

    Merge pull request #145 from sullis/GeneralCodingRule-NO_CLASSES_SHOULD_USE_JODATIME
    
    new General Code Rule: NO_CLASSES_SHOULD_USE_JODATIME

[33mcommit c5144ca578b6de240ebd6c8e3126b5cd7a490a34[m
Author: Sean Sullivan <github@seansullivan.com>
Date:   Mon Feb 11 16:39:23 2019 -0800

    new General Code Rule: NO_CLASSES_SHOULD_USE_JODATIME
    
    Signed-off-by: Sean Sullivan <github@seansullivan.com>

[33mcommit a2f9caa54ea8c19239529e4ac4c08c3817dfebc5[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Feb 15 18:38:04 2019 +0100

    Added shortcut to search for missing package entry. If the resource ends with '.class' we can safely assume, that there is no use in looking for this file outside of classLoader.getResource(classFileResourceName).
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 0dcd16d60c85a48faf01fcb1173774686a218fcf[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Feb 15 18:27:16 2019 +0100

    Consistently call imported JavaClasses variables 'importedClasses' instead of 'classes' to avoid name clash with rule definition ('classes()...')
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit c7660b23269bf0fa326c328cbdfd69f0f3d494ad[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Feb 15 16:51:50 2019 +0100

    Improved JavaDoc of ClassFileImporter
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit c2bba3b782d4a3d1382534a82a965f466f0157e7[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Feb 15 14:01:02 2019 +0100

    Trying to retrieve a missing class should cause IllegalArgumentException instead of NullPointerException.
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 4905b9e2c82b820546c7f0398bbb7924905ad8d3[m
Merge: fd5591c5 f1e7caef
Author: Peter Gafert <superpete@gmx.de>
Date:   Fri Feb 15 13:28:27 2019 +0100

    Merge pull request #146 from TNG/make-CanOverrideDescription-consistent
    
    Make CanOverrideDescription consistent

[33mcommit f1e7caefae8826eea51bee8b0e2d173e4d73df75[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Feb 15 12:49:57 2019 +0100

    CanOverrideDescription now has JavaDoc explicitly stating that the original object will not be modified. Adjusted Slice and Slices to adhere to this constraint and return copies with adjusted values now.
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit fd5591c5e6756f6a2a4bdd248cdfaa08326ca071[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Feb 11 17:47:55 2019 +0100

    Added more news to website
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 0a290b7e617402fdbbc8c68ce375230f0c2e5fa7[m
Merge: 979880ae 92bf477d
Author: Peter Gafert <superpete@gmx.de>
Date:   Tue Feb 5 22:47:18 2019 +0100

    Merge pull request #143 from ahus1/master
    
    adding talk at devoxx uk

[33mcommit 92bf477de4018b4a2785b01619bac90367c1944b[m
Author: Alexander Schwartz <alexander.schwartz@gmx.net>
Date:   Sat Feb 2 18:28:23 2019 +0100

    adding talk at devoxx uk

[33mcommit 979880ae1daec907cad304a6d5a331ad29f90e6f[m
Merge: 35f6eefd 22895e37
Author: Peter Gafert <superpete@gmx.de>
Date:   Mon Jan 21 22:49:16 2019 +0100

    Merge pull request #139 from wengertj/114-javaClass-isArray
    
    #114: Expose if JavaClass is an array

[33mcommit 22895e37fede645cf97ab63e77d8ae03e040a44c[m
Author: Johannes Wengert <johannes.wengert@googlemail.com>
Date:   Mon Jan 7 23:51:18 2019 +0100

    114: Expose if JavaClass is an array
    
    Signed-off-by: Johannes Wengert <johannes.wengert@googlemail.com>

[33mcommit 35f6eefd2506e22b6fc85a7a0a1abad96a8dfe00[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Jan 18 12:11:36 2019 +0100

    Fix security vulnerability in nokogiri
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit fefe1d372200781ada710db8ba88e4fed5fb2f2b[m
Merge: a02b9e69 06dba7e5
Author: Peter Gafert <superpete@gmx.de>
Date:   Sun Jan 13 22:33:44 2019 +0100

    Merge pull request #141 from wengertj/fix-deprecated-gradle-wrapper
    
    Fix deprecated Gradle wrapper

[33mcommit 06dba7e5bfafcc7e0aa8175542f766eb0940c625[m
Author: Johannes Wengert <johannes.wengert@googlemail.com>
Date:   Tue Jan 8 23:24:50 2019 +0100

    Use existing wrapper task instead of defining a custom wrapper
    
    See https://docs.gradle.org/4.8/release-notes.html
    
    Signed-off-by: Johannes Wengert <johannes.wengert@googlemail.com>

[33mcommit a02b9e69efab4e6e50d72a6b9502b67f42c9fc70[m
Merge: 78c0a3cb b96af11a
Author: Peter Gafert <superpete@gmx.de>
Date:   Sun Jan 6 20:52:41 2019 +0100

    Merge pull request #134 from tngwoerleij/throws-dependency
    
    Consider classes referenced in throws-clauses

[33mcommit b96af11a6799a00cc1f9fe4383ae698095700e97[m
Author: Jonas Woerlein <jonas.woerlein@tngtech.com>
Date:   Sun Jan 6 15:38:46 2019 +0100

    Add test case to archunit-example for throws clause
    
    Issue: #126
    Signed-off-by: Jonas Woerlein <jonas.woerlein@tngtech.com>

[33mcommit ef8f9b87b368b1ea8ec81b256297479d9246e384[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Jan 4 14:51:51 2019 +0100

    Review: If we support ThrowsDeclaration.getLocation(), we enable nicer navigation and also syntax like throwsDeclarations().declaredOnMethodsAnnotatedWith(Foo.class).should()...
    
    Issue: #126
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 7485deb52fcdc90f97cfe76e73a3a7ecf54d454d[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Jan 1 17:26:44 2019 +0100

    Review: Made ThrowsClause an Iterable instead of a List. We don't want to support the full API (remove, get(i), ...) so it's better to have the API tailored (maybe size(), but instead of contains(ThrowsDeclaration), contains(Class) is way more useful as an API).
    
    Issue: #126
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 4211805c245c622a456b318f2cd03972ea9e54e1[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Dec 29 15:42:48 2018 +0100

    Review: I saw that the Oracle Java tutorial actually calls it 'throws clause'. So IMHO that is a good name for our 'ThrowsDeclarations', since it represents exactly the throws clause of a method or constructor.
    
    Issue: #126

[33mcommit fa8542c8e25b7cd6f4c91656999ecf49d20fe6e7[m
Author: Jonas Woerlein <jonas.woerlein@tngtech.com>
Date:   Sun Dec 16 15:20:15 2018 +0100

    Consider classes referenced in throws-clauses
    
    Issue: #126
    Signed-off-by: Jonas Woerlein <jonas.woerlein@tngtech.com>

[33mcommit 78c0a3cbef645607f42c9435f760c9508bdcf50c[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Jan 4 21:35:12 2019 +0100

    Fix security vulnerability
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 2050cabe5a9bcc31a15754e46ec452898a0f938b[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Jan 4 15:03:02 2019 +0100

    Update Copyright
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 01ac853119aa6b8b15bf53054e22c0597b4b92b0[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Dec 29 17:10:09 2018 +0100

    Improved docs of AccessTarget to further elaborate on the necessity to distinguish between AccessTarget and JavaMember.
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 526df395adbef3cbdf4f27291ee79ee5efb731f5[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Dec 21 17:55:49 2018 +0100

    Adjusted user guide to changed import resolution behavior when classes are missing.
    
    Issue: #111
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 5972c4d0e6549fb625bc702f3b019db0a29647e2[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Dec 21 17:27:35 2018 +0100

    Adjusted the user guide to reflect the recent improvement to PlantUML parsing. Also upgraded Gradle Asciidoctor integration to a more recent version. Finally made some invariant to contravariant type bounds on method parameters of PlantUmlArchCondition to make the API more comfortable to use with predicates targeting super types.
    
    Issue: #127
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit bfab47ddf5539549d1b3709bc94ca45157234e34[m
Merge: 71c7a682 9560ee47
Author: Peter Gafert <superpete@gmx.de>
Date:   Tue Dec 18 23:01:08 2018 +0100

    Merge pull request #133 from alanktwong/alanktwong-patch-1
    
    Update CONTRIBUTING.md

[33mcommit 9560ee47f981b46b37715c369cf8fc6c0a3096f7[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 16 12:36:26 2018 +0100

    Review: Some minor adjustments, 'java --version' does not necessarily indicate which JDK Gradle is using. Added custom task to print the currently configured JDK version. Caveat -> if there is configuration that cannot be executed with the current JDK, the execution of the showJdkVersion task will fail (happens with JDK <= 1.7).
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit defe81934eb6c8369ceccab03608d6df24b38a8d[m
Author: Alan Wong <alan.wong@aya.yale.edu>
Date:   Fri Dec 14 16:15:24 2018 -0500

    Simplify CONTRIBUTING.md

[33mcommit 6b0d1fce0da09a44393b320afc3fda719a1234b0[m
Author: Alan Wong <alan.wong@aya.yale.edu>
Date:   Fri Dec 14 10:30:41 2018 -0500

    Update CONTRIBUTING.md
    
    Update CONTRIBUTING.md with clear example of how to build the project locally for contributor onboarding

[33mcommit 71c7a682f1f35831001a3d6261a549b0e05a187e[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 16 23:32:09 2018 +0100

    Change default class resolution behavior from simple to classpath. From now on without any further configuration ArchUnit will look for missing classes on the classpath instead of using stubs. This should be less confusing when inheritance chains are broken due to classes missing from the import.
    
    Resolves: #111
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit dd23e4cc728531bfced9dc1496076815094c4a06[m
Merge: 982b68d5 48bf6dc1
Author: Peter Gafert <superpete@gmx.de>
Date:   Sun Dec 16 16:43:35 2018 +0100

    Merge pull request #135 from TNG/enhance-plant-uml
    
    Enhance supported PlantUML syntax

[33mcommit 48bf6dc1fe2fef3ac124fd66ef35feeb76cd1416[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 16 16:25:05 2018 +0100

    Support various arrow types, dependencies declared from right to left and descriptions of dependencies (e.g. A --> B : some description)
    
    Issue: #127
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 982b68d534630247f0a3eb398b3c119e14f06497[m
Merge: 13ae4989 16bad983
Author: Peter Gafert <superpete@gmx.de>
Date:   Sun Dec 16 13:59:24 2018 +0100

    Merge pull request #128 from bogsi17/compositeRules
    
    Implement composite rules, joined via and()

[33mcommit 16bad9834d139131403df19af4e08bb132040c52[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 16 13:23:59 2018 +0100

    Review: We should also be able to adjust the priority.
    
    Issue: #78
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit f7eaf7fd26635d6052544f5b5f82c49532dbc855[m
Author: Moritz Bogs <moritz.bogs@tngtech.com>
Date:   Sat Dec 1 14:19:28 2018 +0100

    Implement composite ArchRules.
    Multiple ArchRules can be checked at once via CompositeArchRule.of(rule1).and(rule2). Also added sample tests for both plain, junit4 and junit5
    
    Issue: #78
    Signed-off-by: Moritz Bogs <moritz.bogs@tngtech.com>

[33mcommit 13ae498978660a6acd17de0402bab4e170063b06[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Nov 20 22:14:39 2018 +0100

    Added news about upcoming JavaLand presentation
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 8a1dd0b81649469bde063d45e3becbfd6d239a72[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Nov 20 21:55:07 2018 +0100

    Update to next SNAPSHOT version
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit e33842d3914704eedaa51020c00be85319b1d9fa[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Nov 20 17:09:01 2018 +0100

    Update to version 0.9.3
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 83583ee182a77414e979105789afef21c143cbc6[m
Merge: c8085cb7 8b859a42
Author: Peter Gafert <superpete@gmx.de>
Date:   Tue Nov 20 17:05:01 2018 +0100

    Merge pull request #123 from TNG/fix-assertionerror-mem-leak
    
    Fixed memory leak in ArchRule.AssertionError in combination with JUnit 4

[33mcommit 8b859a424d812b37cb06926e3be88328509e254e[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Nov 20 16:31:16 2018 +0100

    Fixed memory leak: JUnit4Core keeps reference to all Failures, Failures keep reference to the respective AssertionError, ArchRule.AssertionError kept reference to EvaluationResult, thus making it impossible to GC big results over the whole JUnit run.
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit c8085cb78a6c3c208273b8c3e05a2c76b203623d[m
Merge: f77913e7 8a75ae9d
Author: Peter Gafert <superpete@gmx.de>
Date:   Tue Nov 20 15:54:17 2018 +0100

    Merge pull request #122 from dais39/fixed_sample_code_for_kotlin
    
    Fixed sample code for Kotlin

[33mcommit 8a75ae9d7d1ea9b84c272693af910ba88fe878a0[m
Author: Daisaku Suzuki <ds.suzuki217@gmail.com>
Date:   Mon Nov 19 22:14:43 2018 +0900

    Fixed sample code for Kotlin

[33mcommit f77913e7b51ef58afb6855ac5591639b7997e557[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Nov 11 11:42:28 2018 +0100

    Added news for release 0.9.2
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 0fcb5cb6da52a58d00b9bac9114027b5d0c51890[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Nov 11 11:33:41 2018 +0100

    Update user guide for release 0.9.2
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit f60afbb80587f4b5ddd67e7773e6fdc21ad48f4e[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Nov 8 19:48:34 2018 +0100

    Adjust Maven integration test to Java 11 and migrated TNG Nexus
    
    Issue: #117
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit c02de7c33dd80c979dea0eaffe7f41e45cff401c[m
Merge: e5059a11 60287014
Author: Peter Gafert <superpete@gmx.de>
Date:   Thu Nov 8 18:01:25 2018 +0100

    Merge pull request #119 from hankem/jdk-11
    
    Update ASM to 7.0 to support Java 11

[33mcommit 6028701488a08ec517dcd2330ac77ddfd865fe75[m
Author: Manfred Hanke <Manfred.Hanke@tngtech.com>
Date:   Mon Oct 29 07:12:28 2018 +0100

    Update ASM to 7.0
    
    Issue: #117
    
    Signed-off-by: Manfred Hanke <Manfred.Hanke@tngtech.com>

[33mcommit 9701affa739b4611a122cd32327f3ff5a8380243[m
Author: Manfred Hanke <Manfred.Hanke@tngtech.com>
Date:   Tue Oct 23 08:18:32 2018 +0200

    Set version 0.9.2-SNAPSHOT
    
    Signed-off-by: Manfred Hanke <Manfred.Hanke@tngtech.com>

[33mcommit edf6f916eb3ea62921e4f33baeecec160f15f11d[m
Author: Manfred Hanke <Manfred.Hanke@tngtech.com>
Date:   Wed Oct 17 21:56:14 2018 +0200

    Update JUnit to 5.3.1 / platform to 1.3.1 and Mockito to 2.23.0
    
    Signed-off-by: Manfred Hanke <Manfred.Hanke@tngtech.com>

[33mcommit fc9d520a233bd281961e764d61fa51bf293031af[m
Author: Manfred Hanke <Manfred.Hanke@tngtech.com>
Date:   Wed Oct 17 08:10:48 2018 +0200

    Update spotbugs (to support ArchUnit build with JDK 11)
    
    Two failures with OpenJDK-11 seem to be false positives related to try-with-resources statements.
    
    Signed-off-by: Manfred Hanke <Manfred.Hanke@tngtech.com>

[33mcommit 402374954b6d61eb32b6089b299295e4db3ed79b[m
Author: Manfred Hanke <Manfred.Hanke@tngtech.com>
Date:   Wed Oct 17 08:13:01 2018 +0200

    Add javax.annotation-api to archunit-example (to support ArchUnit build with JDK 11)
    
    Signed-off-by: Manfred Hanke <Manfred.Hanke@tngtech.com>

[33mcommit 104195d75ab1791850a00cb37b781ab116cc9736[m
Author: Manfred Hanke <Manfred.Hanke@tngtech.com>
Date:   Tue Oct 16 22:38:11 2018 +0200

    Update Gradle to 4.10.2 (to support ArchUnit build with JDK 11)
    
    Also update build-scan plugin to current version 1.16.
    
    Signed-off-by: Manfred Hanke <Manfred.Hanke@tngtech.com>

[33mcommit d7ed90b961ca1b70b65b2571be73133b8fe79805[m
Author: Manfred Hanke <Manfred.Hanke@tngtech.com>
Date:   Wed Oct 17 17:54:14 2018 +0200

    Actually use ASM7 API to support JDK 11 features
    
    Issue: #117
    
    Signed-off-by: Manfred Hanke <Manfred.Hanke@tngtech.com>

[33mcommit ffc191fe8472bff73022c43b40225f19712f1d12[m
Author: Manfred Hanke <Manfred.Hanke@tngtech.com>
Date:   Tue Oct 16 22:52:37 2018 +0200

    Update ASM to 7.0-beta, which officially supports JDK 11 features
    
    Issue: #117
    
    Signed-off-by: Manfred Hanke <Manfred.Hanke@tngtech.com>

[33mcommit e5059a11de40056a5e77c89b87f01a505a69049f[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Sep 19 14:10:54 2018 +0200

    Updated dependency check example to use 'dependOnClasses' instead of 'accessClasses'
    
    Issue: #109
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 1b5c5193dee8fa32c2d8319a87fe5d75f140ad8f[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Sep 1 17:44:02 2018 +0200

    Add documentation how to check all subpackages for cycles.
    
    Issue: #106
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit b886d0985a6fd99be3aa4e11da873791a7b06079[m
Merge: c5840cc7 893b9e7a
Author: Peter Gafert <superpete@gmx.de>
Date:   Thu Aug 30 20:58:14 2018 +0200

    Merge pull request #105 from hankem/Junit4-support_for_abstract_base_classes
    
    Junit4-support for @ArchTest instance fields or static methods in abstract base classes

[33mcommit 893b9e7a8be2b86844d86614f673e947f6ccf6f7[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Aug 30 19:45:12 2018 +0200

    As long as aspects of ArchUnitRunner are tested in different test classes, we should separate the tests accordingly
    
    Issue: #104
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 99aad751b1e241b38653ac40a3c022064ede4172[m
Author: Manfred Hanke <Manfred.Hanke@tngtech.com>
Date:   Tue Aug 28 22:18:16 2018 +0200

    Junit4-support for ArchRules.in {class with [(instance fields or non-static methods) in abstract base class]}
    
    Issue: #104
    
    Signed-off-by: Manfred Hanke <Manfred.Hanke@tngtech.com>

[33mcommit d2e404a2ee9029b4b94235b2446f3aab459795c5[m
Author: Manfred Hanke <Manfred.Hanke@tngtech.com>
Date:   Tue Aug 28 22:15:52 2018 +0200

    Junit4-support for @ArchTest-annotated non-static methods in abstract base class
    
    Issue: #104
    
    Signed-off-by: Manfred Hanke <Manfred.Hanke@tngtech.com>

[33mcommit 1ebe38e32ade1f34a7467c85707d22aa84955ab0[m
Author: Manfred Hanke <Manfred.Hanke@tngtech.com>
Date:   Tue Aug 28 22:14:11 2018 +0200

    Junit4-support for @ArchTest-annotated instance fields in abstract base class
    
    Issue: #104
    
    Signed-off-by: Manfred Hanke <Manfred.Hanke@tngtech.com>

[33mcommit c5840cc7b3497c16d0fb3ced05a1cb54b8561cd5[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Aug 20 17:40:50 2018 +0200

    Adjusted excludeEngine tags to new engine id
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 3711a33e2415a7485292b526f4a0c19b6762419a[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Aug 20 16:46:45 2018 +0200

    Added news about upcoming talk at JavaZone
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit d502e488ecab62d980db75d7d42155ef03681cbd[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Aug 20 16:38:46 2018 +0200

    Added 'news' about Big Techday talk
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 456a60c3b226ff62273db9c853b3985a0ac26de9[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Aug 20 13:16:00 2018 +0200

    ArchUnitTestEngine.uniqueId should not start with 'junit-', since that prefix is owned by the JUnit team.
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 7d53a460eb19e955fbada0e4a58bf482ec8d8d06[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Aug 20 13:13:57 2018 +0200

    clean task should remove verification-results from maven-integration-test
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit d755444f35f1ebd30fc809f7a837e51d7b928bc1[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Aug 20 13:03:52 2018 +0200

    Adjust docs to 0.9.1
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 41295fa74884022f04c21950d8ad62834d2f81c5[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Aug 20 10:58:50 2018 +0200

    Added JavaClasses.size() to the public API.
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit d69f815bd0287c3ff8bdcacfd10de7c26db07d73[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Aug 20 10:53:15 2018 +0200

    Fix exception when importing Jar entries with white spaces.
    
    Issue: #103
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 4842bfb48106f1146b8529662cbe96a16d1886e8[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Aug 19 21:19:02 2018 +0200

    Fixed some forgotten references to old artifact archunit-junit in user guide.
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 3f0b71dfa832433a629ff6947cb0e641b6c04036[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Aug 19 21:01:21 2018 +0200

    Update README.md to 0.9.0
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 7c4d0b1e4b3e3ec1902895eb929ade5c6166f532[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Aug 19 19:27:06 2018 +0200

    Update HTML version of user guide.
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 2e58046dbe8bf491f6b99ee8c5ca1f316b74b279[m
Merge: a29d0249 f70d9a9c
Author: Peter Gafert <superpete@gmx.de>
Date:   Sun Aug 19 19:25:27 2018 +0200

    Merge pull request #102 from sormuras/patch-1
    
    Use Maven Surefire 2.22.0 in example installation

[33mcommit f70d9a9cde0456db396028bb281481e21443401d[m
Author: Christian Stein <sormuras@gmail.com>
Date:   Sun Aug 19 19:14:48 2018 +0200

    Use Maven Surefire 2.22.0 in example installation

[33mcommit a29d02491633d98fd89aec9cd2b372a401b71c4d[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Aug 19 16:06:32 2018 +0200

    Adjusted automatic ArchUnit-Example update to include 3 sets of examples for plain, junit4 and junit5. Also added news article about release.
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 69c256df7a057d3f1d8a2ffcd8fd7de88f0a2bc8[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Aug 19 14:31:25 2018 +0200

    JavaDoc and SourcesJar have to be configured individually for JUnit 4 and JUnit 5, since for JUnit 4 everything (api and main) gets bundled into archunit-junit4, but for JUnit 5 we need to bundle archunit-junit:api into archunit-junit5-api and archunit-junit:main into archunit-junit5-engine, since archunit-junit5-engine does not rebundle archunit-junit:api, but depends on archunit-junit5-api.
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 19b4a0947bf78efc5e3645c85e7f6ddd620030f1[m
Merge: 90424ff8 6c38951f
Author: Peter Gafert <superpete@gmx.de>
Date:   Sat Aug 18 23:36:07 2018 +0200

    Merge pull request #101 from TNG/extend_rules_api_for_only_access_depends
    
    Adds various methods to the rules API that allow only certain types of accesses / dependencies

[33mcommit 6c38951f9d4efa823ba2ee673cd7853fc2bb0f3e[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Aug 18 23:27:16 2018 +0200

    Remove --info for Travis to reduce the log size (otherwise the build gets just terminated, once it exceeds 4MB :-( )
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 394ce5cd63cc1cbcdde922405ff1de57405d82a7[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Aug 18 22:48:35 2018 +0200

    Added 'onlyDependOnClassesThat(predicate?)' to the rules API.
    
    Issue: #84
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 66d257f4e4e0dba6f0bc408e7dc9b217ab55a7c3[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Aug 18 22:27:50 2018 +0200

    Added 'onlyAccessFieldsThat(predicate)' to the rules API.
    
    Issue: #84
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit c96887aed1e7c11516fc968151dc1cf5e7f12cce[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Aug 18 22:13:18 2018 +0200

    Added 'onlyAccessMembersThat(predicate)' to the rules API.
    
    Issue: #84
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit bf10c5181e268102d757e39b465b57d08dc8f388[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Aug 18 21:54:15 2018 +0200

    Added 'onlyCallCodeUnitsThat(predicate)' to the rules API.
    
    Issue: #84
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 4fa46063d0a7dfad0faf44486c34a23511ebad68[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Aug 18 21:28:08 2018 +0200

    Added 'onlyCallConstructorsThat(predicate)' to the rules API.
    
    Issue: #84
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 8eb5c5c26809eef48172d00a7e8ddf73d2a05d04[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Aug 18 21:06:45 2018 +0200

    Added 'onlyCallMethodsThat(predicate)' to the rules API.
    
    Issue: #84
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit f58adbbd22751e442360640a3f2e2b6c956ab08f[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Aug 17 16:48:39 2018 +0200

    Added 'onlyAccessClassesThat(predicate?)' to the rules API.
    
    Issue: #84
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 90424ff834c112c47a34fe774ff40d0b4d83fa8f[m
Merge: ac9a287a 4fb99010
Author: Peter Gafert <superpete@gmx.de>
Date:   Wed Aug 15 22:56:25 2018 +0200

    Merge pull request #99 from TNG/extend_rules_api_with_dependency_conditions
    
    Extend rules api with dependency conditions

[33mcommit 4fb99010a7f5cba320f3ec1b77ff4c7f0a3bc177[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Aug 15 22:22:54 2018 +0200

    Added 'onlyHaveDependentClassesThat(predicate?)' to the rules API.
    
    Issue: #69
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 056b4b3cf3df3a18d5eb78fb88f1364d43038f37[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Aug 15 18:25:21 2018 +0200

    Added 'dependOnClassesThat(predicate?)' to the rules API.
    
    Issue: #69
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit ac9a287a6f24083d087bc3b39a3ff85d6c56ff84[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Aug 15 19:47:20 2018 +0200

    new File(url.toURI()) does not work for JAR files.
    
    Issue: #4
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit b075353b9536b349338477cdbc18f872d249ea04[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Aug 15 20:27:34 2018 +0200

    On Windows we need to call mvnw in a different way.
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 9f395c0e5abb366235248af2bf147d1e9123c139[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Aug 12 15:56:07 2018 +0200

    Fixed Javadoc to include repackaged classes from archunit-junit into archunit-junit4 and archunit-junit5-api
    
    Issue: #34
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 398daf94ec57929cb354f272ed00950568b88eb3[m
Merge: d1f53f57 c9af6026
Author: Peter Gafert <superpete@gmx.de>
Date:   Sun Aug 12 15:38:11 2018 +0200

    Merge pull request #97 from TNG/improve_kotlin_support
    
    Improve Kotlin support

[33mcommit c9af602679ddfa05f294f3967709a900809fce56[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Aug 12 14:11:56 2018 +0200

    Adjusted User Guide since Kotlin does not demand the use of a companion object anymore.
    
    Issue: #77
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 47d2efbb8066a1212e3386b512ba9f7bbb0721e3[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Aug 11 20:20:27 2018 +0200

    JUnit 5 support now allows instance fields of all types of visibility as well.
    
    Issue: #77
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit c4166e845f221a95a1a5add5d1b015a1a6379acf[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Aug 11 19:05:18 2018 +0200

    JUnit 4 support now allows instance fields of all types of visibility as well, so tests can just be written naturally in Kotlin without any need for a companion object.
    
    Issue: #77
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit d1f53f571da3530fe8615434cad350b5f681b0d4[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Aug 12 15:12:41 2018 +0200

    Add --info to Travis Gradle command
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 2d5c214081ddc8d1cbd6cffea1be9b7de4a6b1ac[m
Merge: 763a0312 6136b53c
Author: Peter Gafert <superpete@gmx.de>
Date:   Sat Aug 11 16:09:40 2018 +0200

    Merge pull request #96 from TNG/add_member_dependencies_to_self
    
    Adds a reverse lookup of members that have a type depending on this class

[33mcommit 6136b53c68e0c6ec328fea31541c191919ea7b7f[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Aug 11 15:44:01 2018 +0200

    Added getFieldsWithTypeOfSelf(), getMethodsWithParameterTypeOfSelf(), getMethodsWithReturnTypeOfSelf() and getConstructorsWithParameterTypeOfSelf() to JavaClass and extended getDirectDepdendenciesToSelf() to include those type of dependencies on the class itself.
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 763a03122068bbcc9b4f95c18e56868cc8f9244d[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Aug 11 12:41:57 2018 +0200

    Deprecate "getPackage()" returning a String. getPackage() will return an object in the future.
    
    Issue: #82
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 969c484697c9533089fd503341a030f002820778[m
Merge: 4695c654 6d17b2d6
Author: Peter Gafert <superpete@gmx.de>
Date:   Wed Aug 8 19:23:39 2018 +0200

    Merge pull request #95 from msherman32/rules_from_uml
    
    Added Support for rules from PlantUML diagrams

[33mcommit 6d17b2d607814179c1435b6fe8252bbb253ca307[m
Author: Michael Sherman <msherman32@gatech.edu>
Date:   Wed Aug 8 19:02:04 2018 +1100

    Added section to the user guide and JavaDoc.
    
    Issue: #4
    Signed-off-by: Michael Sherman <msherman32@gatech.edu>

[33mcommit 1d709cfa1828f7d83557da63bc31df97530f12d9[m
Author: Michael Sherman <msherman32@gatech.edu>
Date:   Wed Aug 8 17:46:40 2018 +1100

    Added example and integration test for PlantUML diagram checks.
    
    Issue: #4
    Signed-off-by: Michael Sherman <msherman32@gatech.edu>

[33mcommit c0dd5959204f32311c626924d5fe2e4dcc2a946d[m
Author: Michael Sherman <msherman32@gatech.edu>
Date:   Wed Aug 8 15:03:07 2018 +1100

    Added condition to evaluate PlantUml diagrams as rules. Also stereotypes are validated within the condition part now, since it is more related to ArchUnit's interpretation of PlantUML than PlantUML itself (where identical stereotypes are allowed).
    
    Issue: #4
    Signed-off-by: Michael Sherman <msherman32@gatech.edu>

[33mcommit f85e0e3ffdd6c84736242d16355663207e7f93eb[m
Author: Michael Sherman <msherman32@gatech.edu>
Date:   Tue Aug 7 14:06:07 2018 +1100

    Added code to parse PlantUML files and provide components, stereotypes, aliases, dependencies, ...
    
    Issue: #4
    Signed-off-by: Michael Sherman <msherman32@gatech.edu>

[33mcommit da0096267f84275e444f436b1d6c75b3c42effd5[m
Author: Michael Sherman <msherman32@gatech.edu>
Date:   Tue Aug 7 10:47:08 2018 +1100

    Added new API method isInnerClass() to JavaClass
    
    Signed-off-by: Michael Sherman <msherman32@gatech.edu>

[33mcommit 4695c65489eede96f5e2a307135cac1f60a4767f[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Aug 5 15:52:12 2018 +0200

    Shadow-Jar was configured incorrectly -> api and engine-api had too many included dependencies, engine had some duplicated classes from *api.
    
    Issue: #34
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 5b0f2284addf85ba1063a457d97bfd12138a71a0[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Aug 4 17:34:55 2018 +0200

    The Guava-android versions draw in some unwanted transitive dependencies, so we stay on the last Java 7 compatible common version Guava 20.0.
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit dfe8b02ffeec987f47c4aa54760c55589c6093b7[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Aug 4 17:34:55 2018 +0200

    Updated dependencies to current (Java 7 compatible) versions. According to the Guava site, the Android branch of Guava is the way to go for now, to be compatible to Java 7. Log4J seems to behave differently on a lower level, since MutableLogEvent will for some reason be changed further down in the progress?? However, at the moment of logging, the event seems correct, so we simply save the required data for later comparison. Also toArray(new Foo[specificSize]) is not more efficient anymore with current JVMs, thus the preferred way is new Foo[0] even if the array needs to be resized immediately.
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 205be947cf67acf5cdfacd3aea56c7fc289e95b3[m
Merge: d7fef528 c1518ee3
Author: Peter Gafert <superpete@gmx.de>
Date:   Sat Aug 4 17:45:50 2018 +0200

    Merge pull request #94 from TNG/junit5-support
    
    Add Junit5 support

[33mcommit c1518ee3e5e43dd2e4ad0af8848228085d80cc6e[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Aug 4 16:45:40 2018 +0200

    Step 6: Update user guide for JUnit 5, set version back to master.
    
    Issue: #34
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit d95471b28b31630815f4712ff52d5c88b38a337d[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Jul 16 00:00:26 2018 +0200

    Step 4.4: Extended Maven integration test. It now runs against all configured Java versions, and example-plain, example-junit4 and example-junit5 (if JAVA_VERSION > 1.7).
    
    Issue: #34
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 6ecee66252aac89ce09de3aed9824e19dd949a04[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jul 15 23:52:05 2018 +0200

    Step 3.13: Hierarchy for complex (nested) libraries was wrong -> the common logic in archunit-junit handling the @ArchIgnore was really not worth it, since the handling got so much simpler with JUnit 5. Plus the intermediate class was mistakenly left out.
    
    Issue: #34
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 586b4aad0a062d36e9a871f74998c2a0ec8323aa[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jul 15 20:30:45 2018 +0200

    Step 5.3: Moved source sets to different Gradle modules, since it seems to be more trouble than worth to keep the various release artifacts (api, engine-api and engine) in one Gradle module.
    
    Issue: #34
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 693b3d630bd6fd2100fa77949bc66ddd5024dd38[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jul 15 16:26:23 2018 +0200

    Step 3.12: Engine now skips tests marked with @ArchIgnore.
    
    Issue: #34
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 2db3c7f8de6910a4f36f0bddde457227f2f6593a[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jul 15 01:55:24 2018 +0200

    Step 3.11: Engine now discovers fields, even though we have no client so far that would call the engine correctly.
    
    Issue: #34
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 69793d6c7ae683a1d7ed12f6b77042b76b747143[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jul 15 01:11:39 2018 +0200

    Step 3.10: Engine now discovers methods.
    
    Issue: #34
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit bf15b6aa8dcf93668b735061bcaf26436e0f41c1[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jul 15 00:25:20 2018 +0200

    Step 5.3: Duplicate @ArchTest so we can annotate the JUnit 5 version with @Testable (e.g. IntelliJ can pick it up then, and allows to run an @ArchTest, even if it uses the wrong DiscoverySelectors)
    
    Issue: #34
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 05df603046a22d9961f3dd2396e97f91beb9a210[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Jul 14 20:25:04 2018 +0200

    Step 3.9: Engine now filters packages.
    
    Issue: #34
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 54c47f323fc5d866b28747c600d56f0bb58eddba[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Jul 14 20:11:54 2018 +0200

    Step 3.8.2: Engine now discovers packages.
    
    Issue: #34
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 9e02a0becf4833d3736311c167f91212ff3758b2[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Jul 14 19:46:01 2018 +0200

    Step 3.8.1: Create different sub packages for examples so we can test package imports
    
    Issue: #34
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 2a0de2dbf78130de6f956c24a16192e617f0e500[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Jul 14 17:20:23 2018 +0200

    Step 3.7: Engine now discovers classpath roots. Also implemented support for classNameFilters, since otherwise broken examples would always be picked up as well. We cannot throw an exception if a class declares @ArchTest members, but is not annotated with @AnalyzeClasses (like originally intended), since it is a valid use case to only declare @ArchTest members within a class that is afterwards used within a rule library via ArchRules.in(Other.class). Thus for now the engine will just log a warning, informing about the class being skipped and announcing the (only) valid use case where @ArchTest without @AnalyzeClasses makes sense.
    
    Issue: #34
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 2a78a478d6f91ed78bbc83ee2531c4f395a883b7[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Jul 13 16:04:37 2018 +0200

    Step 3.6: Engine now discovers UniqueIds. The engine now also removes redundant descriptors, e.g. if a class and a unique id within that class are requested at the same time.
    
    Issue: #34
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 1e174ade5fc41f3ebc04203d5f588606a036ecf7[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Jun 16 20:31:11 2018 +0200

    Step 3.5 - Removed dependency on Jupiter API, instead ArchUnit API now offers its own @ArchTag which can also be applied to fields.
    
    Issue: #34
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 39713478cddd67b17b1d85272f272aec13310524[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Jun 16 18:28:47 2018 +0200

    Step 5.2: Split archunit-junit and archunit-junit5 into an api and an engine part like Jupiter
    
    Issue: #34
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 66eee747d3d73c9b8069f9144e7a3b4d1159108b[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Jun 5 19:24:57 2018 +0200

    Step 5.1: Isolate a clean API without dependencies on internal parts. This will enable us to create clean archunit-junit5-api and archunit-junit5-engine dependencies like Jupiter does.
    
    Issue: #34
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 6d539eb4a7def498400eef90682c0fe925cfa102[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Jun 4 20:10:50 2018 +0200

    Step 4.3: Restored Maven integration test for JUnit 4. The test should be run against example-plain, example-junit4 and example-junit5 in the future.
    
    Issue: #34
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit fcca0aff78abfc646d02364f42102e5b412afbb1[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Jun 4 19:58:16 2018 +0200

    Restore old behavior -> JUnit 4 support showed nested rules within their declaring test class, not the library class
    
    Issue: #34
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 34f5d3b95ad9acea01a785d7471c2dc8dc4abffe[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Jun 4 19:55:10 2018 +0200

    It's easier if example projects don't depend on each other within test scope -> Maven integration test
    
    Issue: #34
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 0e0a96fea14680eaa5cff2ff6a30b64d8faa7320[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jun 3 17:34:39 2018 +0200

    Renamed integration-test:junit -> integration-test:testutils, since this is really what this package contains, and there are no JUnit test specifics left.
    
    Issue: #34
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit d418b9667549fb8334f7e8f7addc9c890e9b3c93[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jun 3 17:14:02 2018 +0200

    Step 4.2: Massively refactored integration tests. Integration test infrastructure is now more black box, no ArchUnitIntegrationTestRunner is needed anymore, integration tests just programmatically execute the respective test infrastructure (JUnit 4 or 5). Examples are now widely identical for plain, junit4 and junit5. ExamplesIntegrationTest runs tests against the triple plain.FooTest, junit4.FooTest and junit5.FooTest to ensure that tests behave the same with all test infrastructure.
    
    Issue: #34
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 48766f9cf2ec17e87e812830145f5f466ab5bbd6[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun May 20 17:09:38 2018 +0200

    Decided to leave the rule description out of UniqueId and test.description. On the one hand the path field->class->field is already unique, the rule description doesn't add any value. On the other hand, if rule texts are long (like layeredArchitecture()), this makes the tests hard to read within the IDE, so the field name might actually be more concise.
    
    Issue: #34
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit abc6bb652b0b51db622a647d40bdaec88915fec4[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun May 6 19:46:45 2018 +0200

    Step 4.1 - Split up examples in plain (not test framework specific), junit4 and junit5.
    
    Issue: #34
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit b10977349348fd7995eb5680487c3fc906e3dca1[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun May 6 19:49:36 2018 +0200

    Step 3.4 - Added discovery of @Tag. Unfortunately, the @Target of @Tag prevents the usage of @Tag on ArchRule fields, so for the future we unfortunately might have to provide our own @Tag annotation. Also updated Gradle to 4.7 and JUnit to 5.2.
    
    Issue: #34
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 4f470ccef3067de8dbd857da71c0f7663289e8f3[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Mar 31 19:13:58 2018 +0200

    ClassCache shouldn't import the whole classpath, if a non-existing package is declared within @AnalyzeClasses
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 39742da7ac3ad0db9a47444e92091b656b6b12ee[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Mar 30 18:08:01 2018 +0200

    Step 3.3 - Implement execution of @ArchTests. Classes are taken from the ClassCache and the cache is cleared with respect to the current test class after each test class is done. Note that Gradle at the moment ist dependent on the existence of a TestSource, even though the property is optional (Gradle TestEngine executor silently failed on start and the tests were skipped). Also note that the former Gradle JUnit plugin seems to have used a ClasspathRootSelector, while the current implementation uses a set of ClassSelectors, making it difficult, to know which selectors are absolutely necessary to support. The current version, supporting only ClassSelector, runs in IntelliJ, Gradle 4.6 and Maven 3.5.0, if all tests or just a class is executed.
    
    Issue: #34
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 7d8283e6d77f17b880b12801b572c202e001ebe2[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Mar 11 16:04:23 2018 +0100

    Step 3.2 - Implement discovery for ClassSelector, including creation of UniqueId and correct descriptor type (TEST vs CONTAINER). Actual execution is still missing as well as other selectors and support for filters.
    
    Issue: #34
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 2da5db0be23730e858a87672d8b803425d6f2499[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Mar 11 15:53:04 2018 +0100

    Step 3.1 - Add JUnit 5 dependencies, ArchUnitTestEngine, META-INF/services for service discovery of ArchUnitTestEngine, also stubs for the engine, the engine descriptor and the engine execution context. Additionally update Gradle to 4.6 for integrated JUnit 5 support (test { useJUnitPlatform() } instead of extra plugin).
    
    Issue: #34
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 37c357c0c46842457dcaa87b005379a1c4e1a9a2[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Feb 22 16:40:00 2018 +0100

    Step 2 - Separate common logic like ClassCache from JUnit 4 specific code like ArchUnitRunner.
    
    Issue: #34
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 128d2a404eef5c6e0a0b133bd9a2c3be63f57c1b[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Feb 21 16:48:57 2018 +0100

    Step 1 - Create project structure -> archunit-junit as parent for common code, archunit-junit4 and archunit-junit5 as children adding JUnit version specific code.
    
    Issue: #34
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit d7fef52806324fd0b3a0e08969c5daa759ae6b76[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Aug 3 19:28:29 2018 +0200

    Non-Java source files were reported in a wrong way, since formatLocation(..) assumed that the file name will always be simpleName of enclosing class + ".java". ASM allows to read the source file name from Java bytecode, provided it was compiled into the class-file. This patch adds Optional<sourceFileName> to Source and a 2-step approach within formatLocation(..) that will first try to derive the location from the real source file name, and only if that is not present will use the old heuristic to determine the source file name.
    
    Issue: #77
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 9e8af8c11ba561f24253687a7f9be5ea0a5dab1b[m
Merge: 0727a5f5 95ee6e5d
Author: Peter Gafert <superpete@gmx.de>
Date:   Fri Aug 3 14:51:09 2018 +0200

    Merge pull request #93 from jqno/master
    
    Supports running on Java Early Access versions

[33mcommit 95ee6e5d94bd7a6534794adda0434c53d9f21733[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Aug 3 14:38:25 2018 +0200

    It is probably more resilient if we just look for any consecutive group of numbers at the start of the string, then if matcher.matches(..) Integer.parseInt(..) should at least always work.
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 0a40f8303066427646d1b05ef78882600e37fbfe[m
Author: Jan Ouwens <jan.ouwens@gmail.com>
Date:   Fri Aug 3 13:08:53 2018 +0200

    Supports running on Java Early Access versions
    
    Signed-off-by: Jan Ouwens <jankrijgtgra@gmail.com>

[33mcommit 0727a5f51dfbf1cdb2d3b1a87cc4ac480c8cd95d[m
Merge: d78d0bae f7611542
Author: Peter Gafert <superpete@gmx.de>
Date:   Mon Jul 30 18:38:10 2018 +0200

    Merge pull request #92 from msherman32/update_for_direct_dependencies
    
    DependenciesFromSelf now contains dependencies from

[33mcommit f761154228c4c2c4b209134073c6a4019b306d67[m
Author: Michael Sherman <msherman32@gatech.edu>
Date:   Mon Jul 30 18:26:06 2018 +1100

    DependenciesFromSelf now contains dependencies from
    - field types
    - method parameter types
    - constructor parameter types
    - method return types
    Also refactored descriptions to be more consistent, e.g.
    - 'Constructor <..Foo.<init>()> calls constructor..' instead of 'Method <..Foo.<init>()' calls constructor ...'
    - 'Class <..Foo> implements interface <..Bar>' instead of '..Foo implements ..Bar'
    
    Signed-off-by: Michael Sherman <msherman32@gatech.edu>

[33mcommit d78d0bae0ef3f7f87583e01432d3831f49f7d601[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Jul 20 20:29:05 2018 +0200

    Integrated docs changes from 0.8.3
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit a44e77ecf79f20389197dbda32d5e8ea87592c17[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Jul 20 19:53:17 2018 +0200

    Adjust version to 0.9.0-SNAPSHOT
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 76dab49d1ec0daa7aa33642be0d8c50b17e90263[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Jul 20 19:46:12 2018 +0200

    Fixed bug where very deeply nested superclasses missing from the import would not be resolved correctly.
    
    Issue: #91
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit df451e273dfa59d82201f50caf541f3f36300f09[m
Merge: 4c647636 30fc6842
Author: Peter Gafert <superpete@gmx.de>
Date:   Tue Jul 10 16:05:12 2018 +0200

    Merge pull request #88 from bedla/ignorepatterncomment
    
    Support comments in archunit_ignore_patterns.txt

[33mcommit 30fc68421a9898471de313c076765d13aceeca34[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Jul 10 15:48:21 2018 +0200

    Review: Add an example of a comment to the ArchUnit user guide
    
    Issue: #88
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit e09d823f5fbdd1fec625b299b39b9288562e0ac8[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Jul 10 15:43:08 2018 +0200

    Review: Make test assertion consistent with the rest -> AssertJ's assertThatThrownBy is nice, but with Java 7 there is still much boiler plate code, and all other places assert exceptions in a different way, so to be consistent I've changed this.
    
    Issue: #88
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 4d54086d4fe14d9b25be35c25db26572f9728767[m
Author: Ivo Smid <ivo.smid@gmail.com>
Date:   Tue Jul 10 08:39:02 2018 +0200

    Support comments in archunit_ignore_patterns.txt
    
    Signed-off-by: Ivo Smid <ivo.smid@gmail.com>

[33mcommit 4c6476369762912d1f66c9585aab961750c6b30f[m
Merge: 5d40fd06 8f27faf4
Author: Peter Gafert <superpete@gmx.de>
Date:   Sun Jul 8 15:34:19 2018 +0200

    Merge pull request #83 from bedla/matchedcount
    
    Support condition to check how many classes have matched

[33mcommit 8f27faf4010b4ba5bcf053e3a65a21b31df92e21[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jul 8 15:27:13 2018 +0200

    Review: Relaxed RandomSyntaxTestBase -> it's actually irrelevant for this test, if the check passes or fails. The scope of this test is just
    * does the description match the expected description
    * can the created rule be evaluated and checked without any unexpected exception (NPE or similar)
    If the description matches, the rule can be evaluated, and the check either passes or throws an AssertionError, we're fine here
    
    Issue: #83
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit b674916aea345354367e740ce93ed41871173de4[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jul 8 15:12:29 2018 +0200

    Review: Added example and integration test
    
    Issue: #83
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 358af1d653cb7b2c0a053020dff18ec41d858b41[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jul 8 14:40:01 2018 +0200

    Review: We just want the sorted set of class names in the violation description, not the whole toString() of JavaClasses
    
    Issue: #83
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit b3351e32dde2b560f1100f2625f9a1b8397b05a2[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jul 8 13:58:14 2018 +0200

    Review: Fix RandomClassesSyntaxTest - Originally the test was only failing because the predicate for containNumberOfElements(..) was accidentally evaluated inversely. Now that this is fixed, the original code works just fine and the test passes again.
    
    Issue: #83
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 91bcd776656f4b20a97897feb284fa942375a987[m
Author: Ivo Smid <ivo.smid@gmail.com>
Date:   Thu Jun 28 08:00:48 2018 +0200

    Support condition to check how many classes have matched
    
    Signed-off-by: Ivo Smid <ivo.smid@gmail.com>

[33mcommit 5d40fd06da8802845c38903ef0ac0b8afca096b6[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Jul 6 17:42:14 2018 +0200

    Updated CONTRIBUTING.md -> we don't need the reference to "ArchUnit Contributor License Agreement" anymore, since it was replaced by the DCO
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 9d90b5f23bbc173a405f944e50df470b90f59137[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Jul 2 00:04:12 2018 +0200

    Review, some minor renamings within the test class, some minor refactoring.
    
    Issue: #86
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 2c6d949dd739b3e223cb2bec1c2683508a6f18cc[m
Merge: a76d0c95 051eb0a9
Author: Peter Gafert <superpete@gmx.de>
Date:   Sun Jul 1 23:52:08 2018 +0200

    Merge pull request #86 from bgalek/beImmutable
    
    added haveOnlyFinalFields() to ArchConditions

[33mcommit 051eb0a9358cd15c28d87c57fe23e583f38d2b42[m
Author: Bartosz Galek <bartosz.galek@allegro.pl>
Date:   Sun Jul 1 18:30:09 2018 +0200

    beImmutable() renamed to haveOnlyFinalFields()

[33mcommit ab515f9c264821046bb5d3ddc08613dbafa0fc7a[m
Author: Bartosz Galek <bartosz.galek@allegro.pl>
Date:   Sun Jul 1 16:24:42 2018 +0200

    added beImmutable() to ArchConditions

[33mcommit a76d0c951fdd3ca9a22f14821d7ea0d580fdff4d[m
Merge: 215864c2 0cb05ae4
Author: Peter Gafert <superpete@gmx.de>
Date:   Wed Jun 20 00:06:24 2018 +0200

    Merge pull request #80 from msherman32/SingleEquivalence
    
    Adds theClass(..), noClass(..), should().be(..) and should().notBe(..)
    
    Resolves: #60

[33mcommit 0cb05ae46c4d7753763352b2a7cd79b416d53a04[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Jun 19 23:33:49 2018 +0200

    Added example and integration test for theClass(..), noClass(..), should().be(..) and should().notBe(..)
    
    Issue: #60
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 7591a00e2aeeecd2e690916054345903e3f97ce8[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Jun 19 22:58:50 2018 +0200

    Fixed tests (@PublicAPI was missing + random syntax test couldn't deal with the new (not)be(..) methods)
    
    Issue: #60
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit ae15186e19e5d47b9c1ff8253570fde9032878fd[m
Merge: 215864c2 8686755e
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Jun 19 22:44:17 2018 +0200

    Merge branch 'SingleEquivalence' of https://github.com/msherman32/ArchUnit into SingleEquivalence

[33mcommit 8686755eddfa9f3dc68a169b21f61e15693eaa20[m
Author: Michael Sherman <msherman32@gatech.edu>
Date:   Tue Jun 12 17:38:52 2018 +1100

    Extended the syntax to offer an ArchRuleDefinition.theClass(..) and
    noClass(..) entry point to create rules based on a specific class. Also
    added should().be(..) and should().notBe().
    
    Issue: #60
    Signed-off-by: Michael Sherman <msherman32@gatech.edu>

[33mcommit 215864c25d62820119bb1f2f050cd0b489907f63[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Jun 16 12:52:41 2018 +0200

    Integrate 0.8.2 changes and add news article about release.
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit f152d847a56161f890a138d18e7df0bb0e789490[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Jun 16 11:57:21 2018 +0200

    Make UrlSource.From.classPathSystemProperties() resilient against illegal paths like older versions of Eclipse sometimes add to the classpath on Windows (e.g. '/C:/some/folder')
    
    Issue: #79
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 7cd648465ef31732a975c72cec75fecc7ead7fcd[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Jun 16 11:18:16 2018 +0200

    Updated website dependencies to remove vulnerability in nokogiri <= 1.8.1
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit d1068430e02624d1a9f49c1e33e17a73f4ee7d65[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Jun 13 01:33:17 2018 +0200

    Fixed another possibly harmful use of platform dependent file separator (didn't cause any problems in some quick smoke tests on Windows though)
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 73873298307e3da09240591419a7d03d88a1cb7f[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Jun 4 22:46:13 2018 +0200

    News update -> new article in JavaSPEKTRUM
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit adee0755a3cd62d1440799bdae54361df29afdca[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jun 3 14:31:33 2018 +0200

    Added more extensive documentation about the impact of the context of all imported classes and the resolution behavior.
    
    Issue: #71
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 1b516eebaf57b80a7f4424a417e88e975dda92db[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jun 3 04:18:56 2018 -0700

    Wrong assumption, the Guava method doesn't reliably close the stream for us.
    
    Issue: #58
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit ea81fa0a05ae0480dac0e36ef4026becc906ded4[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Jun 2 19:46:18 2018 +0200

    Adjusted docs to 0.8.1
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 7d114647444a8e446bc2b24bf0428c602fabb98b[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Jun 2 15:41:17 2018 +0200

    Minor -> Fixed wrong indent
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 02ba55871654fd46d8fd78030b98ee233bf3b722[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Jun 2 15:24:55 2018 +0200

    Added guard, if uploadArchives is called with parallel=true, since this seems to lead to scrambled uploads in Sonatype Nexus.
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 07c85db8759be8d1258404fc29c8a6ab742c28eb[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Jun 2 15:04:59 2018 +0200

    Set new SNAPSHOT version
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 2ae408cf9f78454bf3fc564348fb723e0a819189[m[33m ([m[1;33mtag: v0.8.1[m[33m)[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Jun 2 14:51:50 2018 +0200

    Set bug fix version 0.8.1
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 07302819f4dac287fdee08a2e28672d439218eb2[m
Merge: ebe51304 ab0623f6
Author: Peter Gafert <superpete@gmx.de>
Date:   Sat Jun 2 13:42:28 2018 +0200

    Merge pull request #76 from TNG/fix-windows-urls
    
    URLs should now be resolved in a platform independent way

[33mcommit ab0623f6d784fe788b14a56db24b923165543c98[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed May 30 11:04:10 2018 -0700

    URLs should now be resolved in a platform independent way
    
    Issue: #73
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit ebe51304e4ee4e4fd888364e2d203d033fee8ee2[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed May 30 18:44:30 2018 +0200

    Added check for existence of layers for arguments of 'mayOnlyBeAccessedByLayers(..)' with meaningful error message (instead of NPE).
    
    Resolves: #74
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit ed16a9bd463dd738cbe2841a640f803b94c75fe2[m
Merge: 939b44c9 9d199728
Author: Peter Gafert <superpete@gmx.de>
Date:   Wed May 30 18:20:13 2018 +0200

    Merge pull request #72 from fdw/feature/kotlin-documentation
    
    Add documentation for Kotlin

[33mcommit 9d199728eb91dbb6e9350b865555ac9220503c35[m
Author: Fabian <fabian.winter@tngtech.com>
Date:   Tue May 29 09:05:32 2018 +0200

    Add documentation for Kotlin
    
    ArchUnit works with Kotlin mostly out of the box, but there are some
    syntax changes (aka workarounds) necessary. Now they're documented.
    
    Signed-off-by: Fabian Winter <fabian.winter@tngtech.com>

[33mcommit 939b44c96060ce07fe5413daec6ec23eb5abbc9f[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun May 27 15:22:16 2018 +0200

    Added example how to check method return types.
    
    Resolves: #70
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit d63dc3b2ddbc83d60499a1b15797ed90bde64470[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed May 16 21:39:23 2018 +0200

    Set new SNAPSHOT version
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 3bef3664e35e343d1a9213fa51bea8e50ba280e4[m[33m ([m[1;33mtag: v0.8.0[m[33m)[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed May 16 21:37:49 2018 +0200

    Set version for release
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 8b0044fee8669ecf1c4a2a2055de660606db3350[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed May 16 19:48:46 2018 +0200

    Set version back to 0.8.0 and prepare a release with Java 9 support.
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 6b4a409927eb9419d4d203b7fb44a74203bf1195[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed May 16 19:47:48 2018 +0200

    @AnalyzeClasses allows to specify a CacheMode now, where CacheMode.PER_CLASS completely deactivates the cache by locations.
    
    Resolves: #45
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 9267c4a983d2b4d69ebd08b3d611fecc97e20e40[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed May 16 18:12:24 2018 +0200

    Updated dependencies / configuration to support Java 10.0.1
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 19991fd1830b1a7bdf0f0941a4998b22bd5391b9[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed May 16 16:26:59 2018 +0200

    News update
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 5e3b590a2158242756249d15da3ef34ad4e8bb39[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed May 16 15:38:10 2018 +0200

    The CLA is now replaced by the DCO.
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit c02478a12d4754c1fd81d442a7d0b06db12865e8[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue May 15 16:25:03 2018 +0200

    Added test for path with spaces, also fixed behavior where classpath entries ending in '.class' would be postfixed with '/'.
    
    Issue: #67
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 1237623ee0e23cdf550426239738a16813bbf22d[m
Merge: c6595709 20df30cd
Author: Peter Gafert <superpete@gmx.de>
Date:   Tue May 15 16:12:15 2018 +0200

    Merge pull request #68 from DennisRippinger/master
    
    Fixed missing `apple.security` to SecurityTest. Resolves #67

[33mcommit 20df30cd6b4cf788312dd8efbd2b5161b1bb32ac[m
Author: Dennis Rippinger <dennis.rippinger@gmail.com>
Date:   Fri May 11 12:53:23 2018 +0200

    Fixed missing `apple.security` to SecurityTest. Issue: #67
    
    Also fixes a problem related to running JUnit Tests from IntelliJ on Mac
    systems. IntelliJ resides in a folder `IntelliJ App` (mind the space)  which executes the
    JUnit tests and adds therefore its own Jars to the classpath. When
    converted from an URL into an URI we recieve an illegal character
    exception. The fix was to UrlEscape the path variable within the `newUrl` method.
    
    Signed-off-by: Dennis Rippinger <dennis.rippinger@gmail.com>

[33mcommit c6595709d4a3132c21da3bea2469f2350378c336[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat May 5 13:16:54 2018 +0200

    Renamed license and contributing related files to be consistent with OSS guide lines
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 5210f0761a9230bd1272232fddac29a7046237d8[m
Merge: 8bd3806c 540ce91e
Author: Peter Gafert <superpete@gmx.de>
Date:   Fri Apr 20 12:49:03 2018 +0200

    Merge pull request #65 from rweisleder/gh-57
    
    Add support for meta-annotations

[33mcommit 540ce91e232191d453576476cf88e555de4cf25a[m
Author: Roland Weisleder <roland.weisleder@googlemail.com>
Date:   Sun Apr 15 10:16:05 2018 +0200

    Add support for meta-annotations
    
    Now it is possible to call
      classes().that().areMetaAnnotatedWith(...)
      classes().that().areNotMetaAnnotatedWith(...)
    and
      classes().should().beMetaAnnotatedWith(...)
      classes().should().notBeMetaAnnotatedWith(...)
    
    Like in the Spring Framework, an annotation is "meta-present" on a class
    if the annotation is directly present on one of the classes annotations
    or meta-present on one of classes annotations.
    
    Signed-off-by: Roland Weisleder <roland.weisleder@googlemail.com>

[33mcommit 8bd3806cc9be3623efc4922e6cc2414f12626056[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Apr 16 17:52:57 2018 +0200

    Added DCO and NOTICE
    
    Signed-off-by: Peter Gafert <peter.gafert@tngtech.com>

[33mcommit 7a8d1144d099e04ba2ddb0cb0c64745bc188b5f1[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Apr 16 17:36:11 2018 +0200

    LICENSE template should not be modified

[33mcommit 7b53c61b62426f82115906f480092e276d4da308[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Mar 17 18:20:34 2018 +0100

    Added old news about an presentation of ArchUnit at SWA-MUC, including link to video, to website.

[33mcommit 0941c883644ac4fd02ee698f0d31d4581a95a24d[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Mar 10 15:16:41 2018 +0100

    Added new article at Java Aktuell to news of website

[33mcommit 38019774ad4d8888a142bb090a67dcd7233357d5[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Feb 20 15:48:06 2018 +0100

    Added location links with default line number 0 to most predefined conditions to enable easy navigation via IDE
    
    Resolves: #61

[33mcommit 84e48659cf902e780018edf07ce444503b8ae4c0[m
Merge: 8acbc479 f21707ea
Author: Peter Gafert <superpete@gmx.de>
Date:   Fri Feb 23 18:18:29 2018 +0100

    Merge pull request #63 from TNG/java9-support
    
    Add Java9 support

[33mcommit f21707ea3b693b9916bada4c4d2e2f91abcb3d2c[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Feb 23 16:45:07 2018 +0100

    Set version to 1.0.0-SNAPSHOT, since with Java 9 support and JUnit 5 support we will make this version 1.0.0 of ArchUnit, so we can do semantic versioning from then on.

[33mcommit 1e859c01511b28f3201f5146defad0fa64715456[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Feb 20 14:21:02 2018 +0100

    Increase heap space for Maven test runs

[33mcommit 141ebaab73cec4a036d6fe8d52de7063e8b8afd5[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Feb 20 13:30:37 2018 +0100

    Replaced Findbugs by Spotbugs for Java 9 support

[33mcommit d4d9ae0dc16fb31293ffc78c58fda549e680ad8c[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Feb 20 12:42:17 2018 +0100

    Updated Gradle to 4.5.1 and improved Maven integration test to have correct execution order (no parallel execution) and clean up, even if prepare fails or gets interrupted

[33mcommit 577b2be3d7017ee57d4f7547ae7e50b1125978d1[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Feb 20 11:32:17 2018 +0100

    Extended example and integration test for a full classpath import (unfortunately behaves differently depending on the environment, e.g. Maven, Gradle, IDE, ...)

[33mcommit f9adcee0bb78700c32b890f7bc23bac115447c9c[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Feb 19 18:11:58 2018 +0100

    Make ClassFileImporter resilient against broken conversion of Location to ClassFileSource.

[33mcommit c3ccb1841d639a11685ef03cea5e2250aa49ef84[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Feb 19 17:56:28 2018 +0100

    Read URLs from bootstrap classpath property as well, since otherwise for certain implementation (e.g. Maven) we won't be able to access classes from rt.jar and similar. In these cases the Bootstrap ClassLoader might also always be represented by null, making it hard to programmatically access it in a reliable way.

[33mcommit e3b5d7cc81134beed9590def6a4aabad0c7b9b3d[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Feb 18 18:32:23 2018 +0100

    Added example and integration test that does a package import of the JDK, since classpath import of JDK classes differs with different Java versions.

[33mcommit 1028ca4e3a3f58f3ab15c4e472ee43a1c19e99e7[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Feb 18 17:53:40 2018 +0100

    Maven integration test will now be run against Java 7, Java 8 and Java 9, if the respective Gradle property java${version}Home is set

[33mcommit b59859ad8bb16d6d5ad9891f1e20d150fd31adc1[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Feb 18 13:41:40 2018 +0100

    Mark Surefire reports as processed to prevent Jenkins from picking up the wrong results as failures

[33mcommit 43efaebc26139cafb2ee1ea8d46dcad805219595[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Feb 3 14:22:21 2018 +0100

    Updated Maven Compiler Plugin to 3.7.0

[33mcommit 213a269b1d6dce31a0b86072afc50497a2b9b183[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Feb 3 14:20:30 2018 +0100

    Added Maven Wrapper

[33mcommit 1c49c2903ae9fba5efc8a0715899ba43da37e8f4[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Jan 6 16:16:17 2018 +0100

    Step 7.10 - Ignore module-info.class, since it doesn't make sense to treat them as "JavaClass", and they all have the same relative path.

[33mcommit 79e7549ae65e9cf86e9f7144f1d7b32fe0556ecf[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Jan 3 00:21:27 2018 +0100

    We need JDK 9 now in travis

[33mcommit 33f5286ed391fee51ab74eaa3710a4f1a1f777ae[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Jan 3 00:12:07 2018 +0100

    Step 7.9 - The number of accessible JDK classes increased drastically (~6000 -> ~50000), so we limit the imported classes so that we don't run out of heap

[33mcommit 28c7178c6aec405dadae7038ce143dc0b181bbcb[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Jan 2 23:06:41 2018 +0100

    Step 7.8 - Added ImportOption to ignore archives, and made this the default of ClassFileImporter.importClasspath(), since it mimics the old behavior

[33mcommit 95ca10a7c30585faedf9a0c74560e63514302f2f[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Jan 2 21:44:44 2018 +0100

    Step 7.7 - @PostConstruct is not accessible anymore -> quick and simple change to fqn

[33mcommit fb0116830ac9734f21d9311983b7ec9c82de640b[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Jan 2 21:36:20 2018 +0100

    Step 7.6 - Add DomainPlugin for Java9 -> toString of annotation has changed

[33mcommit 42e78b49a52465e1681f4e00b7ead48f8ccd3e69[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Jan 2 19:23:51 2018 +0100

    Step 7.5 - compensate performance decrease, by only searching for missed entries, if we couldn't locate the resource before. This should remove all the unnecessary lookups for known classes or packages that we already found (like our own application). Note that this opens a little hole, if we have a package entry in one Jar (so the classloader finds it) and another Jar contains a sub entry, but no package entry, we won't find it anymore. But this seems a border case, since it should be unlikely that the same package is contained in two Jars, but one is packed in a way that skips the folder entries, and one is not.

[33mcommit ff129c12c826403d7b9a1356c0cc70a652e8e0eb[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Jan 2 16:22:39 2018 +0100

    Step 7.4 - Added Java 9 specific ModuleImportPlugin, which also searches modules on the modulepath and supports jrt:// locations for JMOD files. Most tests run again (AnnotationToString is still wrong, since the Java 9 specific Plugin is still missing). Massive performance decrease though, probably from searching missing entries in all jrt:// locations, we also always create a new module reader for every entry. Thus needs some optimization.

[33mcommit 97a358230194982c084bbac55f459751e5528651[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Jan 1 18:30:03 2018 +0100

    Step 7.3.a - Workaround for javadoc bug -> convert anonymous classes to inner classes

[33mcommit 2fdbe30d016ea7624f47152012a564ff3b9feb28[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Jan 1 17:51:58 2018 +0100

    Step 7.3 - Add JDK 9 source set, so that we can add the necessary plugins to support Java 9. Javadoc has a bug -> doesn't work at the moment. Findbugs misses classes from the JDK. Some tests fail because of different classpath handling with Java 9.

[33mcommit 1913583bbff1047887318c2e993fa8552b97ee80[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 31 15:19:46 2017 +0100

    Step 7.2 - Add Automatic-Module-Name to Manifest (so in Java 9 projects our modules already have the correct name for the future when we can go to Java 9 internally). Also don't relocate module-info.class or we'll end up in a module hell, when archunit.jar suddenly has the module-info of ASM, etc.

[33mcommit 12d8b97683fcaabd136dfd738443225f7a776157[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 31 15:05:05 2017 +0100

    Step 7.1 - Upgrade ASM to 6.0 and Shadow to 2.0.2 to be able to import Java 9 classes, as well as relocate ASM itself during the build (without the Shadow upgrade, this would throw an exception)

[33mcommit dc9f568d9a0d536c875aa4b371352baee5f2611c[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 31 19:19:02 2017 +0100

    Step 6 - Improve Maven Smoke test -> verify all example tests have the expected types of failure, so we can run this test with different Java versions in the future

[33mcommit 4a66436f4f85da8e0b98b9999b191990e24e3000[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 31 01:34:05 2017 +0100

    Step 5.3 - Extract common logic into PluginLoader

[33mcommit ab6b67dfc941322461bba8e044f6adfd38aba304[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 31 01:19:30 2017 +0100

    Step 5.2 - Added DomainPlugin for current platform, dispatching to legacy value formatter for AnnotationProxies

[33mcommit a08cda712e58b2ec324a69d099945337394eb722[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 31 01:14:05 2017 +0100

    Step 5.1 - Added ImportPlugin for current platform, dispatching to the legacy versions of LocationResolver and Location.Factories

[33mcommit 9ea00b5dd26d31db9ffde6f835f08b5366f07b9e[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 31 00:35:12 2017 +0100

    Step 4 - Make formatting of toString in AnnotationProxy pluggable, since it changed with Java 9 :-(

[33mcommit 82b63bee64fa7ae348cdcad5d78de31d5420a292[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 31 00:24:10 2017 +0100

    Step 3.2 - Added LocationResolver, so the resolving of the classpath can be dispatched according to Java version

[33mcommit 49a473e405c28454d7f28020e018e20a1e02a192[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 31 00:11:19 2017 +0100

    Step 3.1 - Separated URLClassLoader logic from Locations, introduced generic UrlSource to pass around all URLs from the classpath, independently of how those where retrieved. Background: In Java 9 we don't have URLClassLoaders anymore, so the detection fails. We'll retrieve the URLs from the classpath in a different way then.

[33mcommit be70b1f42fa5816215992f362aa838658caa97bd[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Dec 30 23:25:23 2017 +0100

    Step 2 - Decoupled schemes and Location creation within Location.of(..), since in the future we need to plug in an additional support for 'jrt://' URLs

[33mcommit e05b01598f378aa70d561c8b7a1b45f89479ebb2[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Dec 30 22:43:53 2017 +0100

    Step 1 - Remove ProGuard -> open requests for Java 9 support for a long time, a simple check to only keep the recursive tree of used class files does bring almost no benefit (only ca. 70/1800 classes could be excluded); seems Guava is pretty tangled on class level. To create a more elaborate check walking through the method tree doesn't seem worth the complexity vs archive size. This will unfortunately increase the archive size from ca 1MB to 3MB...

[33mcommit 8acbc479b0fbe7e61b49b2d49e0aa7df30aa1950[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Jan 15 16:44:06 2018 +0100

    Added explanation to German Imprint

[33mcommit 1fe6982aa4457b0700f92fb66cc40da084b9872b[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Jan 15 09:29:20 2018 +0100

    Add possibility to assign styles to the active menu item. Added text-docoration: underline to the active menu item.

[33mcommit 036ece168bde167bc83885bf7c057eadc10b91f6[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jan 14 20:27:57 2018 +0100

    Use https by default to serve the page.

[33mcommit dace137203a7c1b79588619c593a3c845da88337[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Jan 8 06:07:30 2018 -0800

    On Windows, JarFiles on another drive than C: were not correctly resolved in test. Now we use a platform independent way to resolve the JAR file.
    
    Issue: #58

[33mcommit c6046eacc99db4f88b6751dd8a33f463fcd185b6[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Jan 6 02:31:26 2018 +0100

    Reduced README.md, since we have the website now.

[33mcommit 4e017caedf0f3448e44c4f8547ebe34f62eca987[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Jan 6 02:16:21 2018 +0100

    Added a simple Windows CI setup. Docker-Image for an ArchUnit master build against a Windows Slave VM.

[33mcommit 2027a12a3a95feacbbd78af75851c7af4844123f[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Jan 6 01:26:10 2018 +0100

    Seems on Windows nanotime is not good enough to create unique nodes

[33mcommit 948d9b9bfb69e806f51fa1c72faada9e61891c4a[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Jan 6 01:20:39 2018 +0100

    We need a way to ignore failures to archive the test result in Jenkins

[33mcommit c966d9fc3cc7b08d6ccac74a8db05801f9208f27[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Jan 6 01:18:38 2018 +0100

    Should assert that files that are not moved are really deleted

[33mcommit 3fd8e07b9de9ad6160591db8e04ed0091c077453[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Jan 5 21:53:28 2018 +0100

    Use better temporary folder name resolution to avoid collisions

[33mcommit b82675fa63427556fd27aa73dd5596f41a4fc9af[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Jan 5 09:05:38 2018 -0800

    Bug-Fix -> File URLs were created incorrectly on Windows
    
    Issue: #58

[33mcommit dc5bd12a1cad9540fa5cdf630c9e94f23c5187d2[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Jan 1 17:32:23 2018 +0100

    Copyright update

[33mcommit 19e00d1f3a0c8236aa659400ea853b6399347866[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Jan 1 15:04:57 2018 +0100

    Added clean task to root project, since we checkout to buildDir on update-docs / update-examples

[33mcommit f78d374fc0371a1f42c823e25c4f3709a089786e[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Jan 1 14:48:09 2018 +0100

    Added alt-text to TNG-img in website footer

[33mcommit 60b9ca54781a46766215890bfe7698a23466bbd3[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 31 19:05:38 2017 +0100

    InterfaceRules was inconsistently named (missing 'Test' suffix)

[33mcommit d8a827df7878bea2e48cc1a906140be6dd3430a6[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 31 16:38:05 2017 +0100

    Try to configure the test heap explicitly, since Jenkins runs randomly fail with OutOfMemoryError

[33mcommit d921b89ea3feaab51b29c43ef033e58f597db979[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 31 16:00:52 2017 +0100

    Upgrade Mockito to 2.13.0, also some of the exception tests were running unnecessary slow

[33mcommit c234fcf0fb0b5715ba2b36ebcef5da081ceab392[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Dec 29 00:18:50 2017 +0100

    Added link to disclaimer in imprint

[33mcommit f5658566717d061ccde8cd83a637c5c90634d170[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Dec 29 00:00:25 2017 +0100

    Added new @archtests Twitter handle to footer

[33mcommit 109cd11b524e1f5d5581c6a638621c0fa915a544[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Dec 28 22:04:53 2017 +0100

    Added TNG as supporter to footer, changed site copyright, added imprint

[33mcommit c7f8bde3d038cdd5ff9c6eb04f98efa7ff2573e2[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Dec 28 21:41:11 2017 +0100

    Added "About"

[33mcommit 07f5fb2c487d8c5501e7078a0ea650512b407f16[m
Merge: a9567d6d 06bf61de
Author: Peter Gafert <superpete@gmx.de>
Date:   Thu Dec 28 20:42:32 2017 +0100

    Merge pull request #56 from hankem/ArchIgnore_reason
    
    @ArchIgnore annotation allows to specify a reason why the test is ignored

[33mcommit a9567d6d706c44078e1b99640ed0b2bf84272bf1[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Dec 28 20:33:28 2017 +0100

    Created release-related tasks -> update example in separate repo, update docs in gh-pages branch

[33mcommit 06bf61decb80e5b4cbd255217ff4476f9121d297[m
Author: Manfred Hanke <Manfred.Hanke@tngtech.com>
Date:   Thu Dec 28 19:27:52 2017 +0100

    @ArchIgnore annotation allows to specify a reason why the test is ignored

[33mcommit 119e222339cdcad21ef91babef6e4cf1937da2b1[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Dec 28 19:26:48 2017 +0100

    Added Icon + twitter graphics

[33mcommit fbbee0c663d6997eff2f47a4799496e5423c25b4[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Dec 28 15:11:56 2017 +0100

    Added "old news" ;-)

[33mcommit 0dd80fd0707b8b2de2a6c3b3c090d036a642a93b[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Dec 28 15:11:19 2017 +0100

    Set URL to www.archunit.org, so links are resolved correctly through CNAME

[33mcommit 45bbfb0bbc3b5654150fceb7f1bdbdd983612f00[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Dec 27 18:51:39 2017 +0100

    Keep CNAME when updating the docs

[33mcommit 086bd77ede469c865202a04d29d5bff73c636033[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Dec 25 22:54:18 2017 +0100

    Added section "Advanced Configuration" outlining how to configure archunit.properties

[33mcommit 7eb8adf0579a42a8367e2a3fb9d6302b850d57fe[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Dec 25 15:47:52 2017 +0100

    Added back link to archunit.org to the user guide, removed the single html pages from asciidoctor config, removed the footer.

[33mcommit 49b861bde86ed3a296e910907c0048e063c67a0a[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Dec 25 00:26:24 2017 +0100

    Applied suggestions from kneisslf: Show Gradle dependency, too, use correct scope, and make the test example valid code by adding a surrounding test class.

[33mcommit 4b434f30a23d0e01f52ba5148d24bfe6ad60ccc3[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 24 13:00:56 2017 +0100

    Hide 'Fork me on GitHub' on small resolutions, since otherwise there is an ugly intersection.

[33mcommit be05642840c4c18bdfe51eb3814cc319b50de883[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Dec 23 23:17:39 2017 +0100

    Added favicon to website header

[33mcommit 59f86c8d96a992f8866018226608a8e1dac7a071[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Dec 23 22:23:42 2017 +0100

    Added task to automatically bring ArchUnit-Examples up to date

[33mcommit a74c0f0510060b5b1748515eecb6cba7f3fbd7df[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Dec 23 20:01:57 2017 +0100

    Make archunit-example independent of Guava so the dependencies stay simple.

[33mcommit 4446ddb77dfced8a500dc225594ef03375376e14[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Dec 23 19:06:48 2017 +0100

    Linked from landing page to examples.

[33mcommit f6acfbd3719c30e0f8067907a377b9484a3e23cc[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Dec 23 18:54:26 2017 +0100

    Improved landing page according to suggestions by Philip Schmitt. Also changed "Getting Started" to be independent of JUnit 4. It's probably better, to show the way that works with any unit test framework (in particular if the sub heading of the landing page advertises "using the test setup you already have"). Instead linked to the user guide and examples to find out more.

[33mcommit b58c9a27f48047288290a82cdf9e4d3cc708d374[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Dec 23 15:37:41 2017 +0100

    Added JUnit Support to the user guide

[33mcommit 19f684bdca1027cd595623bf7111b8b3ac45d4c0[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Dec 22 19:15:11 2017 +0100

    Added Libary API to the user guide

[33mcommit e50f637b1a2cef0c1663e370c4d0b9f8e6777b4b[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 17 18:13:27 2017 +0100

    AU-33: Added a little more space around headings

[33mcommit a32347f53c98b4006601057a097a6336b602d05e[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 17 17:57:49 2017 +0100

    AU-33: Added "The Lang API" section to the userguide

[33mcommit 1f801bbc7bc9f8fec967609bc05956ab09561315[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Dec 13 01:21:52 2017 +0100

    Finished the first draft of "The Core API" User Guide

[33mcommit c633490609d535966cfb7e367bcc6eb30e3d2a4e[m
Merge: e8d6cc54 f7834674
Author: Peter Gafert <superpete@gmx.de>
Date:   Mon Dec 11 21:36:59 2017 +0100

    Merge pull request #53 from TNG/add-syntax-fails-on-invalid-args
    
    Adds some sanity checks to syntax methods accepting types (i.e. if we can determine, that an argument makes no sense, like annotatedWith(annotationWithRetentionSource) or implement(concreteType))
    
    Resolves #48

[33mcommit f783467405f7aa8593086caed76950fd7a5dfd05[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Dec 11 21:16:48 2017 +0100

    API now rejects implement(concreteType), since this can never be true (if the classpath is consistent).
    
    Issue #48

[33mcommit c44e337a9198dfcddfd379819a6e0199503ff7cf[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Dec 11 20:45:10 2017 +0100

    API now rejects annotation types with @Retention(SOURCE). This is usually wrong usage, since ArchUnit can never check for annotations with @Retention(SOURCE), since those are gone at the bytecode level.
    
    Issue #48

[33mcommit e8d6cc5484526b267dba8e3cf185f14bd6b4f842[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 10 21:00:31 2017 +0100

    Upgraded Gradle to 4.4

[33mcommit 7e4248f8af660f73a51e9646fdd2d52e91590a81[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 10 20:43:47 2017 +0100

    Added some more examples to section "What to Check"

[33mcommit eaeed252edb6526fb3b97a7db38448a5629db1a3[m
Merge: ce2a7a2e 40f20f19
Author: Peter Gafert <superpete@gmx.de>
Date:   Sun Dec 10 01:36:40 2017 +0100

    Merge pull request #51 from hankem/README-improvements
    
    README improvements

[33mcommit 40f20f19dd47e0031e014ce2adb55ac426f3cdc3[m
Author: Manfred Hanke <Manfred.Hanke@tngtech.com>
Date:   Sat Dec 9 14:45:00 2017 +0100

    examples import classes directly in field initialization instead of @Before method

[33mcommit ea5ed741f728f7971fd7140b6ab8d2206f0fd99c[m
Author: Manfred Hanke <Manfred.Hanke@tngtech.com>
Date:   Sat Dec 9 14:30:00 2017 +0100

    improved README.md
    
    * streamlined 'TL;DR' section and added dependency line for gradle (for copy & paste convenience)
    * simplified `Getting started' example (@Before-method is not needed and only distracts from ArchUnit example)
    * concluded 'Getting started' section with link to archunit-example (which helps getting started,
      but not every reader might arrive at the last 'Where to look next' section)
    * simplified 'Extending ArchUnit' section (also rephrasing 'one has to do' -> 'it can be done')
    * streamlined 'License' section (while the reason for redistributing ASM & Guava might not be that relevant
      within this section, their actual licence might however be)
    * added link to 'Where to look next' section (to guide the readers)
    
    archunit-example/README.md:
    * added links to the directories containing example rules and 'production' code (to keep the reader attracted)

[33mcommit ce2a7a2eceeba851f8b449a4df986254545f5ae7[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Dec 8 17:24:21 2017 +0100

    Re-generated HTML

[33mcommit cadcd467552a3495b08ef4288ef4247a1c836b8c[m
Merge: 0d075c45 653ad570
Author: Peter Gafert <superpete@gmx.de>
Date:   Fri Dec 8 14:49:46 2017 +0100

    Merge pull request #50 from gernotstarke/master
    
    new chapter in user guide, with some examples what you could check with ArchUnit

[33mcommit 653ad57039001478b2b56ce20c046c652b9eec57[m
Author: Dr. Gernot Starke <gs@gernotstarke.de>
Date:   Fri Dec 8 08:54:29 2017 +0100

    draft proposal how userguide mit look like - see chap 4 "What_to_Check.adoc"

[33mcommit 0e829265cb6ccdae3239149368e3a66fdd9c1274[m
Merge: 6f3dc53d 0d075c45
Author: Dr. Gernot Starke <gs@gernotstarke.de>
Date:   Fri Dec 8 08:49:23 2017 +0100

    Merge branch 'master' of https://github.com/tng/ArchUnit
    
    * 'master' of https://github.com/tng/ArchUnit: (56 commits)
      Added the section about "ideas and concepts" and the layout for the more details sections about the important layers and the JUnit support
      Add a paragraph to the README about using ArchUnit with JUnit 4 Categories
      AU-30: Changed styles for userguide: uses custom archunit.css; source highlighting switched from CodeRay to highlightjs (mono-blue theme fits ArchUnit well); however, groovy/gradle code blocks are not highlighted properly anymore, workaround: remove language name from code block
      AU-30: Changed color of hyperlinks to ArchUnit colors
      AU-30: Fixed ArchUnit logo path
      Set version to 0.6.0-SNAPSHOT
      Prepare release 0.5.0
      Added new IntelliJ folder structure to default ignores for DontIncludeTests *sigh*
      Fix wrongly reported "number of violations" where ContainsOnlyCondition is used. This is at best a shady fix, since the design, to couple the number of reported violations to the number of failure messages (which can be/are joined on new line sometimes as well), is a bug waiting to happen.
      AU-30: Replaced 'ArchUnit' title with small logo, added 'Fork me on Github' banner
      AU-41: Since jekyll-asciidoc is not whitelisted yet for Github pages, we generate the user guide via Gradle Asciidoctor for now
      AU-31: Added motivation back to navigation, also solved asciidoctor warning, that two level 0 headings were defined
      Added finish method to ArchCondition that is called after all check(..) calls were made. Removed workaround where in every check(..) call it was necessary to see, if the object was already recorded before (since now we can just loop over all cycles in the very end and thus avoid duplicates, which also removes the quadratic overhead)
      Start Jekyll via bundle exec
      AU-34, AU-31, AU-34: make user guide visible on page, add link to JavaDoc, fix more links on news page
      AU-31: attempt to fix links
      Removed obsolete type parameter
      Added state() to @PublicAPI to mark new API I'm not sure about yet as subject to change at any point (the violation handling and extension API has not been sufficiently tested for real world scenarios to commit to it)
      Improved Javadoc of AnalyzeClasses
      Added integration test for custom ignores when checking for cycles between Slices
      ...

[33mcommit 6f3dc53d5553cf488b1e517a0e3979bd6778255c[m
Author: Dr. Gernot Starke <gs@gernotstarke.de>
Date:   Fri Dec 8 08:49:04 2017 +0100

    icon for SourceTree git client

[33mcommit 0d075c45bf14d01bc6499c1c191fff607df2932a[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Dec 4 00:32:26 2017 +0100

    Added the section about "ideas and concepts" and the layout for the more details sections about the important layers and the JUnit support

[33mcommit 983298a42c95cf848e111476f9e331c6923d621b[m
Merge: 61bc21a3 d867c554
Author: Peter Gafert <superpete@gmx.de>
Date:   Sun Dec 3 23:50:25 2017 +0100

    Merge pull request #49 from catchin/add-junit4-categories-note-to-readme
    
    Add a paragraph to the README about using ArchUnit with JUnit 4 Categories

[33mcommit d867c5547d0d16d3a42cca295901f3b0408cced8[m
Author: Fabian Kneißl <fabian.kneissl@tngtech.com>
Date:   Sat Dec 2 17:20:16 2017 +0100

    Add a paragraph to the README about using ArchUnit with JUnit 4 Categories

[33mcommit 61bc21a36f97cbd2aea1f5294431ccc2e86b0673[m
Author: Daniel Götz <daniel.goetz@tngtech.com>
Date:   Mon Nov 27 22:08:14 2017 +0100

    AU-30: Changed styles for userguide: uses custom archunit.css; source highlighting switched from CodeRay to highlightjs (mono-blue theme fits ArchUnit well); however, groovy/gradle code blocks are not highlighted properly anymore, workaround: remove language name from code block

[33mcommit 300dcef15c0ec11f8d963991e63b4cc1fe99698c[m
Author: Daniel Götz <daniel.goetz@tngtech.com>
Date:   Mon Nov 27 17:53:28 2017 +0100

    AU-30: Changed color of hyperlinks to ArchUnit colors

[33mcommit 298f963e18412507163e92a18b9b149086d12e2c[m
Author: Daniel Götz <daniel.goetz@tngtech.com>
Date:   Mon Nov 27 16:37:08 2017 +0100

    AU-30: Fixed ArchUnit logo path

[33mcommit 23207f4e580d207bf786b3e4d44c2a2808508938[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Nov 26 21:51:48 2017 +0100

    Set version to 0.6.0-SNAPSHOT

[33mcommit 01079d559cba2c61489a88c2266273249b6a2845[m[33m ([m[1;33mtag: v0.5.0[m[33m)[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Nov 26 21:36:50 2017 +0100

    Prepare release 0.5.0

[33mcommit 573baa41a403fcb7efcfdeed4d2c4e5114f9ff29[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Nov 26 18:56:55 2017 +0100

    Added new IntelliJ folder structure to default ignores for DontIncludeTests *sigh*

[33mcommit 9dbe0620371a515b7848a190b401c79431495fec[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Nov 26 18:30:40 2017 +0100

    Fix wrongly reported "number of violations" where ContainsOnlyCondition is used. This is at best a shady fix, since the design, to couple the number of reported violations to the number of failure messages (which can be/are joined on new line sometimes as well), is a bug waiting to happen.

[33mcommit 20ab334650f19a28f34262f279dab1e3fb231117[m
Author: Daniel Götz <daniel.goetz@tngtech.com>
Date:   Sun Nov 26 16:45:05 2017 +0100

    AU-30: Replaced 'ArchUnit' title with small logo, added 'Fork me on Github' banner

[33mcommit 4de14aa9f00d5f214c76f0b81742c0fecca732e0[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Nov 26 14:42:52 2017 +0100

    AU-41: Since jekyll-asciidoc is not whitelisted yet for Github pages, we generate the user guide via Gradle Asciidoctor for now

[33mcommit b3f20ad4876f88e3fd1a4d031369629873c2ea3e[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Nov 26 14:19:02 2017 +0100

    AU-31: Added motivation back to navigation, also solved asciidoctor warning, that two level 0 headings were defined

[33mcommit 2377661600bd58fa05c88e9f58615a5ce54dd318[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Nov 25 20:18:32 2017 +0100

    Added finish method to ArchCondition that is called after all check(..) calls were made. Removed workaround where in every check(..) call it was necessary to see, if the object was already recorded before (since now we can just loop over all cycles in the very end and thus avoid duplicates, which also removes the quadratic overhead)

[33mcommit ed8d7838f5bacb6eaebc91679f3654d788d00ef1[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Nov 24 17:52:35 2017 +0100

    Start Jekyll via bundle exec

[33mcommit 58d0a86accbb89db9b11ae27b4b3b4500d619424[m
Author: Hans-Joachim Aho-Mantila <hans-joachim.aho-mantila@tngtech.com>
Date:   Thu Nov 23 22:39:13 2017 +0100

    AU-34, AU-31, AU-34: make user guide visible on page, add link to JavaDoc, fix more links on news page

[33mcommit 1a0a3830b7bc8cdda321b895db550f871b4d04b5[m
Author: Hans-Joachim Aho-Mantila <hans-joachim.aho-mantila@tngtech.com>
Date:   Thu Nov 23 21:47:41 2017 +0100

    AU-31: attempt to fix links

[33mcommit 9f11508aceb946242b000231f43ba8389592218c[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Nov 23 00:41:51 2017 +0100

    Removed obsolete type parameter

[33mcommit e7339590b8cb6d263fd0d3c77b877a90011a2d57[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Nov 23 00:07:50 2017 +0100

    Added state() to @PublicAPI to mark new API I'm not sure about yet as subject to change at any point (the violation handling and extension API has not been sufficiently tested for real world scenarios to commit to it)

[33mcommit 74bdc3e92d4a083e74ef6027437ca35c7b31cd03[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Nov 22 12:38:20 2017 +0100

    Improved Javadoc of AnalyzeClasses

[33mcommit ecfed763b054542b10bfe71eaa9ab55b3ac0ccd4[m
Merge: f0da2b60 6affea15
Author: Peter Gafert <superpete@gmx.de>
Date:   Wed Nov 22 12:36:31 2017 +0100

    Merge pull request #46 from TNG/add_possibility_for_ignores_to_slices_rules
    
    Add possibility for custom ignores to slices rules (freeOfCycles and notDependOnEachOther)

[33mcommit 6affea15abce5b8f216859314f71b7936d07ca25[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Nov 22 12:25:40 2017 +0100

    Added integration test for custom ignores when checking for cycles between Slices

[33mcommit 27095b23ee4849ae27ac5eb4cb7b7c82446a11f0[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Nov 22 12:14:03 2017 +0100

    Rule to check cycles between Slices now allows custom ignores

[33mcommit 0eb914b29045e64aec97af141f0f29a06ef00d63[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Nov 22 00:10:05 2017 +0100

    Refactored SliceRule to be independent of concrete ArchCondition

[33mcommit b243382a775300fae467ecc477cf7161305af8e8[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Nov 21 22:59:16 2017 +0100

    Updated ArchUnitRunner Javadoc

[33mcommit 9e5c682ad15c5199defd4f886bd2ecb4f0695bfb[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Nov 21 22:48:22 2017 +0100

    Pass Priority, even if we can't change it at the moment

[33mcommit f3c5e82d32047a5bbc41666f283226cb6ec2c77b[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Nov 21 22:43:24 2017 +0100

    Removed some bloat

[33mcommit 3b5c0d2d8c2a2b6aa54d1fcace526e42fe8f3b4b[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Nov 21 22:20:57 2017 +0100

    Rule to check independence of Slices now allows custom ignores

[33mcommit 5b2000726e944abc24b7323f67dd784e3fb286ae[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Nov 20 10:43:15 2017 +0100

    Create a dedicated class SliceRule so we can add custom features like ignoreDependency(..)

[33mcommit f0da2b6033c16b228fa29f30f4d499cf3224cd8f[m
Author: Hans-Joachim Aho-Mantila <hans-joachim.aho-mantila@tngtech.com>
Date:   Mon Nov 20 09:02:52 2017 +0100

    AU-39 & AU-40: adapt wording, add description for archunit-example

[33mcommit 2724c524a5064f4687384b296fc00d3c46ea33e9[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Nov 20 00:27:17 2017 +0100

    Improved Cache -> ArchUnitRunner now uses a Guava Cache with soft references for the classes cached by location. cached by test still uses hard references, but is explicitly cleared by the runner after the test class is done. Also improved ProGuardTest, to consider transitive Guava dependencies. Unfortunately that also means, the artifact will be a lot bigger in the end, since more classes need to be retained uncrippled to ensure archunit-junit has all necessary dependencies. This should make it unnecessary, to obtain explicit control over the cache behavior as initially demanded in #45. Instead we now rely on the GC to clean up the imported classes, if the heap runs low.
    
    Resolves #45

[33mcommit fe1b0013cd3b176e948791d6485069b75f134c2d[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Nov 19 15:48:22 2017 +0100

    Improved class file import, where JAR entries (like /java/io) are missing from JAR files. By adding a ClassFileSource for each single class (e.g. jar:file://some.jar!/concrete/Clazz.class), instead of one ClassFileSource per path, the same JAR file had to be opened again and again, wasting performance. Now we just look, if there is a matching entry in the JAR (e.g. import '/java/io' -> rt.jar contains '/java/io/File.class' but not '/java/io' -> import rt.jar with one single ClassFileSource, selecting all JarEntries beneath '/java/io').

[33mcommit 3acdc432ee32e896a252b2c94840956805c857f2[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Nov 18 14:57:06 2017 +0100

    Review of PR #43: Fixed some naming inconsistencies, added an example for that()...simpleName...() and added NamingConventionIntegrationTest to assert the behavior of those examples for the future.
    
    Issue: #41

[33mcommit aa4af77a06ae875241e302204488e5f3e9c07dfd[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Nov 18 14:22:59 2017 +0100

    Fixed integration test loop hole / infrastructure error -> ExpectedDependencies weren't checked for being all matched

[33mcommit 20b3b10e42bbd2a29d59f87b9d5b4afd19ba86ad[m
Author: Hans-Joachim Aho-Mantila <hans-joachim.aho-mantila@tngtech.com>
Date:   Tue Nov 14 08:06:26 2017 +0100

    AU-31 Added a news page
    
    +entry in top menu
    +show 3 latest posts on the front page
    -styling still needs to be done

[33mcommit f75db33b14e7d950ce498809f1b9b034975b2a92[m
Merge: af4debd3 b556a36a
Author: Peter Gafert <superpete@gmx.de>
Date:   Wed Nov 15 01:16:05 2017 +0100

    Merge pull request #43 from SteluHH/feature/ClassesThatExtension
    
    Adds the missing fluent API to finish #41
    
    Resolves #41

[33mcommit b556a36a8784aa8a91e13e5ed6253f3224da0017[m
Author: Stefano Lucka <ich@stefano-lucka.de>
Date:   Sun Nov 12 21:34:11 2017 +0100

    - Added missing Javadoc

[33mcommit f4267965ba39cd529a66a412c1180c9a9f021204[m
Author: Stefano Lucka <ich@stefano-lucka.de>
Date:   Sun Nov 12 21:29:16 2017 +0100

    - Added some example UnitTests
    - Added an example IntegrationTest
    - Polished Javadoc
    
    Issue #41

[33mcommit 6e856d531399185222d1797f3e09fe4698f9c822[m
Author: Stefano Lucka <ich@stefano-lucka.de>
Date:   Sun Nov 12 20:43:50 2017 +0100

    Issue #41
    
    - Implemented ClassesThat for haveSimpleNameStartingWith/EndingWith/Containing and negations
    - Implemented ClassesShould for haveSimpleNameContaining and negation

[33mcommit af4debd37cc64c15db2ddbded94dbb1b63300cc7[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Nov 9 17:03:26 2017 -0500

    AU-40: Added Getting Started to User Guide

[33mcommit b6161a1262dfe36d1ebb3e234bbd83b19ce2b3e7[m
Merge: 2cb69b26 ee7ca1c5
Author: Peter Gafert <superpete@gmx.de>
Date:   Thu Nov 9 14:41:50 2017 -0500

    Merge pull request #42 from TNG/layeredArchitecture_exceptions
    
    Layered architecture exceptions

[33mcommit ee7ca1c5eb10fee372ade8094a45154ff8a99ab0[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Nov 9 14:12:49 2017 -0500

    Added possibility to ignore dependencies when specifying a layeredArchitecture()
    
    Issue: #27

[33mcommit 59456d9006567f57627de35c66a27822f2da8a9d[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Nov 3 23:23:18 2017 -0400

    Added failing integration test for 'layeredArchitecture()...ignoreDependency(..)'

[33mcommit fe7ba58ecffcdc48a90ce1bcf16ac9767f04994d[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Nov 3 23:11:00 2017 -0400

    Add dependency on 'archunit' to make it easier for IDEs to unterstand the Gradle config *sigh*

[33mcommit 2cb69b26473e00bc5b3a7d180597bbfcd37bfa7e[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Nov 8 16:04:23 2017 -0500

    Some minor review changes of simple name conditions:
    - I've removed AndSimpleName, since the only thing with a simple name so far is JavaClass, and I can't think of any other future case
    - I've named everything consistently 'simple name', not 'simple class name', since the existing predicate refers just to 'simple name', and within the syntax, it should be clear that it refers to classes
    
    PR: #40
    Issue: #41

[33mcommit f5fb175084ad69a618ad66f884ef5f5b34b07e0a[m
Merge: cc1465ec b9c83b40
Author: Peter Gafert <superpete@gmx.de>
Date:   Tue Nov 7 19:47:07 2017 -0500

    Merge pull request #40 from SteluHH/feature/hasNameEndingWith
    
    Implement haveNameEndingWith / haveNameNotEndingWith
    Issue: #41

[33mcommit b9c83b4071779bea9092311887227842ae7a0a9d[m
Author: Stefano Lucka <ich@stefano-lucka.de>
Date:   Sun Nov 5 12:58:05 2017 +0100

    Implement haveSimpleClassNameStartingWith - Issue: #41

[33mcommit 1b54f7ff4507cc5b4e9491ba985fbd40ac2ab9f5[m
Author: Stefano Lucka <ich@stefano-lucka.de>
Date:   Sun Nov 5 12:40:31 2017 +0100

    Implement haveNameEndingWith consistently and check against SimpleClassName instead of fully qualified classname

[33mcommit 7d59b476c2c5d8604d98393ceb667f69555d82d8[m
Author: Stefano Lucka <ich@stefano-lucka.de>
Date:   Sat Nov 4 22:44:15 2017 +0100

    Implement haveNameEndingWith / haveNameNotEndingWith for not having the necessity to use a regex for that concern

[33mcommit cc1465ec324724d91ddb3497244d4dcf2a7df9f1[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Nov 3 22:53:53 2017 -0400

    Only exclude @Category(Slow.class) where it's necessary

[33mcommit 6805a57c70b0cc1afed14bbdb9af4ac489e413ab[m
Merge: 27c5b088 e04a9e1e
Author: Peter Gafert <superpete@gmx.de>
Date:   Fri Nov 3 22:37:49 2017 -0400

    Merge pull request #36 from hajotka/interfaces_syntax
    
    Adds syntax for interface predicates and conditions, e.g. classes().that().areInterfaces().should().beInterfaces()
    
    Resolves #28

[33mcommit e04a9e1ee48549b017a5c714c37fd3ee7720f7f8[m
Author: Hans-Joachim Aho-Mantila <hans-joachim.aho-mantila@tngtech.com>
Date:   Fri Nov 3 11:39:22 2017 +0100

    Add examples & integration tests for interfaces syntax

[33mcommit bbbf259bdbbbd87b4ad99a8ef66d8cf0ff175b66[m
Author: Hans-Joachim Aho-Mantila <hans-joachim.aho-mantila@tngtech.com>
Date:   Fri Nov 3 10:29:44 2017 +0100

    Fix examples build by adding missing dependency on archunit test code (examples use @Slow)

[33mcommit b23412a1ce85dcf12fa89103893e7b559adcfd95[m
Author: Hans-Joachim Aho-Mantila <hans-joachim.aho-mantila@tngtech.com>
Date:   Sun Oct 29 14:37:31 2017 +0100

    Fix testcase for access from interface to class & remove ignore

[33mcommit 03099311058b8b304b027292078d4502f28df61f[m
Author: Hans-Joachim Aho-Mantila <hans-joachim.aho-mantila@tngtech.com>
Date:   Thu Oct 19 10:59:40 2017 +0200

    Add interface conditions to ClassesShould

[33mcommit c9b6d9c75d6a198b826d700104f13e395ef74901[m
Author: Hans-Joachim Aho-Mantila <hans-joachim.aho-mantila@tngtech.com>
Date:   Thu Oct 19 10:18:12 2017 +0200

    Add interface predicates to ClassesThat
    
    -should().onlyBeAccessed().byClassesThat().are*Interfaces() does not make sense in Java 1.7, the tests for this are currently @Ignored.

[33mcommit 27c5b0887fcbf641060e563f66487847c1c861dd[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Nov 2 03:44:33 2017 -0400

    Improved LocationProvider -> Now meta info on the current test class can be used to derive the Locations to import

[33mcommit 6c24920ca3c5cb27dce2134e65c44f380d9bbe91[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Nov 2 03:22:25 2017 -0400

    Improved failure handling, if LocationProvider can't be instantiated

[33mcommit 728a3a919c5d5fe11f7209f6740257b6e7bdb1a7[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Oct 28 02:49:01 2017 -0400

    Removed unnecessary dependencies

[33mcommit 8473c38eb33da6889cbf1af6aba7080ff22f95f9[m
Merge: bfb2b48b 8b091a4b
Author: Peter Gafert <superpete@gmx.de>
Date:   Sat Oct 28 02:43:43 2017 -0400

    Merge pull request #37 from TNG/extend_AnalyzeClasses_with_LocationProvider
    
    Extend `@AnalyzeClasses` with custom `LocationProviders`

[33mcommit 8b091a4b897f3ded3c3f20d01ef9a8966a0f856e[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Oct 21 19:37:46 2017 -0400

    @AnalyzeClasses now allows to specify custom LocationProviders, where arbitrary Locations can be declared.

[33mcommit c66bb2e02c54c0d842b6740600c8f14ad0f234c9[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Oct 21 19:19:25 2017 -0400

    ClassFileImporter should use the existing Locations.ofClass(..) logic, instead of some custom resource handling (that possibly skips duplicate classes)

[33mcommit bfb2b48b393f472bc2573dae7f76cfa039514598[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Oct 18 00:21:03 2017 -0400

    Started to create an user guide
    
    Issue: #22

[33mcommit 83a818683a5f1725be8fabdee5748e9867dd0158[m
Merge: 3af1a803 a2d952f5
Author: Peter Gafert <superpete@gmx.de>
Date:   Tue Oct 17 23:41:51 2017 -0400

    Merge pull request #35 from TNG/fix-ArchIgnore_for_rule_libraries
    
    @ArchIgnore should work correctly on ArchRules fields

[33mcommit a2d952f5ddec4a13ef9b7d9d89bed4cdd2f884ad[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Oct 17 23:21:33 2017 -0400

    Added possibility to 'forceIgnore' a test execution from the outside. Now forceIgnore == true is passed, if ArchRules are @ArchIgnore'd

[33mcommit 3af1a803ca42280debd1562276faef44dea1b880[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Oct 10 11:49:58 2017 -0400

    archunit-example now uses @Category(Example.class) to control whether failing example rules are run during the Gradle build. Also added a README.md explaining the module.

[33mcommit 98bfb5fa508f580295d5b03bf80d5f1a5ff4cc66[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Oct 3 20:02:10 2017 +0200

    Simplified test infrastructure a little - it seems unnecessary to maintain a second way, to simulate imports via reflection, since the ClassFileImporter itself is at least as fast as using reflection

[33mcommit ebfa5c723b0b9526dc74b225f0ebf75bcb1a697b[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Oct 2 23:20:05 2017 +0200

    Fixed hole in classes().that().implement(..) / classes().should().implement(..) -> The argument to implement(..) was not enhanced by a check for isInterface. Originally I thought this was unnecessary, since if one does "implement(String.class)" or similar, it's the user's fault. However, in the predicate case, this is not as clear, since the implement(predicate) could match all kinds of classes, and it's important then, to only match, if predicate.and(isInterface).

[33mcommit df1369d8ec96a043b5ec880b3d66e43f7e3e0716[m
Merge: 9fafc908 8b3892cf
Author: Peter Gafert <superpete@gmx.de>
Date:   Mon Oct 2 18:09:10 2017 +0100

    Merge pull request #26 from hankem/enable-gradle-clean-test
    
    add missing gradle task dependencies, enabling to run `./gradlew clean test'

[33mcommit 8b3892cf59cc795616ec1a03776ffe9c1648c7fa[m
Author: Manfred Hanke <Manfred.Hanke@tngtech.com>
Date:   Sun Oct 1 11:15:19 2017 +0200

    finishArchive does assert that the jar can be deleted, since the finishArchive task does not depend on the jar task
    
    This allows to run `./gradlew clean finishArchive' (which actually does not build the jar).

[33mcommit 9fafc90860f6417578f809d2ef0e072881be1e75[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Oct 1 19:32:56 2017 +0200

    Added favicon

[33mcommit e0cf0e2f82e79bbedd56034c327d7bb75555f770[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Oct 1 19:14:05 2017 +0200

    Might cause less trouble in the long run, to publish the image to Docker Hub and reuse it

[33mcommit 1077e891ffa343ab82d8549f1593dc5509830f0d[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Oct 1 18:34:39 2017 +0200

    Adjusted site generation to simpler setup:
    - we don't need to have a separate production build
    - the standard jekyll image seems to be good enough and the size is about the same
    - Gemfile.lock is adjusted to the bundle install with respect to 'gem jekyll' instead of 'gem github-pages'

[33mcommit ca84dc77c68fc7036b573d1d8bc1fec3bb55b1a3[m
Merge: fb298984 9fb777af
Author: Peter Gafert <superpete@gmx.de>
Date:   Sun Oct 1 16:05:01 2017 +0100

    Merge pull request #25 from gernotstarke/master
    
    added shell script to run various docker-compose options:

[33mcommit 8caf9f6df10b3909ce6416fb93a1464bb3aa1bc4[m
Author: Manfred Hanke <Manfred.Hanke@tngtech.com>
Date:   Sun Oct 1 11:21:09 2017 +0200

    remove 'assemble.dependsOn removeDuplicateThirdParty', which is already covered transitively
    
    assemble depends on signArchives,
    which depends on finishArchive,
    which depends on removeDuplicateThirdParty (since the previous commit)

[33mcommit 7be250c3120d73d42bcf26d675aa1f6ddc88d6d9[m
Author: Manfred Hanke <Manfred.Hanke@tngtech.com>
Date:   Sun Oct 1 10:26:09 2017 +0200

    add explicit dependency of :archunit-junit:finishArchive on :archunit-junit:removeDuplicateThirdParty
    
    In this case, it is again sufficient that :archunit-integration-test:test depends on finishArchive only,
    i.e. the last change  of archunit-integration-test/build.gradle could be reverted.

[33mcommit 7739285ea7c5992bd78b234216d605d58a2801bf[m
Author: Manfred Hanke <Manfred.Hanke@tngtech.com>
Date:   Sat Sep 30 18:43:31 2017 +0200

    add missing gradle task dependencies, allowing to test the project using `./gradlew clean test'

[33mcommit fb298984bfe578c4453d00d7034ea991c80dbe65[m
Merge: 561c57e5 dceca432
Author: Peter Gafert <superpete@gmx.de>
Date:   Sat Sep 30 17:19:46 2017 +0100

    Merge pull request #24 from hankem/number-of-violations
    
    failing rules also show how often a rule was violated

[33mcommit 9fb777afc1fdfd7c9c8bcc2ff2c93048e6fbc3ab[m
Author: GernotStarke@MadZorg42 <gs@gernotstarke.de>
Date:   Sat Sep 30 17:59:24 2017 +0200

    added shell script to run various docker-compose options:
    
    (b) build a custom docker container for archunit
    (d) local development, serve on 0.0.0.0:4000
    (p) generate html source once, then exit (using production _config.yml)

[33mcommit dceca4321ea297553e6004e77f07fff65205c554[m
Author: Manfred Hanke <Manfred.Hanke@tngtech.com>
Date:   Sat Sep 30 17:52:26 2017 +0200

    add unit test that failure report contains number of violations
    
    as suggested by codecholeric on https://github.com/TNG/ArchUnit/pull/24

[33mcommit 561c57e537743f940d093d6075eed234e23d5b33[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Sep 30 16:56:50 2017 +0200

    Add the github-pages gem again, since the page doesn't build anymore

[33mcommit c81bceea2a544c301d920c38ff0d1fb1c7fe60a1[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Sep 30 16:02:50 2017 +0200

    Deactivate Daemon for CI builds

[33mcommit 1efd35c4335dd2e3ca3338d6e7362206aac2b120[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Sep 30 15:42:51 2017 +0200

    Added first frame of ArchUnit site to /docs

[33mcommit 88dbb4173ca17eef0261fcb7b2abd1ca67acf984[m
Author: Manfred Hanke <Manfred.Hanke@tngtech.com>
Date:   Sat Sep 30 10:44:33 2017 +0200

    failing rules also show how often a rule was violated

[33mcommit e4068b618389a7d92710e0ad5c71201cf6d7b621[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Sep 17 21:38:46 2017 +0200

    Added CONTRIBUTING.md and code formatters. Also reformatted all code accordingly to the adjusted code style.

[33mcommit 19ce714d88c03ad18b53243feef42caf2e44df90[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Sep 17 19:02:20 2017 +0200

    archunit-integration-test should bring its own archunit.properties

[33mcommit 0726bf2cb69cfc9ffd992858fbad7836aa4f63dc[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Sep 17 18:50:41 2017 +0200

    Extracted archiving logic from root build file. After refactoring, IntelliJ can finally understand the build again :-)

[33mcommit 7f5330f6877a930464c45eb06461f2a6fff013a9[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Sep 17 16:09:25 2017 +0200

    Moved findbugs-excludes.xml to codequality folder

[33mcommit f3c77d892d63a104e289fc2b9140d009b961915f[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Sep 17 15:45:35 2017 +0200

    Updated Gradle version to 4.1

[33mcommit 706b66ccd2529db04eb6dc40bcc4c1d10d7bcd93[m
Merge: e84fed7a cf5bf83b
Author: Peter Gafert <superpete@gmx.de>
Date:   Sun Sep 17 13:31:06 2017 +0100

    Merge pull request #21 from TNG/make-layered-architecture-check-implementing
    
    Make layered architecture check implementation of interfaces

[33mcommit cf5bf83bd245e120dab485905c1c1043d9b739da[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Sep 16 21:12:06 2017 +0200

    Made JavaClass.Functions.SIMPLE_NAME deprecated, as it is the only function that represents a simple pipe to a method and is not named like the full method name in capitals.

[33mcommit 0f3d915e9b5992182755bdc95d092ff6499eb46f[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Sep 16 20:50:16 2017 +0200

    Made LayeredArchitecture use AllDependenciesOnClassCondition. I.e. layers are now validated against dependencies, which not only contain accesses, but also inheritance. Note that so far, inheritance of classes was implicitly covered so far anyway, due to the super() call, which is in turn an access, but implementations of interfaces fell through the cracks. In turn, fixed ArchUnit's own layer violation by implementing an interface in core from base (thus the move of HasDescription).

[33mcommit 01800fe958faf11b187d3de5d39c73bcae1093d5[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Sep 15 16:21:43 2017 +0200

    Added Predicates and Functions to Dependency

[33mcommit 7e9ded69b29740f3d7697908c424aa0365d1290f[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Jul 28 18:28:33 2017 +0200

    JavaClasses can now also provide dependencies to them

[33mcommit a55f663f67f4af2f0c4ce6001fddaa6a8e8cd7df[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Jul 28 17:11:21 2017 +0200

    Added implements interface layer violation to example

[33mcommit b1cff591cae31a8c6eef180c2a9b3e964190c4dd[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Jul 28 16:49:38 2017 +0200

    Extended integration tests to also test for extends/implements, when checking for slice dependencies

[33mcommit f8996ada7895ac0d54309d4f87a9871e6f0767af[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jul 23 01:42:15 2017 +0200

    Add explicit dependencies for extends and implements with concrete description (even though extends always demands a super call, thus there also will be an access dependency)

[33mcommit 21df983873e2cc5814c61791f66a32762c41d84d[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Jul 22 18:18:01 2017 +0200

    Make naming of test examples a little less confusing

[33mcommit e84fed7a32dbf515108a0f025f980d81bcd3cb6d[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Jul 19 00:03:48 2017 +0200

    Integrationtests fail randomly, if other tasks modify jar files at the same time

[33mcommit 19450b752cba881eda52d0c32fa41a4db8c052e8[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Jul 18 23:48:20 2017 +0200

    Removed ClassFileImportHelper, since ClassFileImporter should be convenient enough, and it's no good example, if an example uses a custom class within archunit-example to import classes.

[33mcommit 113c4c8ad3245a6cb6bbfe15bcba7f4a77a7ba3d[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jul 16 18:57:03 2017 +0200

    We need build, even if install depends on build, since not every project has a goal 'install'

[33mcommit 3fd324733ad2e5fcac6f273b5c01b8d5d3b032cc[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jul 16 17:53:55 2017 +0200

    Improved integration test -> Spread accesses out between classes to emphasize the 'slice' nature

[33mcommit e9f90e0029cdcfee4b2f8669a8ca45f6e5c84a18[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jul 16 17:49:52 2017 +0200

    Cleaned up slices syntax -> slices().should().notDependOnEachOther() should now filter the dependencies correctly, too. Added integration test to ensure the behavior

[33mcommit b7dc2a357380d213a4a9ecacf9d393de669cd7d1[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jul 16 15:47:46 2017 +0200

    Minor - make test easier to debug and don't use mock(ArchCondition.class), since it behaves unrealistic (e.g. getDescription() returning null)

[33mcommit e0b61dae0db8e43f0f1c7e069a82cf3ebcdb2259[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jul 16 00:09:20 2017 +0200

    Dependency should also allow accessing the origin class

[33mcommit 6d75875f221aad6e3a829ce440a41b9fd95f3334[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Jul 15 23:56:08 2017 +0200

    Fixed slices syntax. Using that(predicate) would return GivenObjects<Slice> instead of GivenSlices, so it didn't allow should()... anymore, but only should(condition).

[33mcommit c9a7ec5b948a8ee3cc3c884d8919b47c1fda970b[m
Merge: 870c0f88 10d6cf40
Author: Peter Gafert <superpete@gmx.de>
Date:   Sat Jul 15 22:20:13 2017 +0100

    Merge pull request #18 from TNG/add-extension-support
    
    Add extension support

[33mcommit 10d6cf400b9c5e5efd87fdc2dce9bf758e2ec456[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Jul 15 23:11:57 2017 +0200

    Updated Gradle to 4.0.1

[33mcommit ab9033210a06f4714ca95a4f3e70c6023a5b4516[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Jul 15 19:36:18 2017 +0200

    Extended README.md, added debug statement for disabled extensions.

[33mcommit 1636f7b2b3a8b1e19ced66be2805ea4236fcecc7[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Jul 15 19:07:29 2017 +0200

    Added dispatching to extensions on rule.check(), integration test, and guard, that only enabled extensions (extension.${my-extension}.enabled=true) are called on rule evaluation.

[33mcommit f3eb1b21a96c4114b73f3f99eeca583f9dba9b52[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Jul 15 17:31:47 2017 +0200

    Added support for configuring extension properties via archunit.properties, by prefixing them with 'extension.${extension-id}'

[33mcommit b97f3c18cabe1eb784a96ca38e22432cabbeb5d0[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Jul 15 14:10:06 2017 +0200

    Added ArchUnitExtensions to dispatch evaluated rules to single loaded extensions

[33mcommit d6cb844e5651d62921e52ca70dba88cab77037c4[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Jul 15 11:17:26 2017 +0200

    Added logging to extension loading.

[33mcommit 56ed5ed2154452db0341efc1b95955bdf5cd1cba[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Jul 14 18:13:49 2017 +0200

    Added simple extension loader that caches loaded extensions and verifies basic constraints, like unique identifier

[33mcommit 870c0f88e588fab29f10b4044d71e5647c0588e6[m
Merge: cd4fe5ec 2028f5c2
Author: Peter Gafert <superpete@gmx.de>
Date:   Sun Jul 9 23:13:25 2017 +0100

    Merge pull request #16 from TNG/enable-3rd-party-to-handle-violations
    
    Enable 3rd party to handle violations

[33mcommit 2028f5c296f74ed49b73a5e6a545d5fcfc4edbe0[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jul 9 23:44:09 2017 +0200

    Added integrations tests for access handling

[33mcommit b41320827c950614f9c424940bdc1186b1408d6b[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jul 9 21:29:53 2017 +0200

    Changed handling approach
    - support for multiple corresponding objects (since some violations are created by a set of objects)
    - handling is now further dispatched to ConditionEvent, to enable different events to report themselves differently

[33mcommit cd4fe5ec19ae67f07bb633d2374cf0e9bf173785[m
Merge: 323780fa d5bf94c5
Author: Peter Gafert <superpete@gmx.de>
Date:   Sat Jul 8 18:37:40 2017 +0100

    Merge pull request #15 from maeh2k/master
    
    Add ArchUnit logo

[33mcommit d5bf94c5652ba26e8c58408a59cee5de6ad8bb80[m
Author: Philip Schmitt <philip.schmitt@outlook.com>
Date:   Sat Jul 8 14:25:19 2017 +0200

    Add ArchUnit logo to repository and README.md

[33mcommit 5124be38e32ba1aaa884fd0ca342d7e04f968ddc[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jul 2 18:19:33 2017 +0200

    Made integration test infrastructure more generic, so it can be used to test correct dispatching of violations to supplied violation handler.

[33mcommit 886db7e1a914bc9dce3951c6d78c850ff9cd22d2[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jul 2 17:33:32 2017 +0200

    ExpectedViolation may as well reside in archunit-integration-test, since it's only used from there

[33mcommit 00a96f5c2c0b52455dce3dfc596e457317300a89[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jul 2 17:22:38 2017 +0200

    EvaluationResult now offers handleViolations(handler) as well

[33mcommit d026bfa289b11c994bf72674396b44b102b4634d[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jun 25 23:29:29 2017 +0200

    Added infrastructure to retrieve information about violations. One can now pass a ViolationHandler to ConditionEvents and handle all events matching the respective handler method. I.e. one could supply a ViolationHandler<JavaAccess<?>> and would get all events passed that are reported with respect to a JavaAccess<?> (i.e. have a corresponding object of type JavaAccess<?>)

[33mcommit f484b085071d351565b683e81fceb7606c3834b2[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jun 25 21:23:30 2017 +0200

    Fixed type shadyness: ConditionEvent was generically parameterized with parameter <T>, however, that parameter got lost by some raw conversion in the middle, thus the parameter was always useless, by the time one could access it from ConditionEvents. The parameter T would really only have made sense, if in the end it would have resulted in ConditionEvents<T>, where all events have the same type of corresponding objects. This on the other hand would have made it impossible, to add a ConditionEvent<JavaMethod> to the events, so it would have caused another refactoring, aggregating all ConditionEvent<JavaMethod> into one ConditionEvent<JavaClass>. In the end I decided that the type parameter wasn't worth the trouble, nor the bloat, and removed it (the future will reveal, if this was the right decision).

[33mcommit 323780fa1add3ceedf1a583792f49fba0898cd05[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Jun 22 00:33:32 2017 +0200

    Think we have to ensure, that runMavenTest will also run after install, not just after uploadArchives, since we test it in combination with install on Travis CI

[33mcommit 1f79c4069dcfd9fce4925662317039a3ef36f898[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Jun 22 00:15:26 2017 +0200

    Seems ok to run -PallTests on Travis, if the number of forks is explicitly reduced for tests

[33mcommit 4054ec6801020c85fd6fc976cb1109a50d230d38[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Jun 22 00:06:18 2017 +0200

    Short test to see, if we can get Travis to run the slow tests. The memory consumption shouldn't be that crazy, so it's somewhat strange, that Travis starts to shoot Gradle Executors...

[33mcommit d9714c41600f289306cdfe3bb382fdb0c7c211ef[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Jun 21 22:21:20 2017 +0200

    Move build-scan config to it's own file, even if it's small. Also only activate build-scan, if -PscanBuild is set (NOTE: We can't run -PallTests on Travis-CI or it will shoot our task for consuming too much RAM :-( )

[33mcommit ce0d722badf40e322f3af10eee498b23880b4d03[m
Merge: 13a962df 4e7660b5
Author: Peter Gafert <superpete@gmx.de>
Date:   Wed Jun 21 20:55:59 2017 +0100

    Merge pull request #13 from wolfs/simplify-build
    
    Simplify build

[33mcommit 4e7660b5109134573ceaffea83953092512433d4[m
Author: Stefan Wolf <wolf@gradle.com>
Date:   Mon Jun 19 10:28:03 2017 +0200

    Activate parallel builds

[33mcommit ec0b7840a3999a571a4573580fe9e3eff35f446b[m
Author: Stefan Wolf <wolf@gradle.com>
Date:   Mon Jun 19 10:02:16 2017 +0200

    Use property to define is asm is repackaged

[33mcommit 51f1a525afd8304da6d54db89da58bb4aff5e96a[m
Author: Stefan Wolf <wolf@gradle.com>
Date:   Mon Jun 19 09:08:03 2017 +0200

    Activate build scans to understand failure on TravisCI

[33mcommit ecd205c7241da1300bcd82276223752369bf41bd[m
Author: Stefan Wolf <wolf@gradle.com>
Date:   Sun Jun 18 23:58:35 2017 +0200

    Update asm license directly to the shadowed jar

[33mcommit 13a962df57e1789f87352a8e475a8918bc17f197[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jun 18 19:11:09 2017 +0200

    Restore DontIncludeTests behavior for Gradle versions < 4.0. Also support other languages like /build/classes/groovy/test for Gradle 4.0.

[33mcommit 23a9e3a5f2ea9cd9c7ba4c104512a6ac0f1a6f5f[m
Merge: d01ce86f 7c47fb3f
Author: Peter Gafert <superpete@gmx.de>
Date:   Sun Jun 18 17:53:37 2017 +0100

    Merge pull request #12 from wolfs/upgradle-to-4.0
    
    Upgradle to 4.0

[33mcommit 7c47fb3fada36511ffa8435ee148fa744ce13bfb[m
Author: Stefan Wolf <wolf@gradle.com>
Date:   Sat Jun 17 23:58:57 2017 +0200

    Upgradle to 4.0
    
    Upgrade build to Gradle 4.0. Note that the location of compiled classes
    changed in Gradle 4.0 from `build/classes/<sourceSet>` to
    `build/classes/<language>/<sourceSet>`.
    I fixed a test with respect to this but don't know if anything
    else is broken.

[33mcommit d01ce86fe4662884fb89869dacd3f66ee26a2132[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Jun 3 18:31:37 2017 +0200

    When a package is imported, we explicitly go through all the Jars on the classpath and search for entries starting with the respective folder names. E.g. import "java.io" -> go through all Jars and look for entries starting with "/java/io/" -> "/java/io/File.class" will be found this way. This resolves #11.

[33mcommit 918803e93d39f886f0400168ed325356d02c8a4a[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat May 27 16:24:35 2017 +0200

    ClassFileImporter can now import varargs paths of type String or Path, as well as Collection<Path>. This resolves #10.

[33mcommit 365066c918b9ac67c1e2322f861a23cc29d0a2db[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat May 27 15:30:01 2017 +0200

    ClassFileProcessor now catches any exception during import and logs an appropriate warning containing the URI of the class file. This resolves #9.

[33mcommit fbca4c92c2432ce26d35e33295a530861dbb2c21[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat May 20 19:20:58 2017 +0200

    JavaAccessCondition now ignores accesses from self to self. In particular, self-accesses don't have to be manually ignored anymore, when onlyAccessedBy().. is checked. This resolves #3, since for any smarter ignores, it would be necessary to talk about better fitting objects, than just classes filtered by any criteria.

[33mcommit ebdc4a7b64071d3726d108eb45388b2043f10f8a[m
Merge: 233b9344 d64616e6
Author: Peter Gafert <codecholeric@users.noreply.github.com>
Date:   Sat May 20 16:55:44 2017 +0100

    Merge pull request #8 from TNG/enable-to-import-multiple-jars
    
    Allows to import multiple Jars at once, resolves #7

[33mcommit d64616e61084288026277091fd8bc6e7cbbcc179[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat May 20 17:43:37 2017 +0200

    Added possibility to import JarFile... and Iterable<JarFile> via ClassFileImporter

[33mcommit 233b9344c2942653e74c4c551b25b39b4fe145f1[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat May 20 14:58:18 2017 +0200

    Improved Maven smoke test, to also ensure the hierarchical evaluation of doubly nested ArchRules.in(..)

[33mcommit 0df1aa7a6c9370aed3b5bc376b75c752ad18eafa[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri May 19 22:00:16 2017 +0200

    Use assertThatClasses(..) instead of assertThat(namesOf(..))

[33mcommit 40e33011fbb14525fac9fbf5997fcf0129329015[m
Merge: a506925d 077bb08d
Author: Peter Gafert <codecholeric@users.noreply.github.com>
Date:   Fri May 19 20:57:26 2017 +0100

    Merge pull request #6 from storozhukBM/isEnum_support
    
    isEnum support in JavaClass

[33mcommit a506925dde0f8750cc29471fc1ab1f9fd605a46b[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri May 19 18:32:31 2017 +0200

    ACCESS_STANDARD_STREAMS should only be violated, if exception.printStackTrace() is called without an arg, since providing a custom Print(Stream/Writer) does not necessarily write to standard streams

[33mcommit 077bb08d41db676a99aa3ba6a5cdb1455be817a6[m
Author: bstorozhuk <storozhuk.b.m@gmail.com>
Date:   Fri May 19 19:29:25 2017 +0300

    isEnum support in JavaClass

[33mcommit c8d383328bd75e952c014abc84ccce42453e43ad[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Apr 27 18:46:17 2017 +0200

    Added Maven Central and license badge to README

[33mcommit 95513c67c17cb617689af182088f83c2c58142a8[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Apr 27 18:04:52 2017 +0200

    Separate code quality aspects from main build

[33mcommit 35e01e83eb550acc41d8e71980d53937d8262d17[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Apr 27 17:48:34 2017 +0200

    Added Travis-CI tag to readme

[33mcommit d107ed282f33bd3ebec7dcd8e58ca614c96b9ba5[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Apr 27 17:12:26 2017 +0200

    Removed unused imports

[33mcommit 1ff9c76b33f458452e62215c0603a7262156562a[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Apr 27 17:11:55 2017 +0200

    Added .travis.yml

[33mcommit d3f5c1a4675b26e544bd754339f4ffb80d36a04f[m
Merge: a8b20915 b6796ea0
Author: Peter Gafert <codecholeric@users.noreply.github.com>
Date:   Thu Apr 27 13:23:14 2017 +0200

    Merge pull request #2 from TNG/allow-multiple-import-options
    
    Allow multiple import options and be more restrictive within ImportOption.DontIncludeTests

[33mcommit b6796ea0ebb86894460e4410dfa9a053c85aee0e[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Apr 27 13:00:51 2017 +0200

    Migrated @AnalyzeClasses(importOption = ...) to an array @AnalyzeClasses(importOptions = {Options1.class, Options2.class}), since the ClassFileImporter supports this API anyway, so it is more consistent in the end, and more useful, e.g. if one wants to combine DontImportJars.class and DontImportTests.class.

[33mcommit 9ade9859c447bcde56b656313b780aeffc3840f8[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Apr 27 12:06:40 2017 +0200

    Added Javadoc to ImportOptions

[33mcommit 56db075510a3ed2be169d1096e302867597aa42b[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Apr 27 12:00:14 2017 +0200

    Hardcoded separator '/' was actually correct, since we are dealing with URIs (this was actually one of the motivations, to convert every input to URI as quickly as possible, to enable consistent treatment of locations)

[33mcommit a8b209152138a0714f7ad84daf258704c7f2994a[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Apr 27 00:25:31 2017 +0200

    Made ImportOption.DontIncludeTests use the correct File.separator, so it should work on Windows, too, as long as conventions of Maven or Gradle are adhered to

[33mcommit 7566cb217ef8be68046f4f3ba6aede2dd0479da6[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Apr 27 00:26:49 2017 +0200

    Increase version to 0.5.0-SNAPSHOT

[33mcommit 05786302861fc4446edeff4f049cead059e512a7[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Apr 23 22:47:34 2017 +0200

    Added LICENSE.txt to make it easier for Github to detect the license

[33mcommit 5a7f51f7ffea42fe9c50b2dd29b08c979d2e7ffd[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Apr 23 21:46:28 2017 +0200

    Added TL;DR section to the beginning of README.md, to get a quicker start

[33mcommit e653f3fe4f2f22f1c7190f09cad1624be10ebd00[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Apr 23 13:19:09 2017 +0200

    Removed ExpectedViolation from production artifacts, since it's @Internal anyway, and the chances, that an user wants to 'test drive' architecture rules is pretty slim

[33mcommit e83487b98c9f4aa999ba758f84e5d8bce8e02525[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Apr 22 21:32:06 2017 +0200

    Made maven-smoke-test configurable, which remote repository is used, TNG Nexus or Sonatype Nexus

[33mcommit 7db31ffaf2b9fde66c93628e9f3de05016473290[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Apr 22 21:07:29 2017 +0200

    Applied suggestions by hankem -> Fix Javadoc, improve/fix README.md

[33mcommit 43b8f839040482d3d249687ce3a6d8b884a68b20[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Apr 22 18:27:39 2017 +0200

    Added signing and publishing to sonatype

[33mcommit a2ea3cdeb5ab057a268cb6bc63e9e3209bf9c6fc[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Apr 21 10:32:21 2017 +0200

    Renamed areNamed to haveFullyQualifiedName, because the method name was ambiguous

[33mcommit fa6e0648dfd1621df4f01fb6cacdc0e155f04316[m
Author: Daniel Götz <daniel.goetz@tngtech.com>
Date:   Fri Apr 21 10:15:00 2017 +0200

    fixed typo in README.md

[33mcommit 3f0b7861a7c09489b0828d160e4068ff4b7307d9[m
Author: Daniel Götz <daniel.goetz@tngtech.com>
Date:   Fri Apr 21 09:58:24 2017 +0200

    fixed some typos in README.md

[33mcommit 3b4d3e8f9b639e807f362ad9e5f77a820ea4c0d2[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Apr 20 15:44:29 2017 +0200

    Added test for package import

[33mcommit 6b79c733c792143c8551a121c9430a470eea4cd6[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Apr 19 22:22:46 2017 +0200

    ASM's BSD license is now also added to pom.xml, where ASM is repackaged

[33mcommit 8951d6afc0a62eaf65dbb0dff0d452e104a443d4[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Apr 19 19:52:46 2017 +0200

    Configured ASM license to be added to any JAR that relocates org.objectweb.asm

[33mcommit 39ac875e4e1594179de33108f27680f7362f2354[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Apr 19 14:26:33 2017 +0200

    Added interfaces to return value of JavaClass.getDirectDependencies()

[33mcommit 8ff045d7579aca2bd25cb9e943f3bdccc1df56b6[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Apr 17 22:32:16 2017 +0200

    Fixed outdated JavaDoc

[33mcommit 0a36a5ce50e17f9f03f0bfe53a936ef9d80abace[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Apr 17 21:48:25 2017 +0200

    Added Sources and JavaDoc JAR

[33mcommit 477444b11aed5607f52ae648c91d844fc98ca044[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Apr 17 21:32:24 2017 +0200

    Ignore unsafe warning, since it's actually safe

[33mcommit 415f61b675dd67f9fc8a7b722194df9c9b00e827[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Apr 17 14:50:33 2017 +0200

    Added licenses (ArchUnit itself, ASM and Guava) and license headers to all production files.

[33mcommit 32ad668aeff302524dedd382d910a8dc37a769a2[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Apr 15 17:21:19 2017 +0200

    Added isAnonymous() to JavaClass

[33mcommit 4b0edd17042e0d09656da165c15f5b89552e973b[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Apr 15 16:22:38 2017 +0200

    Added onlyBeAccessed().byClassesThat(predicate) to syntax

[33mcommit 1a2f8153ef59af5b2f9fc42594f872639065b19e[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Apr 15 16:15:25 2017 +0200

    Added accessClassesThat(predicate) to syntax

[33mcommit c25a226401ad45a55f2b67673a1e2b946699e120[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Apr 12 19:11:52 2017 +0200

    Added or() and or(predicate) to given-syntax (i.e. classes().that().arePublic().or().areProtected()). Also extended GivenSlices and included slice rules into RandomSyntaxTest, making original RandomSyntaxTest reusable as abstract base class.

[33mcommit 050110f7674a330a21cb4e4e72dcef4ea0817f3d[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Apr 12 13:56:52 2017 +0200

    Added and() and and(predicate) to given-syntax (i.e. classes().that().arePublic().and().haveModifier(FINAL)). Without combination of filter predicates, the API would not be powerful enough, for typical daily use cases.

[33mcommit 7885e35730b3655cf7b1396947985d6bc398465b[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Apr 12 01:24:11 2017 +0200

    ClassResolver implementation can now be configured via ArchConfiguration. This allows great flexibility, how to resolve missing dependencies during import. Also added a third ClassResolver, SelectedClassResolverFromClasspath, which provides more flexibility to just resolve some packages via classpath, and others not (e.g. skip JDK classes, but take dependencies from own app).

[33mcommit f9a5c9516d57b39dce66c0eb92af39ca329658e4[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Apr 11 18:03:38 2017 +0200

    Move resolver specific classes to own package

[33mcommit 0b24551106909b6dc11299b58ac0d157a839b784[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Apr 11 17:03:56 2017 +0200

    Fixed tests that were excluded from normal gradle build, and thus slipped through

[33mcommit edd17e2c4dd6b410a82a9186aded4851ef028cf4[m
Merge: 1c0a9808 8fa8d239
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Apr 11 16:50:47 2017 +0200

    Merge pull request #8 in TNG/archunit from restructure-core to master
    
    * commit 'a7c054e63446fd9d8b141d1f93dba69dae2e0378':
      Created one public creation context within ..domain.., marked as @Internal, added @PublicAPI to make clear, which public access points are meant for which way of use. Added architecture test, asserting correct modifiers and visibility, fixed violations.
      Moved ArchUnitArchitectureTest to archunit-integration-test, since it should really run over all production code (including archunit-junit), and we can use JUnit support then.
      Moved domain classes to a subpackage core.domain. Added architecture test to ensure, that the only references from domain to importer are to DomainBuilders. This is a dependency on purpose, to ensure that domain objects have no public way to be constructed (DomainBuilders may be instantiated package privately, within .importer., the only way to create a domain object is by supplying a 'DomainBuilder')
      Guava better belongs to package .base. since they are used from different scopes, core, lang, library. Furthermore AccessContext might as well live within DomainObjectCreationContext, because that's exactly the super context within it is used.
      Moved import related classes to a new package 'importer'. Introduced new annotation @Internal, because the restructuring will make it impossible to really keep everything package private, that should be :-(
      Move builders to "poor man's package" DomainBuilders, where we can make them package private again, once the importer was moved
      Move builders out of domain types
      Move ValueBuilder into JavaAnnotation.Builder

[33mcommit 8fa8d239ef6c179257c90188b90be1371ffbc74f[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Apr 11 16:40:41 2017 +0200

    Created one public creation context within ..domain.., marked as @Internal, added @PublicAPI to make clear, which public access points are meant for which way of use. Added architecture test, asserting correct modifiers and visibility, fixed violations.

[33mcommit 04031f9d9d4093bc3d44bbd5fcbf5d9b15289bb2[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Apr 10 18:54:40 2017 +0200

    Moved ArchUnitArchitectureTest to archunit-integration-test, since it should really run over all production code (including archunit-junit), and we can use JUnit support then.

[33mcommit 28eb8d948d053c2f0fd0dfdc555cbb74e6238cea[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Apr 10 17:46:07 2017 +0200

    Moved domain classes to a subpackage core.domain. Added architecture test to ensure, that the only references from domain to importer are to DomainBuilders. This is a dependency on purpose, to ensure that domain objects have no public way to be constructed (DomainBuilders may be instantiated package privately, within .importer., the only way to create a domain object is by supplying a 'DomainBuilder')

[33mcommit aa399d821fd430ea8573ea257b22eafe8729858c[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Apr 10 16:38:47 2017 +0200

    Guava better belongs to package .base. since they are used from different scopes, core, lang, library. Furthermore AccessContext might as well live within DomainObjectCreationContext, because that's exactly the super context within it is used.

[33mcommit 567c18772a86a6da8783f37e2027a17f4e69897c[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Apr 10 16:17:03 2017 +0200

    Moved import related classes to a new package 'importer'. Introduced new annotation @Internal, because the restructuring will make it impossible to really keep everything package private, that should be :-(

[33mcommit 0c2d05a340835d2781e6409d6b4db6b9ea08dff3[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Apr 9 10:31:17 2017 +0200

    Move builders to "poor man's package" DomainBuilders, where we can make them package private again, once the importer was moved

[33mcommit a0b0cda372aa60a97ab39fff43bf41db7f4e3a64[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Apr 9 10:17:00 2017 +0200

    Move builders out of domain types

[33mcommit 36a8e10d0be843578cc36e5bc0658f4b6655c252[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Apr 9 09:56:29 2017 +0200

    Move ValueBuilder into JavaAnnotation.Builder

[33mcommit 1c0a9808a947dba8ccac29570280db4f0119bebd[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Apr 9 00:56:43 2017 +0200

    Split ClassResolver into ClassResolver (to resolve the actual URI to import) and ClassUriImporter, that can import any URI. It's thus easier to supply custom ClassResolvers, because by ClassUriImporter, ArchUnit supplies a consistent interface to do an import of a JavaClass from any URI and the custom implementation just needs to take care, how/whether to resolve the concrete URI for the requested type name. This opens the next step, to make custom ClassResolvers supplyable via archunit.properties.

[33mcommit 1f9e30a5964360b1b1d044c950dd4b7bbf37acad[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Apr 8 23:49:38 2017 +0200

    Simplified ClassResolver. In fact the argument ImportedClasses.ByTypeName was obsolete for a long time, since the flow was always contain(..) -> take it, else -> resolve(..), which is exactly what getOrResolve(..) (former get(..)) did anyway

[33mcommit 1ac29c1333f1f9c205b4e122868891039b8ded86[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Apr 8 18:20:20 2017 +0200

    Add complete set of declaredIn(..) predicates to AccessTarget and JavaMember

[33mcommit ad9a34613457b80fc36967c279d8608359125482[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Apr 8 17:56:34 2017 +0200

    ImportOptions are now applied to every single class file location, so it is possible to filter single files within JAR files, instead of only the whole JAR, like it was up to now.

[33mcommit 3941a0305dbf5f71d2d44540fd7172d49c36a9c7[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Apr 8 17:12:32 2017 +0200

    Switch to URI immediately on entering Location, to be more consistent within FilePathLocation and JarFileLocation

[33mcommit d48ec55546deb2ed5280ab42e58963132528f984[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Apr 8 01:06:59 2017 +0200

    Adjusted readme to new syntax and new features / configuration options

[33mcommit 6fdb545a0288334e8c1486892009d6e584038be3[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Apr 8 00:03:40 2017 +0200

    If we already have the annotation type on the classpath, we might as well immediately return the correctly typed proxy
    a) It should always be more convenient
    b) If someone really NEEDS a JavaAnnotation, he can easily use getAnnotationOfType(type.getName()) or similar

[33mcommit 80dd8d9b62a66dfdfad5b7c7ff5d44fa50d8318b[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Apr 7 23:32:00 2017 +0200

    Added byClassesThat() to should().onlyBeAccessed()... (there is already should().accessClassesThat(), so this seems like a useful and symmetrical addition)

[33mcommit b669279e2873004ad5feeeebb3c1cd169a4f1c2e[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Apr 7 18:12:55 2017 +0200

    Made ClassIsOnlyAccessedByPackageCondition and ClassAccessesAnyPackageCondition more generic

[33mcommit 0c5353a95201f366af001f079ed772af6ac4c22a[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Apr 7 16:19:25 2017 +0200

    AccessSpecification didn't really work out, because accessField seems to belong together with getField and setField, and get().field() / set().field() would just make the API more complicated anyway (for consistency we'd also need call().method(..), etc., but this would IMHO be less usable)

[33mcommit 14f47d1c5a72537f3fd0f9bd27be01085e905ad3[m
Merge: 0e138dce 4e2651b1
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Apr 7 00:45:01 2017 +0200

    Merge pull request #7 in TNG/archunit from consolidate-predicates to master
    
    Added fluent API to specify typical rules (e.g. classes().that().resideInAPackage(..).should()...)
    
    * commit '31bc5afbc8f00ce3ed63a944470e544b770b5391': (60 commits)
      Added because(..) clause to ArchRule, to further elaborate reasons for a certain rule within the rule's description.
      Removed CallPredicate, since it had short comings and the functionality should be integrated into the fluent API at some point. All functionality of CallPredicate exists as little predicate pieces, which is maybe a little bit less convenient, but saves maintenance overhead.
      Added that().implement(..) to syntax
      Added implement(..) to syntax
      Added more generic callCodeUnitWhere(..) and accessTargetWhere(..) to syntax
      Added callConstructor(..) to syntax
      Refactor method handling in RandomSyntaxTest to be better extensible
      Added further 'shoulds' for classes, e.g. haveNameMatching(..), beAssignableTo(..), and so on
      Added callMethod(Class, String, Class[]) and callMethod(String, String, String[]) to syntax
      Limit number of public predicates we need to maintain by getting rid of composite predefined predicates (the fluent API should mitigate the need for those)
      Remove inconsistent partial fluent API for method call conditions
      Updated Gradle Wrapper to 3.4
      Added (access/get/set)Field(Where) to syntax
      Added andShould(..) to syntax
      Added orShould() to syntax, extended RandomSyntaxTest to build longer syntax combinations
      Added "orShould(condition)" to syntax, improved OrEvent description (simply adding the description of all events makes no sense for OrEvent, since only the combination of two events causes the violation, thus OrEvent description now joins both violation descriptions using "and" (i.e. item < 5 OR item < 4 => "3 is less than 5 and 3 is less than 4", since only the combination of both violations causes OrCondition to be violated)
      Minor test improvement -> use noClasses.should(..) instead of allClasses.should(never(..))
      Fixed bug where field accesses could not be resolved, if the target was declared inside of an interface
      Type parameter of ArchRules<T> is obsolete
      Return correct subtype from GivenClasses.that(predicate)
      ...

[33mcommit 4e2651b1d47e4bf309bd8498ee9cb08fd63ff844[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Apr 6 18:33:37 2017 +0200

    Added because(..) clause to ArchRule, to further elaborate reasons for a certain rule within the rule's description.

[33mcommit fdfa6730cab7bd960271c6a06a7f3a575455d962[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Apr 6 17:36:34 2017 +0200

    Removed CallPredicate, since it had short comings and the functionality should be integrated into the fluent API at some point. All functionality of CallPredicate exists as little predicate pieces, which is maybe a little bit less convenient, but saves maintenance overhead.

[33mcommit 82e6fe91ad5782231dc10c6f0f7b89eec9ec0db4[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Apr 6 14:50:00 2017 +0200

    Added that().implement(..) to syntax

[33mcommit ced0588e39651ac4d0ad75cd73b9cc3ea668de88[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Apr 6 03:17:45 2017 +0200

    Added implement(..) to syntax

[33mcommit 1472b2171b4451e54cb958b2da5b367e877ad71e[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Apr 5 22:51:51 2017 +0200

    Added more generic callCodeUnitWhere(..) and accessTargetWhere(..) to syntax

[33mcommit 821fdd795d90c9bd1d679a8a5a40c51e08a1c145[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Apr 5 16:26:02 2017 +0200

    Added callConstructor(..) to syntax

[33mcommit d574f1c7cf6efa5217aa11cce7cc8dcd419f649a[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Mar 23 17:45:38 2017 +0100

    Refactor method handling in RandomSyntaxTest to be better extensible

[33mcommit f03e630c47e0c148b869d1f6f490ce329e86f957[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Mar 22 18:46:23 2017 +0100

    Added further 'shoulds' for classes, e.g. haveNameMatching(..), beAssignableTo(..), and so on

[33mcommit 9bc6b442b6d01c6ab5ff4de2e6449d6d701ed972[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Mar 5 23:34:43 2017 +0100

    Added callMethod(Class, String, Class[]) and callMethod(String, String, String[]) to syntax

[33mcommit 244a2ad9076368ec05fbc440021a710f03021aaa[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Mar 5 20:02:00 2017 +0100

    Limit number of public predicates we need to maintain by getting rid of composite predefined predicates (the fluent API should mitigate the need for those)

[33mcommit 456a572306e08d7fb9c4109cd083a82bafabfde8[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Mar 5 19:21:00 2017 +0100

    Remove inconsistent partial fluent API for method call conditions

[33mcommit f21fd20b24604ec0336afc31e629eb5e686f204e[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Feb 28 18:52:13 2017 +0100

    Updated Gradle Wrapper to 3.4

[33mcommit 9b6d6d41ed53a097a710e358c35150f78be22be5[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Feb 28 17:51:31 2017 +0100

    Added (access/get/set)Field(Where) to syntax

[33mcommit b1b7dc586da52d698e96b2cc5e586c4fc3af689a[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Feb 28 16:03:13 2017 +0100

    Added andShould(..) to syntax

[33mcommit 3359c408a5598b9d11c12b1bdd16285a38c0fbf1[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Feb 28 15:19:18 2017 +0100

    Added orShould() to syntax, extended RandomSyntaxTest to build longer syntax combinations

[33mcommit 5ed5e92eaa0c0f0d6b02dc259c8fb25a90ac6b24[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Feb 26 20:07:13 2017 +0100

    Added "orShould(condition)" to syntax, improved OrEvent description (simply adding the description of all events makes no sense for OrEvent, since only the combination of two events causes the violation, thus OrEvent description now joins both violation descriptions using "and" (i.e. item < 5 OR item < 4 => "3 is less than 5 and 3 is less than 4", since only the combination of both violations causes OrCondition to be violated)

[33mcommit 7a1f4ddb04974579433c7ff5792e99cbeeac6e78[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Feb 5 20:28:22 2017 +0100

    Minor test improvement -> use noClasses.should(..) instead of allClasses.should(never(..))

[33mcommit 789d5cc69798f86ec6dc1ff14c5d6cfddf4220a6[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Jan 30 15:34:59 2017 +0100

    Fixed bug where field accesses could not be resolved, if the target was declared inside of an interface

[33mcommit b8c8870521893df56d8920b03d2cc73b67d55914[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Jan 30 14:12:22 2017 +0100

    Type parameter of ArchRules<T> is obsolete

[33mcommit 845409a6120a677d309d7e360437a04c5a9b4248[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Jan 30 13:44:49 2017 +0100

    Return correct subtype from GivenClasses.that(predicate)

[33mcommit 558c083a81962557d82c55d71f6352cba1fc9810[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Jan 30 00:51:17 2017 +0100

    Make RandomSyntaxTest use DataProviderRunner, to show which rules are testet

[33mcommit 3b688d19d2601ce66d0c9a7af110bfb50996bea1[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Jan 30 00:42:13 2017 +0100

    Added most basic 'classes that' predicates to fluent API

[33mcommit 910d027b4f93036b29b1b8ace96222126da8c920[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jan 29 21:02:14 2017 +0100

    Fixed modifiers for nested classes (the access flags of visitInnerClass(..) have to be evaluated to get the correct modifiers, even though the fqn with access flags is also supplied to visit(..))

[33mcommit 3c97a44b3301f576cbe19b5f39d90eaee4d0365b[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Jan 27 23:35:51 2017 +0100

    Consolidated GeneralCodingRules

[33mcommit f2ecd642f25782561b6ca9456117715a559ef774[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Jan 27 23:20:08 2017 +0100

    Added 'setFieldWhere' to syntax

[33mcommit a16f72d7e54d20191572e57e5b1b41a7ef5c2a0c[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Jan 27 19:51:14 2017 +0100

    Added condition.or(condition) to be consistent with predicates

[33mcommit 0cd4f20903f07fa3d92e3b28aa8d244b3975b86b[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Jan 27 13:56:10 2017 +0100

    condition.and(condition) behaves more intuitively now (especially never(condition.and(condition))), because up to now condition.and(condition) was more sth. like condition.join(condition) (just aggregate events)

[33mcommit 782c7eb1bc2c250b6c291c45eb716ad9c8bb092e[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jan 22 00:56:25 2017 +0100

    Added 'areAssignableTo' and 'resideOutsideOfPackage' to syntax

[33mcommit de735275c934eac2f05971a7d47eabcfda64cab0[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jan 22 00:33:43 2017 +0100

    Added 'haveNameMatching' and 'resideInAPackage' to syntax

[33mcommit 695e5cc1d06bb4d9f86189b5add71de8234623fb[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jan 22 00:22:26 2017 +0100

    Predicate descriptions are better reusable, if they don't default to 'is...' or 'with...', etc., but instead supply only the raw stem, that can in turn be enhanced by plain syntax pipes like 'with(name("some name"))'

[33mcommit 06f5d46f9695ab51c5a4b1e79d0872a449e895ca[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Jan 21 23:53:37 2017 +0100

    Fixed some unreasonable possible syntax combinations and added syntax test to evaluate x random rules and check their sanity (description matches, check(classes) doesn't cause NPE, etc.). Also removed the possibility to override parts of the rule (allClasses.that(something).as("overridden")), since it introduces too much unjustified complexity. Instead added rule.as("overridden") to override the complete rule text, if necessary.

[33mcommit 8fdc20eaa2250dbbbd535833fcf05fe4261218c1[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Jan 19 00:45:59 2017 +0100

    Added better API for slices (the two existing rule types, no cycles and no dependencies on each other, can now be created in a fluent way)

[33mcommit 10d47ba3f0c036a20b1339b13154b6899bd77966[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Jan 19 00:27:10 2017 +0100

    Setting a package private field on the condition is somewhat shady, it's better to make intentions clear and enable overriding init(allObjects) for conditions that really need it (like slices cycle condition to initialize the graph)

[33mcommit 0e5d2cf4e42b7373b4e9b47d5d623ba251702838[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jan 15 18:17:02 2017 +0100

    Reintegrated old way to specify conditions into the new way (all(transformer) now returns GivenObjects<..> instead of InputDescription<..>)

[33mcommit 584b7da3420cbdadf560d0aed8e75b9708da05b4[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jan 15 01:46:52 2017 +0100

    ClassesTransformer is now an interface

[33mcommit 84fa828895d9d5644ddd43d2d392d12f9f091584[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Jan 13 19:00:21 2017 +0100

    Rudimentary draft of fluent API that satisfies LayerDependencyRules

[33mcommit 17fa7a969a1f939b5cf1c3c05000c543fe4287de[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jan 8 18:49:04 2017 +0100

    Move Predicate fieldAccessTarget, callOrigin, callTarget  from ArchPredicates to respective .Predicates classes. callOrigin() and callTarget() will probably be replaced by the fluent API and thus we leave them in ArchPredicates for now, same with the syntax elements is(..) and are(..)

[33mcommit f2e02de58873b4e3a926d180aaba69f4a73cae96[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jan 8 00:56:28 2017 +0100

    Move Predicate<JavaFieldAccess> accessType from ArchPredicates to JavaFieldAccess.Predicates and inlined ownerIs(Class<?>)

[33mcommit 92327c36cf47c2c6336babe05687697eec76096d[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Jan 7 18:26:30 2017 +0100

    Move Predicate<HasOwner<JavaClass>> from ArchPredicates to HasOwner.Predicates

[33mcommit 24830c1759ae7488b4b0680f4917386719942e40[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Jan 6 18:26:11 2017 +0100

    Move Predicate<CanBeAnnotated> from ArchPredicates to CanBeAnnotated.Predicates

[33mcommit b366484ea48a9154a4792bc0f03a46a1c1d43349[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Jan 6 18:17:13 2017 +0100

    Move Predicate<JavaClass> from ArchPredicates to JavaClass.Predicates

[33mcommit 0fa4e492d6b30be1d83e630a37a4dec6c3c2f6ac[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Jan 6 17:06:12 2017 +0100

    Make predicate locations within JavaClass consistent -> every Predicate<T> resides within an inner class T.Predicates

[33mcommit 823467a5c074f1b830dd330369395bd566650068[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Jan 6 02:00:24 2017 +0100

    Moved predicates hasParameterTypes(..) to HasParameterTypes.Predicates. Also changed display of parameter types as full type names, instead of simple name + ".class".

[33mcommit dad693f8a19d836a28acdaa1e3cd1ac9202862ca[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Jan 5 23:23:11 2017 +0100

    Added example and integration test for LayeredArchitecture

[33mcommit af019968a11b7480cad8ba9ba8529610191a9409[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Jan 5 19:01:52 2017 +0100

    Narrow usage scope of ..asm..Type, use JavaType instead

[33mcommit ae994b8c04d41422ef6da2de631cbedeacee2afa[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Jan 5 18:15:11 2017 +0100

    Added possibility to just evaluate an ArchRule instead of only being able to check(..) resulting in an AssertionError. Used this to improve the error description of a violated layeredArchitecture().

[33mcommit 2703e1a6c679a1cd299ab976c76975041c2658ab[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Jan 5 14:00:48 2017 +0100

    Moved examples and integrationtests that require archunit-junit to their own package

[33mcommit c069d6c26fecb90b1159db32c148580f85dbc762[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Jan 5 01:40:09 2017 +0100

    Added architecture test for ArchUnit -> existing layer structure is respected. Also added library class Architectures for this, to easily specify a layered architecture.

[33mcommit 1658f8aed197b4a106ef6ce656a9b6ad6023847c[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Jan 5 00:46:41 2017 +0100

    It's better if ArchRule is an interface, so we don't have use the explicit base class "ArchRule" for all library classes. In particular because all a runner or checker really needs, is the check(JavaClasses) method.

[33mcommit 92b2c1d4312d06fa9cc8d4762808f55c67205f9a[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Jan 5 00:17:59 2017 +0100

    Grouped some infrastructure (which is not really core specific) into a new package 'base'

[33mcommit 40e2030b44c10e56563b68ffd0014448a8dc57eb[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Jan 5 00:03:42 2017 +0100

    Added interface HasReturnType, moved withName to HasName and renamed to withNameMatching, since it matches regexes, and added new predicate withName(..) that really matches against the name.

[33mcommit e4073fef454b6b43d9801baf34fd3c2c9676d07e[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Jan 4 23:23:40 2017 +0100

    Added interface HasModifiers and moved predicate there. Also moved function HasOwner -> owner into HasOwner.

[33mcommit 96ec64ff9cc888a3258eb57fb9894b7b371d1bfd[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Jan 4 23:05:18 2017 +0100

    Added interface HasType to unify handling of JavaField and FieldAccessTarget

[33mcommit 7f6caba2f5e383b677a878aaaff5272002779faf[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Jan 4 22:51:08 2017 +0100

    Moved public interfaces that just describe properties of core objects to separate package (due to visibility issues, separating core in different packages is difficult, but these can be public without harm, and thus make good candidates to be grouped in their own package)

[33mcommit 05163988ad985cefc675d2a9999acf798f63c637[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Jan 4 20:21:42 2017 +0100

    Pulled up isAnnotatedWith(..) to AccessTarget (since it makes sense for any member)

[33mcommit 2549bbc41639fd30fe5c1fbdfefae25be4e4896b[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Jan 4 18:12:00 2017 +0100

    Make CodeUnitCallTarget.returnType consistent with JavaCodeUnit.returnType

[33mcommit 405b1f92954dee1b395d5ca6b4e7ac397d65d9f6[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Jan 4 18:02:48 2017 +0100

    Pulled resolve(..) up to AccessTarget

[33mcommit c36e1e36be930f1564081fd087497da4eaa4822d[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Jan 4 17:26:25 2017 +0100

    Decide on common predicate naming convention 'with...': named(..) -> withName(..)

[33mcommit 64b411089c87401d1a4f19a80dcb69e95303a9bc[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Jan 14 22:18:42 2017 +0100

    Fixed bug where empty arrays in annotations would cause an NPE (because no visit method was called). Instead the import of annotations is now more sophisticated:
    - Import default values of annotation methods during method import
    - Enrich JavaAnnotation with default values on build
    - Determine component type for empty arrays from return type of annotation method

[33mcommit be7070e40c5bea7690255a3f7837c4483bc8d030[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Jan 14 16:55:21 2017 +0100

    Default values of methods of annotations are now being imported

[33mcommit 0e138dced65f8bb05946152a54ca737e08b1c180[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Jan 14 22:18:42 2017 +0100

    Fixed bug where empty arrays in annotations would cause an NPE (because no visit method was called). Instead the import of annotations is now more sophisticated:
    - Import default values of annotation methods during method import
    - Enrich JavaAnnotation with default values on build
    - Determine component type for empty arrays from return type of annotation method

[33mcommit 6a27a637f90c1ae8136021cbb75f49afa6b45e57[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Jan 14 16:55:21 2017 +0100

    Default values of methods of annotations are now being imported

[33mcommit e9d0a9ffd5ce25e234223065aafc04aac5f2f1e1[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Jan 4 23:02:31 2017 +0100

    Attempt to fix flaky test where the generated random folder is still sometimes the same twice in a row

[33mcommit ae803023232fa807fb6a5c7f9cb483aba720fa77[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Jan 4 17:23:44 2017 +0100

    .gitignore << 'target'

[33mcommit f65f2ec610a4bc3cc85871d5a9de0d6e480686c7[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Jan 4 17:12:46 2017 +0100

    Removed interface bloat (IsOwnedByClass does not add any value versus HasOwner<JavaClass> except less brackets)

[33mcommit 54661fba05fdaee0914ca37fc5f1ff6c6f61c8aa[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Jan 4 16:46:47 2017 +0100

    Removed redundant predicate

[33mcommit 7f7f39282807b7476fa2a4a97c1bd6ab4dbc8bc5[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Jan 3 23:20:34 2017 +0100

    Added ArchUnit test to archunit-junit to make sure that Guava targets needed by archunit-junit are left alone by ProGuard

[33mcommit a1ee7d72520f9c40c98ff9c32739b749629fd2b1[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Jan 3 19:56:46 2017 +0100

    Added simple Maven smoke test, to check the deployed Maven artifacts

[33mcommit 1a05a62124d60201e2c5751bc24ded5d4d489b85[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Jan 3 17:37:53 2017 +0100

    Only keep members where we really need them (or the size reduction is suboptimal)

[33mcommit d17371798f5a9e6cb5afefb915f4f9bb418652b8[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Jan 3 14:45:13 2017 +0100

    Reduce repackaged dependencies by using proguard to throw out unused Guava classes

[33mcommit 84d723f402fd01fae5f82f0495ffc886d9ba7c50[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Jan 2 00:07:56 2017 +0100

    Added JavaClasses.get(String)

[33mcommit 09446ef87cb58b99489383d475693c3b240172e4[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jan 1 22:59:56 2017 +0100

    Made ClassFileImporter more consistent, to respect import options for url, path and jar the same way

[33mcommit 3977bf052aadc8e188490d3ed18c71a7284f2478[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jan 1 20:36:45 2017 +0100

    Updated gradle-wrapper.properties

[33mcommit 7e8a02c001a15d8bbb60383f491e3b2dc2167afb[m
Merge: 80c06f57 b31438ae
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jan 1 16:24:44 2017 +0100

    Merge pull request #6 in TNG/archunit from Upgrade_Gradle to master
    
    * commit 'e66de9827fc03259be89c748c27c657c28186158':
      Upgrade to Gradle 3.2

[33mcommit b31438ae53dec562f335128ccb326681eb8ff356[m
Author: Jan Schäfer <jan.schaefer@tngtech.com>
Date:   Sun Jan 1 09:27:09 2017 +0100

    Upgrade to Gradle 3.2

[33mcommit 80c06f57829768160cb75b81b2feafd7a32b721e[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Dec 31 16:47:09 2016 +0100

    Added findbugs to archunit and archunit-junit

[33mcommit 6da7c3707de6a56a078fa44b340bc7f27a1fee5a[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Dec 31 00:31:16 2016 +0100

    Make API easier to use by unifying way to specify rules - ArchRule is now flat without children

[33mcommit 6d90036aaa15cbe3b925fe5deb0f18858215dd74[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Dec 30 23:44:11 2016 +0100

    Make API easier to use by unifying way to specify rules - Rename InputTransformer -> ClassesTransformer

[33mcommit 951e12ce7e9dda8b1dd23b8f8a7ba9b9eea6b4c1[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Dec 30 23:40:16 2016 +0100

    Make API easier to use by unifying way to specify rules - Rename OpenDescribable -> InputDescription

[33mcommit 46dce388328ee0968d30c68c3f35778f5b704314[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Dec 30 23:38:41 2016 +0100

    Make API easier to use by unifying way to specify rules - Make ClosedArchRule not extend ArchRule anymore

[33mcommit bf01979bb78401de7461e8d732f7416dc51c640f[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Dec 30 23:35:49 2016 +0100

    Make API easier to use by unifying way to specify rules - finish Condition outside of ClosedArchRule

[33mcommit b7a140fffbbd1b185ea0a9b4e7d5f4c3b69de84d[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Dec 30 23:33:27 2016 +0100

    Make API easier to use by unifying way to specify rules - Decouple ArchRule from ArchRuleAssertion

[33mcommit 6604b71c6901b828a1bde860893f66498d427ed2[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Dec 30 23:25:52 2016 +0100

    Make API easier to use by unifying way to specify rules - Integrate OpenArchRule into ArchRule

[33mcommit 160e6f058f42b84f5c68b74131c1c1a87615f2dd[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Dec 30 23:20:53 2016 +0100

    Make API easier to use by unifying way to specify rules - Move ClosedArchRule inside of ArchRule so we can easier integrate it

[33mcommit e7baad25ae43fec7622f91b8a200fff1851c8779[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Dec 30 23:16:20 2016 +0100

    Make API easier to use by unifying way to specify rules - remove ClosedDescribable

[33mcommit a7147d28f63aa66f8799f929c9dd7d5a516e7d37[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Dec 30 23:11:54 2016 +0100

    Make API easier to use by unifying way to specify rules - remove all(iterable) from ArchRule and only use all(inputTransformer)..check(..)

[33mcommit 1acd3155d7c6293d52bd91b40e4daacb144324b3[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Dec 30 22:51:35 2016 +0100

    Minor JavaDoc edit

[33mcommit 6e719511378ed2a1209ab5847d34ec4dee262a60[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Dec 30 21:21:39 2016 +0100

    Make Md5sum configurable (since it has a noticeable performance impact) and disable it by default

[33mcommit a9b4f27a1eb68486ed489804f740faad6103f5b0[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Dec 30 20:28:25 2016 +0100

    Make Md5sum its own type so we can encapsulate more information (like why an md5 sum is not available for example)

[33mcommit 33b814f211d7568e471fbea0bc8d8907a38bc309[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Dec 30 17:01:13 2016 +0100

    JavaClass Source now stores an additional md5sum, so changes/inconsistencies of the byte code can easier be tracked

[33mcommit 026d0ea3a6dab1871b5e13e6c88a134b6efdaae3[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Dec 30 15:50:47 2016 +0100

    JavaClass now stores the source of import if possible (simple import as fallback obviously has no source, thus types like int.class or Object[].class have no source)

[33mcommit e5feeeed5fbcd1b98181205a35a959ad3c6d50d6[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Dec 29 22:53:42 2016 +0100

    Added simple configuration mechanism with currently one config option: Resolve missing dependencies from classpath, default = false. This should make the import faster by default, and it might be the more reasonable default to only import classes that are explicitly specified.

[33mcommit 741fa322bad0cff1f4473e8e9b65a3bc5165a6ab[m
Merge: 72ef2d57 e0138cf5
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Dec 29 19:44:14 2016 +0100

    Merge pull request #5 in TNG/archunit from big-reflection-kill to master
    
    Import now works even if classes to import are missing from the classpath
    
    * commit 'c09de4fe26f7619817cd8e8d6f481e073e7c7ebc': (155 commits)
      Fixed some analysis warnings
      Sanity check actually takes 1/8 CPU time during performance test, which is not really worth it
      We can skip Class.forName(..) and just resolve the type directly from our class
      String.matches(..) and String.replaceAll(..) are also expensive
      It's sad, but String.format(..) is noticeably slow
      getCaller is possibly expensive -> make sure we only call it once. Also we don't need to handle NoClassDefFound anymore, since we're handling resolving from classpath in once dedicated spot.
      getAll... is possibly expensive (when called extensively), so we do it only once
      Make import resilient against duplicate classes on the classpath
      JavaType class name validation was too strict
      Increased version to 0.3.0-SNAPSHOT, since the core meanwhile changed so much. Also the FIXME is now obsolete, since array type handling is centralized, so tests will definitely fail, if something is broken there.
      JavaClass has now modifiers
      Added reflect back to JavaMember, since it doesn't do any harm now and can be implemented consistently thanks to CallTarget in JavaCall instead of directly using a JavaMember as target (which made problems, when the target was ambiguous and thus reflect would behave unexpectedly)
      Importing classes outside of the classpath works now
      Architecture test finally works
      Resolving super types does not do redundant classForName anymore, ClassResolver thus doesn't need getSuperTypes() anymore and ReflectionUtils can be moved to archunit-junit.
      ASM claims superName == java/lang/Object for interfaces, so we have to add a workaround that removes the superclass to be consistent with the reflection API. Also the simple name for anonymous classes is now consistent with the reflection API.
      Clean up -> IdentifiedTarget was meanwhile obsolete
      Encapsulate all type name aspects in JavaType - Moved all type name logic into JavaType and created specific classes for primitives, objects and arrays. Also moved resolution of classes into JavaType.
      Encapsulate all type name aspects in JavaType - JavaType is now an interface with one implementation
      Encapsulate all type name aspects in JavaType - Move factory methods to inner class so we can make JavaType an interface
      ...

[33mcommit e0138cf59319960c4fc30ddbd5b1b990c6b88e1e[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Dec 29 19:37:41 2016 +0100

    Fixed some analysis warnings

[33mcommit 67668f574c777aca32d188549188f57b5b50df5c[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Dec 29 19:20:45 2016 +0100

    Sanity check actually takes 1/8 CPU time during performance test, which is not really worth it

[33mcommit 41efe8c84ab010f6651ba25342769578d3d11ce5[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Dec 29 19:00:37 2016 +0100

    We can skip Class.forName(..) and just resolve the type directly from our class

[33mcommit f8060cb6552f7f6a0a4e4716e5e9ec3224ec1d39[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Dec 29 18:55:52 2016 +0100

    String.matches(..) and String.replaceAll(..) are also expensive

[33mcommit 8be015d1b18261cedb169e76f98f7f7395bbb20d[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Dec 29 18:36:42 2016 +0100

    It's sad, but String.format(..) is noticeably slow

[33mcommit 5e5b5cadf31a1c9060ed23182e0ffca8b3023025[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Dec 29 18:14:25 2016 +0100

    getCaller is possibly expensive -> make sure we only call it once. Also we don't need to handle NoClassDefFound anymore, since we're handling resolving from classpath in once dedicated spot.

[33mcommit e943f13ec998fbaddec6f891f00abf83673f0be1[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Dec 29 18:00:32 2016 +0100

    getAll... is possibly expensive (when called extensively), so we do it only once

[33mcommit 59b2a44285333bef2b9df8560f467f087a602816[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Dec 29 17:15:46 2016 +0100

    Make import resilient against duplicate classes on the classpath

[33mcommit 2739f1d54d36229b7be64009ec39eda4f3de8e5b[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Dec 29 16:35:20 2016 +0100

    JavaType class name validation was too strict

[33mcommit 8d71e54c143cbeae661edc6665c7f098e811c71b[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Dec 29 16:22:51 2016 +0100

    Increased version to 0.3.0-SNAPSHOT, since the core meanwhile changed so much. Also the FIXME is now obsolete, since array type handling is centralized, so tests will definitely fail, if something is broken there.

[33mcommit fd2a91bf51213b319c6c1482e33fae0a3530a15e[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Dec 29 16:15:39 2016 +0100

    JavaClass has now modifiers

[33mcommit c2c9986bfa08af3f4b7aae188700945d2b6de698[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Dec 29 15:51:56 2016 +0100

    Added reflect back to JavaMember, since it doesn't do any harm now and can be implemented consistently thanks to CallTarget in JavaCall instead of directly using a JavaMember as target (which made problems, when the target was ambiguous and thus reflect would behave unexpectedly)

[33mcommit e53e64b70dda190e4bdee707f253d27ff63cc158[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Dec 29 14:33:16 2016 +0100

    Importing classes outside of the classpath works now

[33mcommit c36059f92ae2f13ce788828b4c620268c76a7d02[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Dec 29 03:30:15 2016 +0100

    Architecture test finally works

[33mcommit 7e79e40241b33154578644b02552bb0cd546859f[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Dec 29 03:03:24 2016 +0100

    Resolving super types does not do redundant classForName anymore, ClassResolver thus doesn't need getSuperTypes() anymore and ReflectionUtils can be moved to archunit-junit.

[33mcommit 2432980216601d0059118dccd342718a02897a69[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Dec 29 01:19:13 2016 +0100

    ASM claims superName == java/lang/Object for interfaces, so we have to add a workaround that removes the superclass to be consistent with the reflection API. Also the simple name for anonymous classes is now consistent with the reflection API.

[33mcommit 68b56729b9a11b027e4f68b72afcad7ba290a6c7[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Dec 29 00:15:39 2016 +0100

    Clean up -> IdentifiedTarget was meanwhile obsolete

[33mcommit 251a317ebbf258236a83617fa1986fff97000080[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Dec 29 00:10:59 2016 +0100

    Encapsulate all type name aspects in JavaType - Moved all type name logic into JavaType and created specific classes for primitives, objects and arrays. Also moved resolution of classes into JavaType.

[33mcommit 6a7f4cfe28fd6d9cbe091dac473352ca3ad6c2a6[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Dec 28 16:56:38 2016 +0100

    Encapsulate all type name aspects in JavaType - JavaType is now an interface with one implementation

[33mcommit b69407712812576142b6ea2abe6e06d7599d0dfb[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Dec 28 16:43:52 2016 +0100

    Encapsulate all type name aspects in JavaType - Move factory methods to inner class so we can make JavaType an interface

[33mcommit 5dc64ab29b097f116e972ac0e2a9a55cd0ba4640[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Dec 28 16:37:19 2016 +0100

    JavaType is the better name

[33mcommit 5107b882b8037c62b30fa7d1c1895f78d97f8e53[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Dec 28 16:34:45 2016 +0100

    Replace JavaType with TypeDetails

[33mcommit 37d14ec774e8df65be7eb55566170723da54cc11[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Dec 28 16:24:42 2016 +0100

    classForName during import is now obsolete

[33mcommit 8192079408772c3e43746bc62571cd4145331f88[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Dec 28 03:17:57 2016 +0100

    JavaEnumConstant declaringClass is now a JavaClass. Furthermore naming of methods of JavaEnumConstant is now consistent with Enum<?>. Handling of array type names is still spread out too much and TypeDetails and JavaType need to be consolidated.

[33mcommit cec40e02275c8eed85fa64b5b2bb1d77d0b1b773[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Dec 28 01:04:53 2016 +0100

    Moved isInterface out of TypeDetails, TypeDetails doesn't rely on java.lang.Class anymore now

[33mcommit b94e86e2b9e6371f57c8124a5f4de826eb68d9e1[m
Merge: fedbb5d9 912fe99a
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Dec 27 23:26:18 2016 +0100

    Moved enclosing class out of TypeDetails

[33mcommit fedbb5d94d2067630cdf635c589babda4ba0ad2a[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Dec 27 17:49:02 2016 +0100

    Move resolving superclass out of TypeDetails

[33mcommit 4f0d758d6580b963c90031ec7ac343b09279e280[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Dec 27 17:05:59 2016 +0100

    Move resolving of interfaces out of TypeDetails: Added recording of interfaces to ImportRecord, removed interfaces from TypeDetails

[33mcommit 48484007a24f65c828f858625e886ebacb12077b[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Dec 27 16:11:42 2016 +0100

    Move resolving of interfaces out of TypeDetails: Keep interfaces as string within TypeDetails

[33mcommit a3c7bd937283b15012e98b78ef652ae3953033c9[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Dec 27 16:07:14 2016 +0100

    Removed usage of JavaType.asClass()

[33mcommit 15c906a022f4b09a589c0a15330d388409825b5a[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Dec 27 02:41:31 2016 +0100

    Added (still failing) architecture test for ArchUnit production classes -> resolving types via reflection should be explicitly marked, so we keep control where resolving types via reflection is actually okay (which is in fact only in the designated ResolverViaClassPath for dependencies and within AnnotationProxy to resolve Enum constants)

[33mcommit f1f2c428d7838b27c7052831e55bbeb0b9def20d[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Dec 26 18:34:58 2016 +0100

    Represent imported types as properties of annotations by JavaClass instead of TypeDetails

[33mcommit 1a325e44915443b0d02d9daf70a9e925624295e4[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Dec 26 18:07:44 2016 +0100

    Remove direct equality assertions to TypeDetails in test

[33mcommit 6a36bb8117cb8bd1accd972cbd641b06cd3701e1[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 25 21:00:28 2016 +0100

    Added ImportedClasses to BuilderWithBuildParameters.build(..), so that JavaMembers can resolve types from the imported context. Thus often TypeDetails was replaced by a full JavaClass. Also fixed shadowJar for testJar, since the testJar didn't contain relocated classes and thus accessing asm.Type caused NoClassDefFoundErrors when running the tests.

[33mcommit 731c50002e8ac72faebfa59a46eb4cee32ac6766[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 18 22:02:45 2016 +0100

    Remove TypeDetails.of(Type) -> classForName(Type.getName()): Record members as builders within ImportContext and complete them right before we process access records, since we need all type information before we can complete members

[33mcommit 24329d181bc9d930b940dc52c18402c4bf3bd6f3[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 18 17:35:56 2016 +0100

    Remove TypeDetails.of(Type) -> classForName(Type.getName()): Delay creation of type details till we have ImportedClasses to resolve from

[33mcommit ff3cf0fec92fc9114e97d82860f6d8574938bf11[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 18 16:15:11 2016 +0100

    Class annotations are now imported without relying on reflection

[33mcommit 6c9b53140af47e98015d0e448dcda4cc29395562[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 18 14:13:07 2016 +0100

    Methods and Constructors are now imported without relying on reflection

[33mcommit 2449472b0ecb05d47f742daadd6f6726f13566b9[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Dec 12 01:54:49 2016 +0100

    Fields are now imported without relying on reflection

[33mcommit 0e9fb63f80ef3bcabc1862b183ba462e5f317352[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 11 19:43:41 2016 +0100

    We can now safely remove MemberDescription and Member type parameters of JavaMember+ and delete obsolete MemberDescription

[33mcommit 60007609e4ca5323781685e6f089429d0392cb77[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 11 19:35:35 2016 +0100

    Pushed MemberDescription + reflection out of JavaMember+.Builder

[33mcommit 9aae59ac4e35403f0ec03c1639667d3da75b89c3[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 11 19:11:45 2016 +0100

    Fixed builder hierarchy so we can always consistently pass a builder as only constructor argument

[33mcommit ff14bf5d50015b9a7b7a933b435a8424509cb50f[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 11 18:42:01 2016 +0100

    Remove MemberDescription - JavaCodeUnit doesn't rely on MemberDescription anymore

[33mcommit 05ac42e679ccf2e1fda40a86b71b0605c94ec0e6[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 11 18:31:41 2016 +0100

    Remove MemberDescription - JavaField getType() now returns TypeDetails, JavaMember doesn't rely on MemberDescription anymore

[33mcommit 14cdbb097f1c867988b9e8802b8150d2a6540d6c[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 11 17:48:48 2016 +0100

    Removed ProcessingContext

[33mcommit 412a835514474eb1b13c0c714fd1bbeb03ecf749[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 11 17:16:42 2016 +0100

    Reduce dependencies on reflection -> remove TypeAnalysisListener from JavaClass, remove CodeUnitRecorder, rely on equals and hashCode of CodeUnit instead (thus it doesn't matter if we create the 'same' CodeUnit several times, to refer to it). Also started to eliminate ProcessingContext.

[33mcommit 2337b20f72fd9eaf2832d040a45bc053208763b3[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 11 16:51:31 2016 +0100

    Prepare removing reflection from import -> Class file import is now separated from ClassFileProcessor so we can reuse it to resolve further needed classes

[33mcommit 4c830f63d3fe9d24c7efb1763ad960883460d0de[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 11 14:46:19 2016 +0100

    Added possibility to resolve multiple matching methods for ambiguous method calls (up to now the JavaDoc was actually a lie). Unfortunately this meant that a simple breadth first search through all interfaces didn't work anymore, we have to explicitly find paths through the interface inheritance, that really connect parent and child.

[33mcommit 3cf0fd57209cf408c1c2625518d0ec70a0840ba1[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 11 13:39:36 2016 +0100

    Resolve access targets lazily

[33mcommit 369d31183e7676174dc00f610986595eb303e664[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 11 13:33:22 2016 +0100

    We will not create a member, if we couldn't identify it in the first place. All elements of the graph must be present during resolution, or we'll skip this call. Had to extend ClassHierarchyPath for this, to be able to deal with paths through interface hierarchies. Also added consideration of interface methods when identifying a target.

[33mcommit 6834b39795532306ef5ee1b719757b42d11c8c45[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Dec 10 23:54:35 2016 +0100

    Replaced modifiable Map<String, JavaClass> by ImportedClasses, where originally imported classes and additionally resolved classes are strictly separated, and resolving is decoupled via another interface (so that we can switch between resolving from the classpath and other ways by configuration)

[33mcommit c4dde4d81a6bc59a928b27109877fa008bf6f8df[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Dec 10 23:09:21 2016 +0100

    Access resolving now works for fields and methods that are accessed via subclass (like foo.getCallsOfSelf() where (B b).foo() and B extends A and foo is defined in A)

[33mcommit 966ec5510e6c6ee14f78b205eb35da93569a4f51[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Dec 10 19:16:44 2016 +0100

    Prepare to resolve accesses to JavaMember lazily. Also the "owner" of the target is now the actual class called, no matter if it declares the target or just inherits it (nevertheless target.resolve() will still provide information about the class actually declaring the target)

[33mcommit b8cc797d3fe135a417abf8d6d30d9f9da92600da[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Dec 5 00:40:59 2016 +0100

    Prepare to remove fields, methods and constructors from TypeDetails

[33mcommit 066e5650f189a72eb944b8dddf5075882cc65918[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 4 23:59:11 2016 +0100

    TypeDetails getSuperClass(), getInterfaces() and getEnclosingClass() now return TypeDetails again, instead of Class<?>

[33mcommit 4c0d791a0ea804cbb71f5e6767f06a6c12cf31ae[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 4 22:34:25 2016 +0100

    Renamed ClassFileImportContext -> ClassGraphCreator and decoupled completion process via interface ImportContext

[33mcommit ca5bf18336bd5d3a2c9632bedb8ed570ad0605c0[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 4 22:22:46 2016 +0100

    Separated recording the import from creating the graph

[33mcommit cdfac2221ebf84d561ac83409e566e67a4b52d0a[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 4 22:09:46 2016 +0100

    Untangle crazy access record class hierarchy: Raw{Member}AccessRecords are now finally obsolete and can be removed

[33mcommit f06e6a94eac253668b89333414b6a5d4ab909db4[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 4 20:38:06 2016 +0100

    Untangle crazy access record class hierarchy: Removed rawAccessRecord.process(), so that we can now safely remove RawMethodCallRecord & co

[33mcommit 66d8c1ebd1de1779aaa9a228388c8e67cdff48d1[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 4 20:12:05 2016 +0100

    Untangle crazy access record class hierarchy: CodeUnit and TargetInfo do more naturally belong to RawAccessRecord

[33mcommit 2b49aee272e910899117d953d8543a0e3e7b2025[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 4 19:57:54 2016 +0100

    Untangle crazy access record class hierarchy: Rename BaseAccessRecord -> RawAccessRecord

[33mcommit 7b82348fe7eeeb2d7955c5226f28d74b98251c91[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 4 19:54:52 2016 +0100

    Untangle crazy access record class hierarchy: Removed obsolete type parameters from BaseAccessRecord

[33mcommit 63cb933002e0bfc228f4ebbe7089d6509712b7a6[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 4 19:23:09 2016 +0100

    Untangle crazy access record class hierarchy: Moved all Processed to AccessRecord.Factory

[33mcommit 8a44d29a3ef8c84531841c020b01a75772aceecd[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 4 18:47:17 2016 +0100

    Untangle crazy access record class hierarchy: Made all *Record*.Processed static and moved them up one level

[33mcommit 1ab0a32e24fef1653d1e47bdd9fd96a3ae76475e[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 4 18:41:11 2016 +0100

    Untangle crazy access record class hierarchy: Inlined BaseRawAccessRecord

[33mcommit 263a268280e0e9358ff3dfded3bec115e96f7bc6[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 4 18:16:19 2016 +0100

    Untangle crazy access record class hierarchy: Replaced "new Builder" by static method

[33mcommit 1e7929e520e10350e5722a771b0a8ef46d593e6d[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 4 18:01:03 2016 +0100

    Untangle crazy access record class hierarchy: Decoupled process from BaseRawAccessRecord and moved utility functions top level

[33mcommit d4d7c15469e9eab8da009ce2229cfa7263b625d0[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 4 17:52:09 2016 +0100

    Untangle crazy access record class hierarchy: Removed BaseRawAccessRecord.Processed and moved common logic to static utility functions

[33mcommit 4a7a5d56d09be5160f883f31fddd6d3a2e861980[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 4 17:29:00 2016 +0100

    Untangle crazy access record class hierarchy: Replace extends BaseAccessRecord by delegation

[33mcommit e27398635ab3bab8ce5e233ed02ee823c540ec91[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 4 17:02:24 2016 +0100

    Added (currently failing) test for import of classes outside of the classpath

[33mcommit ed6bd8fe7fab1c22ae6fd9786e7e480bd7bd1364[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 4 16:33:03 2016 +0100

    Made annotations in JavaClass and JavaMember more consistent

[33mcommit 078c8fade6169b691b9c990e11f4994fc5c347cf[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 4 16:16:48 2016 +0100

    Moved actual creation of JavaAnnotation out of JavaClass

[33mcommit 961c54ebf57029f7adf22e547e20e8b65038a958[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 4 16:07:36 2016 +0100

    Replaced javaClass.reflect().getAnnotation() by direct calls on JavaClass not depending on reflect()

[33mcommit 6cb663d95498b46174c9e37699c319765a42b5c6[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 4 02:49:47 2016 +0100

    Added feature to derive a java.lang.annotation.Annotation from a given JavaAnnotation to make handling of properties easier if the specific annotation class is on the class path

[33mcommit 17ebd3b12d895986eab1050b46e8e4667fdff3b2[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Dec 1 00:37:15 2016 +0100

    JavaAnnotation can't implement HasOwner in a reasonable way, if we want to use it for JavaClass as well (the only common type bound for owner would be AnnotatedElement, which does not bring any benefit to do assertions on)

[33mcommit e5d34fae93f58e4e0ce8e4e6a7a8b1cf5a1acb55[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Dec 1 00:15:51 2016 +0100

    We still need the factory method in a central place to reuse it when we add JavaAnnotation to JavaClass

[33mcommit 5446e4b4854d66d6469a077673f589cdd7dee3cc[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Nov 29 23:22:24 2016 +0100

    Even though array sucks, it's probably less confusing if all annotation properties of type array are represented as array in JavaAnnotation

[33mcommit 9f4e5a5bf95822d537b1f4cdb3959ecb303598c2[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Nov 29 23:02:10 2016 +0100

    Moved reflection Annotation out of JavaAnnotation

[33mcommit 84210590a31e47a5fc2360ef76f39ab5d766f903[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Nov 29 22:10:04 2016 +0100

    replace Class<?> return value in JavaAnnotation by TypeDetails

[33mcommit bf970c8d5f4477bf446729168967657262080351[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Nov 29 21:57:21 2016 +0100

    Removed obsolete type parameter of JavaAnnotation and obsolete hashCode variable inside of JavaMember

[33mcommit a571f7e2002641b2392ad352f2dc32841f604307[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Nov 29 21:54:29 2016 +0100

    Moved creation of JavaAnnotation out of JavaMember

[33mcommit 4e24eee42cffdfee04c05d1447e3a676fabc2c8f[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Nov 29 21:48:08 2016 +0100

    JavaAnnotation now hides the wrapped reflection Annotation, duplicated code will naturally vanish when the refactoring proceeds

[33mcommit 1d951828f52ef9c13ceb91128c55845402da8495[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Nov 19 15:16:16 2016 +0100

    Removed equals and hashCode from the reflection representatives. JavaClass, JavaMethod, ..., are only constructed by the core, and the core should assert uniqueness of each class and thus method, field, ... Allowing the comparison of different JavaClasses as equal by representing the same type, only invites bugs and confusion.

[33mcommit b33e77b240aa7c514011584cb941a9efe92e7106[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Nov 13 22:05:06 2016 +0100

    Instead of representing an access target  by a Java{Field, Method, Constructor} we need a different concept (now named *Target), to deal with the possibilities that there is not this one identifiable target (up to now a new method was created for this, but this needs to be changed, it's not modelled correctly)

[33mcommit 1e0048a6508520959033164378ad028c18028337[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Nov 5 20:32:05 2016 +0100

    Replaced some more Class<?> by TypeDetails, specifically javaMethod.getParameters() and javaMethod.getReturnType()

[33mcommit b67e7c21d9a1e75837037fabb7890423894373fd[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Nov 2 18:53:45 2016 +0100

    Removed Method/Constructor field from CodeUnit

[33mcommit c4eb83e1e887d22ea0ba3747f07ad82e7cb72293[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Nov 2 18:36:27 2016 +0100

    Removed Class<?> from CodeUnitIdentifier

[33mcommit e787a500fdb3cdbf5d58785102772166916ce170[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Nov 2 18:27:55 2016 +0100

    Removed Class<?> from CodeUnit

[33mcommit 65ae473783fae4bbf5901b469d02100e18359bf6[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Oct 31 23:51:43 2016 +0100

    Removed explicit calls of JavaField.reflect(), introduced new custom Assertion for tests, instead of comparing reflective type.

[33mcommit 56ea822b81bc41fcd6dc61eb4a4f3adfc271f221[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Oct 29 20:54:57 2016 +0200

    Isolated Class<?> type in JavaClass by wrapper TypeDetails

[33mcommit f6b5bcd1fd48f7622ae7b1d6b20c6cac85ed565d[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Oct 29 20:40:28 2016 +0200

    Replaced some uses of Class<?> as map key by using the fully qualified class name

[33mcommit 912fe99aa8bdce515cc15f6a6c5e33845891613a[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Dec 27 17:49:02 2016 +0100

    Move resolving superclass out of TypeDetails

[33mcommit 8f311a914c73eddfc88a6e12a30923534ca1c934[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Dec 27 17:05:59 2016 +0100

    Move resolving of interfaces out of TypeDetails: Added recording of interfaces to ImportRecord, removed interfaces from TypeDetails

[33mcommit 4d84bd92483d366aa8e0a945ad47babb091a4121[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Dec 27 16:11:42 2016 +0100

    Move resolving of interfaces out of TypeDetails: Keep interfaces as string within TypeDetails

[33mcommit 5e2421e8320cce0d7ad2dfdbad82d59c5dd60585[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Dec 27 16:07:14 2016 +0100

    Removed usage of JavaType.asClass()

[33mcommit ae1100b7e870eaa524f2756e7f6223f8b0ca3977[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Dec 27 02:41:31 2016 +0100

    Added (still failing) architecture test for ArchUnit production classes -> resolving types via reflection should be explicitly marked, so we keep control where resolving types via reflection is actually okay (which is in fact only in the designated ResolverViaClassPath for dependencies and within AnnotationProxy to resolve Enum constants)

[33mcommit 9db45c11b116af552b61c42bf8628a697ae7e228[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Dec 26 18:34:58 2016 +0100

    Represent imported types as properties of annotations by JavaClass instead of TypeDetails

[33mcommit 12d514e5cbf1cf7cddc802e51c5461c8becdedea[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Dec 26 18:07:44 2016 +0100

    Remove direct equality assertions to TypeDetails in test

[33mcommit 7a160c51940f384fc0c035ad3f0b13116aec2621[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 25 21:00:28 2016 +0100

    Added ImportedClasses to BuilderWithBuildParameters.build(..), so that JavaMembers can resolve types from the imported context. Thus often TypeDetails was replaced by a full JavaClass. Also fixed shadowJar for testJar, since the testJar didn't contain relocated classes and thus accessing asm.Type caused NoClassDefFoundErrors when running the tests.

[33mcommit 27b935eb0d16b5be4a5d82a4aeb2b1f475c8bb33[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 18 22:02:45 2016 +0100

    Remove TypeDetails.of(Type) -> classForName(Type.getName()): Record members as builders within ImportContext and complete them right before we process access records, since we need all type information before we can complete members

[33mcommit 6511d2db6f8de803e49a6fde86636c756fab0c1c[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 18 17:35:56 2016 +0100

    Remove TypeDetails.of(Type) -> classForName(Type.getName()): Delay creation of type details till we have ImportedClasses to resolve from

[33mcommit 9defc46bdfe4b2a894f809b554d44660ef7620b8[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 18 16:15:11 2016 +0100

    Class annotations are now imported without relying on reflection

[33mcommit 5ffe9819edb482fa513e8421c08d5dba3b4dee52[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 18 14:13:07 2016 +0100

    Methods and Constructors are now imported without relying on reflection

[33mcommit 72ef2d57f7c4f1623b74a38ba31c95c734655c39[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Dec 17 16:58:44 2016 +0100

    Make uploadArchives and install depend on build

[33mcommit b42228666b960550b33d615aa5235a24d11c399c[m
Merge: aba6af37 418953a3
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Dec 17 16:46:12 2016 +0100

    Merge pull request #4 in TNG/archunit from uploadArchives_TNG-Nexus to master
    
    archunit and archunit-junit can now be deployed to the TNG Nexus
    
    * commit '7dcfe793af0460938d5a21dcc4c9a19d71cd4c16':
      Reuse closure to configure pom of mavenInstaller to configure pom of mavenDeployer
      Restricted upload to archunit & archunit-junit artifacts with filtered pom
      Added uploadArchives configuration that uses TNG-Nexus repositories to build.gradle;

[33mcommit 418953a34fa39add966ae59507628b01e90cd515[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Dec 17 16:41:46 2016 +0100

    Reuse closure to configure pom of mavenInstaller to configure pom of mavenDeployer

[33mcommit d76f302bfa04607d4c29d8c01618a8b067fcbb29[m
Author: Manfred Hanke <Manfred.Hanke@tngtech.com>
Date:   Tue Dec 13 07:47:10 2016 +0100

    Restricted upload to archunit & archunit-junit artifacts with filtered pom

[33mcommit 8c06426cb704cf8ae1c057cd47196e748de8714b[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Dec 12 01:54:49 2016 +0100

    Fields are now imported without relying on reflection

[33mcommit 4ef3165f308e9945eba54979fbacd834832a47d1[m
Author: Manfred Hanke <Manfred.Hanke@tngtech.com>
Date:   Sun Dec 11 21:47:16 2016 +0100

    Added uploadArchives configuration that uses TNG-Nexus repositories to build.gradle;
    
    authentication is based on properties available on Jenkins in ~/.gradle/gradle.properties

[33mcommit 8b4686c20d9b3392257384e356713cb812e6dcf9[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 11 19:43:41 2016 +0100

    We can now safely remove MemberDescription and Member type parameters of JavaMember+ and delete obsolete MemberDescription

[33mcommit aba137ed52fe40628aebb4d6693776c5168debdf[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 11 19:35:35 2016 +0100

    Pushed MemberDescription + reflection out of JavaMember+.Builder

[33mcommit f5d162ebcf0444a539de337e1d6a644c8fecc702[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 11 19:11:45 2016 +0100

    Fixed builder hierarchy so we can always consistently pass a builder as only constructor argument

[33mcommit 0a93fa684d024734ba49af3aafd28a456b8b54e6[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 11 18:42:01 2016 +0100

    Remove MemberDescription - JavaCodeUnit doesn't rely on MemberDescription anymore

[33mcommit eb46c2d543ead118a7425802d305290072e71af6[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 11 18:31:41 2016 +0100

    Remove MemberDescription - JavaField getType() now returns TypeDetails, JavaMember doesn't rely on MemberDescription anymore

[33mcommit b3effddc5269b0b78bf44b46a5f3f34ef45ccded[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 11 17:48:48 2016 +0100

    Removed ProcessingContext

[33mcommit 1d0e4812cdea4ad9a94ca935016f89d1034e2981[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 11 17:16:42 2016 +0100

    Reduce dependencies on reflection -> remove TypeAnalysisListener from JavaClass, remove CodeUnitRecorder, rely on equals and hashCode of CodeUnit instead (thus it doesn't matter if we create the 'same' CodeUnit several times, to refer to it). Also started to eliminate ProcessingContext.

[33mcommit db5a3fa3d0b4e150e114ce4498510ee7070648de[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 11 16:51:31 2016 +0100

    Prepare removing reflection from import -> Class file import is now separated from ClassFileProcessor so we can reuse it to resolve further needed classes

[33mcommit 8a4b1034138ea11d753db9e07a11fa433d6a5156[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 11 14:46:19 2016 +0100

    Added possibility to resolve multiple matching methods for ambiguous method calls (up to now the JavaDoc was actually a lie). Unfortunately this meant that a simple breadth first search through all interfaces didn't work anymore, we have to explicitly find paths through the interface inheritance, that really connect parent and child.

[33mcommit 86989740b7a433166520927884a1f3e34060f5cc[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 11 13:39:36 2016 +0100

    Resolve access targets lazily

[33mcommit e92e59add156b6d6cebd05156a563d5334eabfc9[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 11 13:33:22 2016 +0100

    We will not create a member, if we couldn't identify it in the first place. All elements of the graph must be present during resolution, or we'll skip this call. Had to extend ClassHierarchyPath for this, to be able to deal with paths through interface hierarchies. Also added consideration of interface methods when identifying a target.

[33mcommit 8332bf179602ba83b279cb8206d408c8bb553690[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Dec 10 23:54:35 2016 +0100

    Replaced modifiable Map<String, JavaClass> by ImportedClasses, where originally imported classes and additionally resolved classes are strictly separated, and resolving is decoupled via another interface (so that we can switch between resolving from the classpath and other ways by configuration)

[33mcommit 5ad3123c5ddf986858b257c38acd28111dbb8d0c[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Dec 10 23:09:21 2016 +0100

    Access resolving now works for fields and methods that are accessed via subclass (like foo.getCallsOfSelf() where (B b).foo() and B extends A and foo is defined in A)

[33mcommit ad172177bd6ffd3717e775326fb4aa2dfdd1eb96[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Dec 10 19:16:44 2016 +0100

    Prepare to resolve accesses to JavaMember lazily. Also the "owner" of the target is now the actual class called, no matter if it declares the target or just inherits it (nevertheless target.resolve() will still provide information about the class actually declaring the target)

[33mcommit 6f6125410e01b23bfd99446b258e548f7b2f09ce[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Dec 5 00:40:59 2016 +0100

    Prepare to remove fields, methods and constructors from TypeDetails

[33mcommit c866b0a57d0203e82ba07346ac34a6c90e1be84f[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 4 23:59:11 2016 +0100

    TypeDetails getSuperClass(), getInterfaces() and getEnclosingClass() now return TypeDetails again, instead of Class<?>

[33mcommit 3c96d3bb53d0c54c9f4954b8b6258a9603bf184e[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 4 22:34:25 2016 +0100

    Renamed ClassFileImportContext -> ClassGraphCreator and decoupled completion process via interface ImportContext

[33mcommit 7b22dd8e0378d79996e9045b817732243cf6c84c[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 4 22:22:46 2016 +0100

    Separated recording the import from creating the graph

[33mcommit b1736809fc05269c765aff53d801388bd40926b2[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 4 22:09:46 2016 +0100

    Untangle crazy access record class hierarchy: Raw{Member}AccessRecords are now finally obsolete and can be removed

[33mcommit e6bea1fc857a1be50ac6ee153fd93151101f079c[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 4 20:38:06 2016 +0100

    Untangle crazy access record class hierarchy: Removed rawAccessRecord.process(), so that we can now safely remove RawMethodCallRecord & co

[33mcommit 60c1a2b7af4b39892f7d4e5a3ebd737eab2f8a88[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 4 20:12:05 2016 +0100

    Untangle crazy access record class hierarchy: CodeUnit and TargetInfo do more naturally belong to RawAccessRecord

[33mcommit 6a72e4e229d914d5f1aa29934de5cefd396acb99[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 4 19:57:54 2016 +0100

    Untangle crazy access record class hierarchy: Rename BaseAccessRecord -> RawAccessRecord

[33mcommit 11e58e193c2ba11017c0c1213e41aee5404f9400[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 4 19:54:52 2016 +0100

    Untangle crazy access record class hierarchy: Removed obsolete type parameters from BaseAccessRecord

[33mcommit e76ab44f2eb5975bff0683b3aaba75e2547b0f43[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 4 19:23:09 2016 +0100

    Untangle crazy access record class hierarchy: Moved all Processed to AccessRecord.Factory

[33mcommit 11aff7e2530c41e04cab653bbd4bf2fcf81951db[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 4 18:47:17 2016 +0100

    Untangle crazy access record class hierarchy: Made all *Record*.Processed static and moved them up one level

[33mcommit 498ca42023a8e3890b5815a5fe5860250ae074e9[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 4 18:41:11 2016 +0100

    Untangle crazy access record class hierarchy: Inlined BaseRawAccessRecord

[33mcommit 3c56c552a21c976d6269d3668b086b36b6ec32b2[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 4 18:16:19 2016 +0100

    Untangle crazy access record class hierarchy: Replaced "new Builder" by static method

[33mcommit 63b0caf9145b9265b72193e540f78881bc03aba9[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 4 18:01:03 2016 +0100

    Untangle crazy access record class hierarchy: Decoupled process from BaseRawAccessRecord and moved utility functions top level

[33mcommit d684173cc363c8f3d92b4c7173256e27ba743edf[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 4 17:52:09 2016 +0100

    Untangle crazy access record class hierarchy: Removed BaseRawAccessRecord.Processed and moved common logic to static utility functions

[33mcommit f118126af5ac6fd6cfb790451c90d3bafd849bc1[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 4 17:29:00 2016 +0100

    Untangle crazy access record class hierarchy: Replace extends BaseAccessRecord by delegation

[33mcommit 8ea3867f253dd5f41953aed07c6d3b1a5769b369[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 4 17:02:24 2016 +0100

    Added (currently failing) test for import of classes outside of the classpath

[33mcommit 5de607ad34ca7c7e5d3153db252ca7fc86052b18[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 4 16:33:03 2016 +0100

    Made annotations in JavaClass and JavaMember more consistent

[33mcommit 241bce6e777326270088346e5bb3631bd7ac5d0e[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 4 16:16:48 2016 +0100

    Moved actual creation of JavaAnnotation out of JavaClass

[33mcommit c1e28433f27032e7c10ec5be4a7b4424032fa4e1[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 4 16:07:36 2016 +0100

    Replaced javaClass.reflect().getAnnotation() by direct calls on JavaClass not depending on reflect()

[33mcommit 74ec05fdc2afb1b72bd7dc818cee51bff1d81ce4[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Dec 4 02:49:47 2016 +0100

    Added feature to derive a java.lang.annotation.Annotation from a given JavaAnnotation to make handling of properties easier if the specific annotation class is on the class path

[33mcommit f410729cac8fd98ae5a131fc2bf1f98149b450db[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Dec 1 00:37:15 2016 +0100

    JavaAnnotation can't implement HasOwner in a reasonable way, if we want to use it for JavaClass as well (the only common type bound for owner would be AnnotatedElement, which does not bring any benefit to do assertions on)

[33mcommit 657dd1d6e72768aa19df118c039f62bfd8153b5c[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Dec 1 00:15:51 2016 +0100

    We still need the factory method in a central place to reuse it when we add JavaAnnotation to JavaClass

[33mcommit 94a59b19e0ae957550619f1d683e57c67db68f68[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Nov 29 23:22:24 2016 +0100

    Even though array sucks, it's probably less confusing if all annotation properties of type array are represented as array in JavaAnnotation

[33mcommit 1d44c5f434281184ead1a08b8848cf1b3f7f0c0a[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Nov 29 23:02:10 2016 +0100

    Moved reflection Annotation out of JavaAnnotation

[33mcommit 420b30e42ec284c79028a5d209f5b3e9c9695b5a[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Nov 29 22:10:04 2016 +0100

    replace Class<?> return value in JavaAnnotation by TypeDetails

[33mcommit b5c63a18886ca38708efa1dd7c32cc1daa6e741c[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Nov 29 21:57:21 2016 +0100

    Removed obsolete type parameter of JavaAnnotation and obsolete hashCode variable inside of JavaMember

[33mcommit 2046b65b2a49c964d95c15a754f84b119e7cd5d5[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Nov 29 21:54:29 2016 +0100

    Moved creation of JavaAnnotation out of JavaMember

[33mcommit 4983e7aa67ca4d73088a65bb9aba34b85ee0ef38[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Nov 29 21:48:08 2016 +0100

    JavaAnnotation now hides the wrapped reflection Annotation, duplicated code will naturally vanish when the refactoring proceeds

[33mcommit 0650d080452f372e029f19abe10a7c76d71a8b93[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Nov 19 15:16:16 2016 +0100

    Removed equals and hashCode from the reflection representatives. JavaClass, JavaMethod, ..., are only constructed by the core, and the core should assert uniqueness of each class and thus method, field, ... Allowing the comparison of different JavaClasses as equal by representing the same type, only invites bugs and confusion.

[33mcommit a6de0628b934ef9360241fa8aab3526b9b36c356[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Nov 13 22:05:06 2016 +0100

    Instead of representing an access target  by a Java{Field, Method, Constructor} we need a different concept (now named *Target), to deal with the possibilities that there is not this one identifiable target (up to now a new method was created for this, but this needs to be changed, it's not modelled correctly)

[33mcommit dbe24b07eb775b7a411c75f5d66fa98b59df8e96[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Nov 5 20:32:05 2016 +0100

    Replaced some more Class<?> by TypeDetails, specifically javaMethod.getParameters() and javaMethod.getReturnType()

[33mcommit badaec2d4e9fc56324e98e2f2256c025ba1764fc[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Nov 2 18:53:45 2016 +0100

    Removed Method/Constructor field from CodeUnit

[33mcommit 227a54c59c8aa6a18eafe5a51244e9d82fffc8bd[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Nov 2 18:36:27 2016 +0100

    Removed Class<?> from CodeUnitIdentifier

[33mcommit e350ca1a6aaf0e9607159527feee71538b142488[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Nov 2 18:27:55 2016 +0100

    Removed Class<?> from CodeUnit

[33mcommit 063e688967abd2c72e884f3be6092d15ec405038[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Oct 31 23:51:43 2016 +0100

    Removed explicit calls of JavaField.reflect(), introduced new custom Assertion for tests, instead of comparing reflective type.

[33mcommit 970fd7e66fb934a6ecb9cc416217fd7cf935ef1a[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Oct 29 20:54:57 2016 +0200

    Isolated Class<?> type in JavaClass by wrapper TypeDetails

[33mcommit 1cdbe65429dff7d86f0fb66c16f88d1df8346c69[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Oct 29 20:40:28 2016 +0200

    Replaced some uses of Class<?> as map key by using the fully qualified class name

[33mcommit aba6af37c550a896f3fd669e0d3d33d36706dfc7[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Oct 28 16:30:51 2016 +0200

    Set initialize to false in Class.forName(..)

[33mcommit 68417093bb56d20847bc31b31de460c25d6d004a[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Sep 10 20:23:34 2016 +0200

    Consolidated some more descriptions and added more predicates

[33mcommit 0927667610fc3e2d6b5ae870f393c234ccf97793[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Sep 10 17:52:17 2016 +0200

    Consolidated some descriptions and namings

[33mcommit b3df3b1afeac152534653ab66c0c8187559c2757[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Aug 18 23:21:16 2016 +0200

    Added generic accessClass(..) condition

[33mcommit 27fb996a79133cfe8d79a0328a5e576baa2fa26b[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Aug 18 01:40:27 2016 +0200

    Some minor changes -> ArchCondition.as(..) takes now Object... args to be consistent, accessField(clazz, name) has now better description

[33mcommit c85813b694514e31cf92d12c3dfd127d1afd60f1[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Aug 14 16:23:42 2016 +0200

    Minor improvement of test readability

[33mcommit ddd6d958ba61d13ab8085d014332cb657f59cebd[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Aug 14 13:40:24 2016 +0200

    Fixed default CallPredicate description, which contained 'always true' from alwaysTrue() predicate

[33mcommit e7ab70e8d2ff15ae1b1e0e9905f9920b442d9ad2[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Aug 13 20:43:58 2016 +0200

    Extended integration test infrastructure to better look out for unexpected violations.
    Fixed bug in library where the rule to check for generic exceptions was violated by the call of a custom exception to super.<init>().
    Fixed bug where a call target in a super class would not be resolved correctly, if the super class wasn't scanned initially, because the resolution of those classes by reflection was done too late.
    Improved predicates for method calls by grouping those predicates together in a class CallPredicate that does better fluent offerings of possible restrictions.

[33mcommit c844c6443dbe902ba9115851fc51fcf211850f7c[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Aug 5 16:16:12 2016 +0200

    BugFix: The new should(..) syntax introduced a bug, where transformer.that(..) did not apply the predicate to the iterable anymore. This is now fixed, types are in some places wider and thus some unchecked casts could be removed.

[33mcommit 384812e68623f446b3739d41d14d0f42729573ad[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Aug 5 15:14:05 2016 +0200

    Fixed ArchUnitIntegrationTestRunner, analogous to ArchUnitRunner, so failures will be detected by gradle.

[33mcommit db1c835ff2d6ffb5bc1ca0b94c9c71250e00419e[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Aug 5 14:52:02 2016 +0200

    Added log4j2.xml to example, added two minor fixes where tests wouldn't run correctly when executed on Windows.

[33mcommit a0d0951fc1eec77eac96362c3f5274bc0613e052[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Aug 3 21:59:44 2016 +0200

    ArchRules.in(..) now finds further ArchRules defined in the target. Thus it's possible to specify hierarchical sets of rules or one central library for dependent modules to use. Also fixed ArchUnitRunner because some notifiers (like IntelliJ's) do not like fireTestStarted(..) plus fireTestIgnored(..), and ArchUnitRunner does not scan classes anymore, if all rules are ignored at the field/method level, but not the class level.

[33mcommit e322be7b2789b8cb910fc480f016c99fdf6193c6[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Aug 3 00:00:33 2016 +0200

    ReflectionUtils.classForName(..) needs to be able to handle canonical names and primitives, because if we fall back to resolving method parameters, etc., via ASM Types, the classname is unfortunately the canonical name.

[33mcommit 4d1f261c311336ac5947cc9ca25e0762ef409617[m
Merge: 7aab4eab f0c3e000
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Aug 1 08:39:58 2016 +0200

    Merge pull request #3 in TNG/archunit from ruletext-from-condition to master
    
    * commit '902099d6bd6953ace89b6bdb6fc0221e15b703bf':
      Conditions do now supply their descriptions. Thus it's not necessary to write should("some text").assertedBy(notDoSomething()), but instead one can specify should(notDoSomething()) and the description will be created from the condition. Special thanks to @goetzd for the idea and proof of concept :-)

[33mcommit 7aab4eab2c6f64bb7d66a79bd21bb7a5246fa33b[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Jul 29 22:53:26 2016 +0200

    Added example for managing rule sets.

[33mcommit f7db1798fc2cea1f7fef1a370805adaba2db8fbd[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Jul 29 19:23:27 2016 +0200

    Updated Gradle Wrapper to 2.14.1

[33mcommit f29cd4252010074c6733bb88b702c8fb20c443d1[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Jul 29 19:22:56 2016 +0200

    Fixed ArchUnitRunner - if fireTestFinished(..) is not called, Gradle doesn't detect test failures (and the JavaDoc states that the correct usage is to fireTestFinished(..) whenever fireTestStarted(..) was called earlier, so it's not a bug in Gradle)

[33mcommit 5ac9a54651738ff1ef812685f899720d2b5a1d88[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Jul 28 21:35:06 2016 +0200

    Only configure shadowJar for projects that really need it (we don't build Maven artifacts from the other sub modules anyway...)

[33mcommit f0c3e000e32cbd5ce6681eb3e9a411b62dece810[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jul 24 16:02:10 2016 +0200

    Conditions do now supply their descriptions. Thus it's not necessary to write should("some text").assertedBy(notDoSomething()), but instead one can specify should(notDoSomething()) and the description will be created from the condition.
    Special thanks to @goetzd for the idea and proof of concept :-)

[33mcommit 035e00027550e17e00a8d41eb8d557d8650206ca[m
Merge: 98908fb0 6e39114f
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Jul 12 20:04:17 2016 +0200

    Merge missing dependencies for Gradle Wrapper from 'GRADLE_WRAPPER'

[33mcommit 6e39114f3d74fe2dbd58571a7000a8083d3988d7[m
Author: Jan Schäfer <jan.schaefer@tngtech.com>
Date:   Tue Jul 12 06:49:01 2016 +0200

    add gradle folder to vcs

[33mcommit 98908fb0b636875c255b53b535ff7509722b3026[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Jul 11 13:10:08 2016 +0200

    We should not open all InputStreams at once when creating a ClassFileSource, but do it lazily, at the time we really want to read the class file.

[33mcommit 30bb35a0cba8297973ac18a307b058d7971b10e6[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Thu Jul 7 19:15:59 2016 +0200

    Minor renaming

[33mcommit 26b7c201c0fa631b1af8ae5f159ca36fe1bf266a[m
Merge: e758094b 1d3bafd8
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Mon Jul 11 08:17:16 2016 +0200

    Merge pull request #1 in TNG/archunit from GRADLE_WRAPPER to master
    
    * commit '85dd7c4c212bfec46374544d6bfb4402a4d79e83':
      introduce gradle wrapper

[33mcommit 1d3bafd8e57a9f3f5b6b5a7da4f46791b18b5a3b[m
Author: Jan Schäfer <jan.schaefer@tngtech.com>
Date:   Sun Jul 10 15:15:21 2016 +0200

    introduce gradle wrapper

[33mcommit e758094be54bb8092448dc92f275dc0d40aea0cd[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Wed Jul 6 00:20:24 2016 +0200

    Added isolation rule to DependencyRules

[33mcommit 5ecfe95c59d88529605cdabb473d0bd234f90951[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Tue Jul 5 20:49:05 2016 +0200

    Added interfaces to JavaClass

[33mcommit ad8c63cfa13b7c14dcea7d4db26062e2f5045db6[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jul 3 18:16:54 2016 +0200

    Added simple way to ignore certain architecture violations. If a file archunit_ignore_patterns.txt exists in the root of the classpath, each line will be interpreted as a regex and violating event messages matching any pattern will be filtered out.

[33mcommit 230a2f4b66c1331ee393b1fd169c58306392acd4[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jul 3 16:51:48 2016 +0200

    We use the shadow plugin now, to include asm and guava repackaged in our JAR and only depend on SLF4J in a Maven way. That way we should not collide with ASM or Guava libraries on the classpath of projects that include ArchUnit tests.

[33mcommit b823b6dc7060d4a76d89c50a07c67e14375fc012[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jul 3 15:52:01 2016 +0200

    Removed Guava from the public API, so that in the next step we can repackage Guava to avoid conflicts on the classpath.

[33mcommit b52fc474eb4e072fd5c999a2faed67b3e7f9dbb8[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Jul 1 18:27:04 2016 +0200

    Removed dependency on org.reflections, since it is extensive and we use only a tiny part of it.

[33mcommit 665732c37e3d890cc49466cd178a85dd40e4567b[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jun 26 19:12:53 2016 +0200

    UrlFilter and ImportOption were used for the same purpose, thus UrlFilter was replaced by ImportOption

[33mcommit f15294a72e87930a1e718f67a078ab84b75b5020[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jun 26 18:14:24 2016 +0200

    Unified identifying targets

[33mcommit e0fdcb8ebe2de199a87b533ead8ae42d46625878[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jun 26 16:32:44 2016 +0200

    Removed some bloat classes without special purpose

[33mcommit fbc4240c9162a064dbd38a37e784a8b7713a1f59[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun Jun 26 13:34:54 2016 +0200

    SlicesArchCondition should be hidden -> changed package slices to dependencies and moved rule there so it can access package private SlicesArchCondition.
    Also added rule factory method that takes Slices.Transformer and returns the full rule to check for cycles.

[33mcommit 758a5ae399c8699b573a729c1dce19866555dd81[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Jun 24 12:18:59 2016 +0200

    Worked in some practical lessons learned.

[33mcommit 3410c8976f4c39ac0e05380fce049242b2a23c40[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Jun 18 02:04:46 2016 +0200

    Fixed generated Maven POMs, where one dependency was a test-jar (the POM would just contain the same dependency twice, possibly with different scopes :-( )

[33mcommit 749383b077888700fbf7b821b4f0e5da97fc3db8[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri Jun 17 21:16:33 2016 +0200

    Within URLs we luckily don't need to consider File.separator, but can just use '/' on any platform

[33mcommit b804d633b2fa560ac3d4ae269e8e747ac4ff5b7f[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Jun 4 18:08:30 2016 +0200

    Access rules on package level can now be specified in a white list way, i.e. by specifying who may access a certain layer/slice instead of prohibiting a certain subset of calls (i.e. black list)

[33mcommit dde25114b4b12c388aa215ad2ab9d824d6f9ec8f[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat Jun 4 16:35:48 2016 +0200

    Fields, methods and constructors, and thus classes, know now, who accesses them. Consequently the dependency graph can be navigated in both directions now.

[33mcommit b6812b8176f419def7e94970ebbc628a45b4c62e[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat May 28 20:36:16 2016 +0200

    Made example a little bit easier to understand

[33mcommit 24a391ff11fb2e6c752b03b05b595890417b4ae5[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat May 28 20:18:57 2016 +0200

    Renaming
    AbstractArchCondition -> ArchCondition
    since this is after all the condition to use to write custom rules

[33mcommit 31372a9ada7ec4e8e9ac88ea0993ca2d9452854b[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat May 28 20:17:31 2016 +0200

    ArchCondition aka SimpleArchCondition isn't such a great concept after all, because:
    - normally you want to record several violations instead of only 'true' or 'false'
    - separating the message makes problems
    Thus it is better to just record ConditionEvents when the events occur, and make AbstractArchCondition (soon to be renamed once again) the main API

[33mcommit 6c5efdaf521f825e1ae1092ee03007f625887fe0[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat May 28 16:05:32 2016 +0200

    Removed some shadyness from JavaClass, where instanceof checks were done.

[33mcommit 1493b64c788147cd0c7f523553f5e350814db445[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat May 28 15:58:23 2016 +0200

    Renaming:
    JavaMethodLike -> JavaCodeUnit
    The naming of calling methods, constructors and static initializers "method-like" is weird, expecially since those are revered to as methods then, but then real methods need to becalled something else, like "proper" methods.
    It seems better to introduce the new vocabulary of "code unit" in one place, referring to any closed section where behavioral code can be specified, and then have all other vocabulary clean and without surprises (method is method and constructor ist constructor, etc.)

[33mcommit a11ddbd6236f700b19723a988daf6cacbdffb002[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat May 28 15:08:15 2016 +0200

    Renaming:
    JavaMethodLikeCall -> JavaCall

[33mcommit 847c0ba955b3b0dd49864d802c284be66e734c71[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat May 28 14:56:15 2016 +0200

    Renaming. Since normally users should write their rules using SimpleArchCondition and not ArchCondition, it's better to name
    ArchCondition -> AbstractArchCondition
    SimpleArchCondition -> ArchCondition

[33mcommit d894b3168e93278ff49fca10ddd227dd08d2e404[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sat May 28 14:31:20 2016 +0200

    Added the possibility to run another classes @ArchTests within a separate test by specifying an @ArchTest ArchRules field. This way it's possible to create a rule library as classes grouping certain rules and test those rule sets within another project, without specifying each single rule again.

[33mcommit 555f81198cc7afe8d73e2f3f8b0fea130e3c8ad7[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri May 27 14:23:03 2016 +0200

    ArchUnitRunner can now also execute methods and supply the imported classes as method argument

[33mcommit 5e85b03daa4e9914ec13753e93e06b7f209500a7[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Fri May 27 10:54:06 2016 +0200

    Refactored JavaClasses to contain a Map<Class<?>, JavaClass> instead of just a Set, so it's possible to write Tests for a specific class easier

[33mcommit b2d77e90c5296e3286bc6706ded33df76a367072[m
Author: Peter Gafert <peter.gafert@tngtech.com>
Date:   Sun May 22 03:23:42 2016 +0200

    Initial commit
